if game.gameId ~= 985731078 then
    return
end
if not game:IsLoaded() then
    game.Loaded:Wait()
end

local devMode = true
print('Secret Infinite World Zero Script v11')
local Players = game:GetService('Players')
local LocalPlayer = Players.LocalPlayer or Players:GetPropertyChangedSignal('LocalPlayer'):Wait() or Players.LocalPlayer
local plr = LocalPlayer
local userId = plr.UserId
local HttpService = game:GetService('HttpService')
--local id = game:GetService("RbxAnalyticsService"):GetClientId()
local function GetTime() 
    local time = os.date("!*t", os.time())
    local hour = time.hour
    local min = time.min
    local sec = time.sec
    local day = time.day
    local month = time.month
    if time.hour < 10 then
        hour = '0' .. time.hour
    end
    if time.min < 10 then
        min = '0' .. time.min
    end
    if time.sec < 10 then
        sec = '0' .. time.sec
    end
    if time.day < 10 then
        day = '0' .. time.day
    end
    if time.month < 10 then
        month = '0' .. time.month
    end
    return hour .. ':' .. min .. ':' .. sec .. ' - ' .. day .. '/' .. month .. '/' .. time.year
end
local colorTbl = {
    Green = 0x00FF00,
    Red = 0xFF0000,
    Black = 0x000000,
    Cyan = 0x00c8ff,
    Yellow = 0xffff00,
    Gold = 0xffd700,
}
local LibraryLoaded



local publicHookUrl = 'https://discord.com/api/webhooks/1269773054553362452/DHH9XgUWkExFlbghxzp-hXHDUiDFs2sGEqWRY32yo6Cn4olVmwA9hVx0R_YJftztEmFV'
local DamageDebug = false -- DamageDebug
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Shared = ReplicatedStorage:WaitForChild('Shared')
local TeleportService = game:GetService('TeleportService')
local SafePart
local SafeZone
local TeleportingToMob = true
local dungeonEndGold
local ownsDoubleDrop = false
local mobRoot, attackPos, mobPos, dist, originDist, isBoss, mobHp
local httpRequestSent = false
local fileSystemEnabled = isfile and readfile and writefile and true
local lastAttackTime
pcall(function()
    ownsDoubleDrop = game:GetService("MarketplaceService"):UserOwnsGamePassAsync(LocalPlayer.UserId, 8136250)
end)
local VirtualUser = game:GetService('VirtualUser')
LocalPlayer.Idled:Connect(function()
    VirtualUser:CaptureController()
    VirtualUser:ClickButton2(Vector2.new())
end)
local PlayerName = LocalPlayer.Name
local WorldZeroID = 2727067538
local MissionStarted = false
local PauseAutoCheckpoint = false
local TowerIdleSpot
local InfiniteWorldZeroData = {
    Kicked = false,
    WasInDungeon = false,
    Dungeon = false,
    Difficulty = false,
    Timestamp = false,
    RejoinLastDungeon = false,
    CameFromMenu = false,
    RejoinLastDungeonThreshold = 1800,
    Gold = false,
    LastDungeonCompletion = false,
}

local KickFilename = LocalPlayer.UserId ..  '_InfiniteWorldZeroData.txt'
local http = game:GetService("HttpService")
local Towers2 = {21,23,27,29,34,43,39,38}
function save()
    local json
    if (writefile) then
        json = http:JSONEncode(InfiniteWorldZeroData)
        writefile(KickFilename, json)
    end
end
function load()
    if (readfile and isfile and isfile(KickFilename)) then
        InfiniteWorldZeroData = http:JSONDecode(readfile(KickFilename))
    end
end
local function sendError(v1,v2,v3)
    game.StarterGui:SetCore("SendNotification", {
    Title = v3 or "Infinite";
    Text = v1; 
    Duration = v2 or 4; 
    })
end
local guiService = game:GetService('GuiService')
guiService.ErrorMessageChanged:Once(function(msg)
    if guiService:GetErrorCode() == Enum.ConnectionError.DisconnectLuaKick or guiService:GetErrorCode() == Enum.ConnectionError.DisconnectConnectionLost then
        InfiniteWorldZeroData.Kicked = true
        if DungeonID then
            InfiniteWorldZeroData.WasInDungeon = true
        end
        save()
        TeleportService:Teleport(WorldZeroID, LocalPlayer)
    end
end)
if game.PlaceId == WorldZeroID then
    load()
    if InfiniteWorldZeroData.Kicked or (InfiniteWorldZeroData.RejoinLastDungeon and tick()-InfiniteWorldZeroData.Timestamp <= InfiniteWorldZeroData.RejoinLastDungeonThreshold) then
        InfiniteWorldZeroData.Kicked = false
        InfiniteWorldZeroData.CameFromMenu = true
        save()
        local mod = require(game.Players:WaitForChild(LocalPlayer.Name):WaitForChild("PlayerScripts"):WaitForChild("LocalScript"):WaitForChild("Guis"):WaitForChild("CharacterPicker"))
        local profile = mod:GetSelectedProfile()
        while not profile do
            task.wait()
            profile = mod:GetSelectedProfile()
        end
        local guid = profile.GUID.Value
        local Play = Shared:WaitForChild('Teleport'):WaitForChild('JoinGame')
        Play:FireServer(guid)
    end
end 
local Gold = ReplicatedStorage:WaitForChild('Profiles'):WaitForChild(PlayerName):WaitForChild('Currency'):WaitForChild('Gold')
local OldGold = ReplicatedStorage:WaitForChild('Profiles'):WaitForChild(PlayerName):WaitForChild('Currency'):WaitForChild('Gold').Value
local NewGold = OldGold
local MissionObjects
local MissionScripts
local DungeonID
local DifficultyID = nil
local Towers = {21,23,27,29,34,43}
local InMission = false
local InDungeon = false
local InAtlantis = false
local InTower = false
local InInfiniteTower = false
local DungeonCompleted
local requestDone
local OldPosition
local TempCheck = false
if ReplicatedStorage:FindFirstChild("ActiveMission") then
    InMission = true
    MissionObjects = game:GetService("Workspace"):WaitForChild("MissionObjects")
    MissionScripts = ReplicatedStorage:WaitForChild("MissionScripts")
    DungeonID = ReplicatedStorage:WaitForChild("ActiveMission").Value
    InfiniteWorldZeroData.Dungeon = ReplicatedStorage:WaitForChild("ActiveMission").Value
    if table.find(Towers, DungeonID) then
        InTower = true
    elseif DungeonID == 38 or DungeonID == 39 then
        InInfiniteTower = true
    else
        InDungeon = true
        DifficultyID = Shared.Missions.GetDifficulty:InvokeServer()
        InfiniteWorldZeroData.Difficulty = Shared.Missions.GetDifficulty:InvokeServer()
    end  
    if DungeonID == 23 then
        InAtlantis = true
    end
end
local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait() or LocalPlayer.Character
local HumanoidRootPart = Character:WaitForChild('HumanoidRootPart')
local hrp = HumanoidRootPart
local HealthProperties
while true do
    if game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild('HealthProperties') then
        HealthProperties = game.Players.LocalPlayer.Character.HealthProperties
        break
    end
    task.wait()
end
local HealthProperties = Character:WaitForChild('HealthProperties',10)
local Equipment
LocalPlayer.CharacterAdded:Connect(function(NewCharacter)
    Character = NewCharacter
    HumanoidRootPart = Character:WaitForChild('HumanoidRootPart')
    hrp = HumanoidRootPart
    HealthProperties = Character:WaitForChild('HealthProperties')
    Equipment = Character:WaitForChild('Equipment')
end)
local KrakenArmCheck = true
local UserId = LocalPlayer.UserId
local MarketplaceService = game:GetService("MarketplaceService")
local CoinTable = debug.getupvalue(require(Shared.Drops).Start, 4)
local CoinEvent = Shared:WaitForChild('Drops'):WaitForChild('CoinEvent')
local Profile = ReplicatedStorage:WaitForChild("Profiles"):WaitForChild(PlayerName)
local Equip = Profile:WaitForChild('Equip')
local Primary = Equip:WaitForChild('Primary')
local Offhand = Equip:WaitForChild('Offhand')
local Upgrade = Shared:WaitForChild('ItemUpgrade'):WaitForChild('Upgrade')
local Characters = game:GetService("Workspace"):WaitForChild("Characters")
local Class1 = Profile:WaitForChild("Class")
local Class = Class1.Value
local GetMissionChest = Shared.Missions.GetMissionPrize
Equipment = Character.Equipment
local Skillsets = Shared:WaitForChild('Combat'):WaitForChild('Skillsets')
local RangedClassRange = 60
local MeleeClassRange = 18
local UltimateDelay = 31
local MobCount
local MobCountNum
local ChestWait = 1
local ChestName = 'RaidChestSilver'
local ChestName2 = 'RaidChestGold'
local AtlantisBossCheck = false
local Attack = Shared:WaitForChild("Combat"):WaitForChild("Attack")   
local Mobs = game:GetService("Workspace"):FindFirstChild("Mobs")
local MobList = Shared.Mobs.Mobs
local camera = workspace.Camera
local finalChestsAppeared
local finalItemHandled
local finalItemHandledTime = tick()
local lastChestAppeared = tick()
local activelyTeleportingToMob
local function resetCamera()
    local desiredPov = plr.Character and plr.Character.PrimaryPart and (plr.Character.PrimaryPart:FindFirstChild("Part") or plr.Character.PrimaryPart)
    if desiredPov and not (camera.CameraSubject == desiredPov) then camera.CameraSubject = desiredPov end
end
local function noclip()
    if plr.Character and plr.Character.PrimaryPart and plr.Character.PrimaryPart.CanCollide then plr.Character.PrimaryPart.CanCollide = false end
end
local function unnoclip()
    if plr.Character and plr.Character.PrimaryPart and not plr.Character.PrimaryPart.CanCollide then plr.Character.PrimaryPart.CanCollide = true end
end
local function setMobCamera(toggle, subject)
    local desiredPov = toggle and subject or plr.Character and plr.Character.PrimaryPart and (plr.Character.PrimaryPart:FindFirstChild("Part") or plr.Character.PrimaryPart)
    if desiredPov and not (camera.CameraSubject == desiredPov) then camera.CameraSubject = desiredPov end
end
local function Mob(v1)
    if MobList:FindFirstChild(v1) then return require(MobList[v1]) end
end
local function SwitchOffhandPerks(v1)
    Shared.Settings.OffhandPerksActive:FireServer(v1)
end
function sortTbl(v1)
    table.sort(v1, function(a,b)
        return a < b
    end)
end

local function formatNumberWithCommas(value)
    local formatted = tostring(value)
    local k
    repeat
        formatted, k = string.gsub(formatted, "^(-?%d+)(%d%d%d)", '%1,%2')
    until k == 0
    return formatted
end

local HttpService = game:GetService("HttpService")
local BestMob
local DoubleDrop = 8136250
local TowerEnd = game:GetService("Players").LocalPlayer.PlayerGui:WaitForChild("TowerFinish").TowerFinish.Description
local Nightmares = {1005, 1006, 1007}
local Inventory = Profile:WaitForChild('Inventory'):WaitForChild('Items')
local MissionData = require(Shared.Missions.MissionData)
local PerkData = require(Shared.Gear.GearPerks)
local items = require(Shared.Items)
local TowerDing = true
local AutoSellTbl = {}
local Settings = require(Shared:WaitForChild('Settings'))
local ProfileSettings = Profile:WaitForChild('Settings')
local PausePos
local Healing
local Heartbeat = game:GetService('RunService').Heartbeat
local function OffhandPerksActive()
    return ProfileSettings:GetAttribute('OffhandPerksActive')
end
function StartRaid(v1,v2)
    Shared:WaitForChild('Teleport'):WaitForChild('StartRaid'):FireServer(v1, v2)
end
local tier = require(Shared.Inventory)
Class1:GetPropertyChangedSignal("Value"):Connect(function()
    Class = Class1.Value
end)
local dungeonStartTime = 0
local dungeonEndTime = 0
Shared.Missions.MissionStart.OnClientEvent:Once(function()
    MissionStarted = true
    dungeonStartTime = tick()
end)

load()
if not InMission then
    if (InfiniteWorldZeroData.Kicked and InfiniteWorldZeroData.WasInDungeon) or (InfiniteWorldZeroData.RejoinLastDungeon and tick()-InfiniteWorldZeroData.Timestamp <= InfiniteWorldZeroData.RejoinLastDungeonThreshold) and InfiniteWorldZeroData.CameFromMenu then
        InfiniteWorldZeroData.CameFromMenu = false
        save()
        if InfiniteWorldZeroData.Dungeon then
            local JoinDungeon = Shared:WaitForChild('Teleport'):WaitForChild('StartRaid')
            while true do
                if table.find(Towers2, InfiniteWorldZeroData.Dungeon) then
                    JoinDungeon:FireServer(InfiniteWorldZeroData.Dungeon)
                else
                    JoinDungeon:FireServer(InfiniteWorldZeroData.Dungeon, InfiniteWorldZeroData.Difficulty)
                end
                task.wait(1)
            end
        end
    else
        InfiniteWorldZeroData.Kicked = false
        InfiniteWorldZeroData.CameFromMenu = false
        InfiniteWorldZeroData.WasInDungeon = false
        save()
    end
elseif InMission then
    InfiniteWorldZeroData.WasInDungeon = true
    InfiniteWorldZeroData.Dungeon  = DungeonID
    InfiniteWorldZeroData.Difficulty = DifficultyID
    InfiniteWorldZeroData.CameFromMenu = false
    InfiniteWorldZeroData.Timestamp = tick()
    save()
end

--if MarketplaceService:UserOwnsGamePassAsync(UserId, DoubleDrop) then
--    ChestName = 'lol'
--end
local checkpointTbl = {
    'Checkpoint1', 
    'Checkpoint2', 
    'Checkpoint3', 
    'Checkpoint4', 
    'Checkpoint5', 
    'Checkpoint6', 
    'Checkpoint7', 
    'Checkpoint8',
    'Checkpoint9',
    'Checkpoint10',   
    'CutsceneTrigger', 
    'Main', 
    'CaveTrigger',
    'BossIntroTrigger',
    'TownTalkPart',
    'BridgeTrigger',
    'BoulderTrigger',
    'BoulderStopTrigger',
    'Cage1Marker',
    'Cage2Marker',
    'CannonTrigger',
    'CastleTrigger',
    'WallsCheckpoint',
    'HammerReset1',
    'WallsTrigger',
    'WallsFinalTrigger',
    'Room1Trigger',
    'Room2Trigger',
    'Room3Trigger',
    'Room4Trigger',
    'Room5Trigger',
    'Room6Trigger',
    'TreasureMarker',
    'NextCheckpointTrigger',
    --'TempleTrigger', -- Snake Trap in Mama Trauma LUL
    'PreBridgeTrigger',
    'CheckpointTriggers',
    'CaveSpawnTrigger',
    'CliffsideEndTrigger',
    'VineRoomTrigger',
    'CheckpointTrigger',
    'ObbyTrigger',
    'BossTrigger',
    'DropTrigger',
    'CastleGateTrigger',
    'SceneTrigger',
    'OutsideBossTrigger',
    'Area1Trigger',
    'Area2Trigger',
    'Area3Trigger',
    'FinishRing',
    'StartWaveDefense',
    'Trigger1',
    'Trigger2',
    'Trigger3',
    'BossCutsceneTrigger',
    'FloorTrigger',
    'BossCutscene',
    'BottomElevatorTrigger',
    'MiddleElevatorTrigger',
    'TopElevatorTrigger',
    'ObbyTrigger5',
    'WaveStarter',
    'BossDoorTrigger',
    'MinibossExit',
}
if DungeonID and DungeonID == 43 then -- Remove Wave Defense starter from Arcane Tower so we can skip straight to boss fight
    table.remove(checkpointTbl, table.find(checkpointTbl, 'WaveStarter'))
end
local ignoreObjects = {
    'Scarecrow1', 
    'Scarecrow2', 
    'Scarecrow3', 
}
local specialTargetingDungeons = {
    DireProblem = { Id = 2, ignoreMob = 'BOSSDireBoarwolf' },
    KingSlayer = { Id = 4, ignoreMob = 'BOSSKingCrab' },
    GravetowerDungeon = { Id = 6, ignoreMob = 'BOSSTreeEnt', mobWaitTime = 3 },
    RoughWaters = {Id = 25, ignoreMob = 'DavyJones'},
    VolcanosShadow = { Id = 13, ignoreMob = 'BOSSCerberus' },
    KonoHeartlands = { Id = 24, ignoreMob = 'CorruptedGreaterTree' },
    AetherFortress = { Id = 33, ignoreMob = 'BOSSTreeEnt' },
    MamaTrauma = { Id = 12, ignoreMob = 'BOSSMamaQuillodile' },
    TheUnderworld = { Id = 26, ignoreMob = 'HadesCerberus' },
    VaneEvent = { Id = 44, priorityTbl = {'EVENTBOSSVane'} },
    ArcaneTower = { Id = 43, priorityTbl = {'Crystal','BOSSKandrix'} },
    RescueInTheRuins = { Id = 30, priorityTbl = {'Alligator','Rapigator','Sentry','HandTower'} },
    PyramidDungeon = { Id = 18, priorityTbl = {'ScarabGreen','BuffCactus','HappyCactus','RockGolem','DesertFlower','PoisonCobra','GoldCobra'} },
    ScrapCanyon = { Id = 20, priorityTbl = {'Model','BOSSHogRider'} },
}
local TotalWorlds = 15
local WorldData = {
    World1 = { Name = 'World 1', Id = 13, OrderId = 1 },
    World2 = { Name = 'World 2', Id = 19, OrderId = 2 },
    World3 = { Name = 'World 3', Id = 20, OrderId = 3 },
    World4 = { Name = 'World 4', Id = 29, OrderId = 4 },
    World5 = { Name = 'World 5', Id = 31, OrderId = 5 },
    World6 = { Name = 'World 6', Id = 36, OrderId = 6 },
    World7 = { Name = 'World 7', Id = 40, OrderId = 7 },
    World8 = { Name = 'World 8', Id = 45, OrderId = 8 },
    World9 = { Name = 'World 9', Id = 49, OrderId = 9 },
    World10 = { Name = 'World 10', Id = 56, OrderId = 10},
    TradingHub = { Name = 'Cliffside Marketplace', Id = 44, OrderId = 11 },
    PvpArena = { Name = 'Pvp Arena', Id = 39, OrderId = 12 },
    Baseplate = { Name = 'Baseplate', Id = 26, OrderId = 13 },
    --ChristmasHub = { Name = 'Holiday Village', Id = 24, OrderId = 14},
    --HalloweenHub = { Name = 'Spooky Courtyard', Id = 33, OrderId = 15},
    DragonTown = { Name = 'Dragon Town', Id = 65, OrderId = 14 },
}
local nextDungeonTbl = {1,3,2,4,6,11,12,13,7,14,15,16,20,19,18,24,35,21,25,36,23,26,37,27,30,31,29,32,33,34,41,42,43,1005,1006,1007,39,38}
local DungeonData = {
    --World 1--
    { Id = 1, Name = "Crabby Crusade", World = 1, Code = '1-1' },
    { Id = 3, Name = "Scarecrow Defense", World = 1, Code = '1-2' },
    { Id = 2, Name = "Dire Problem", World = 1, Code = '1-3' },
    { Id = 4, Name = "Kingslayer", World = 1, Code = '1-4' },
    --{ Id = 5, Name = "Night of the Dead", World = 1 },
    { Id = 6, Name = "Gravetower Dungeon", World = 1, Code = '1-5' },
    
    --World 2--
    { Id = 11, Name = "Temple of Ruin", World = 2, Code = '2-1' },
    { Id = 12, Name = "Mama Trauma", World = 2, Code = '2-2' },
    { Id = 13, Name = "Volcano's Shadow", World = 2, Code = '2-3' },
    { Id = 7, Name = "Volcano Dungeon", World = 2, Code = '2-4', MobCount = 63 },
    
    --World 3--
    { Id = 14, Name = "Mountain Pass", World = 3, Code = '3-1' },
    { Id = 15, Name = "Winter Cavern", World = 3, Code = '3-2' },
    { Id = 16, Name = "Winter Dungeon", World = 3, Code = '3-3' },
    
    --World 4--
    { Id = 20, Name = "Scrap Canyon", World = 4, Code = '4-1', MobCount = 58 },
    { Id = 19, Name = "Deserted Burrowmine", World = 4, Code = '4-2' },
    { Id = 18, Name = "Pyramid Dungeon", World = 4, Code = '4-3' },

    --World 5--
    { Id = 24, Name = "Konoh Heartlands", World = 5, Code = '5-1' },
    { Id = 35, Name = "Konoh Inferno", World = 5, Code = '5-2', MobCount = 44 },
    { Id = 21, Name = "Prison Tower", World = 5, Code = 'Tower 1' }, --:omegalul:

    --World 6--
    { Id = 25, Name = "Rough Waters", World = 6, Code = '6-1' },
    { Id = 36, Name = "Treasure Hunt", World = 6, Code = '6-2' },
    { Id = 23, Name = "Atlantis Tower", World = 6, Code = 'Tower 2' },

    --World 7--
    { Id = 26, Name = "The Underworld", World = 7, Code = '7-1' },
    { Id = 37, Name = "The Labyrinth", World = 7, Code = '7-2' },
    { Id = 27, Name = "Mezuvian Tower", World = 7, Code = 'Tower 3' },

    --World 8--
    { Id = 30, Name = "Rescue in the Ruins", World = 8, Code = '8-1' },
    { Id = 31, Name = "Ruin Rush", World = 8, Code = '8-2' },
    { Id = 29, Name = "Oasis Tower", World = 8, Code = 'Tower 4' },

    --World 9--
    { Id = 32, Name = "Treetop Trouble", World = 9, Code = '9-1' },
    { Id = 33, Name = "Aether Fortress", World = 9, Code = '9-2', MobCount = 39 },
    { Id = 34, Name = "Aether Tower", World = 9, Code = 'Tower 5' },

    --World 10--
    { Id = 41, Name = "Crystal Chaos", World = 10, Code = '10-1' },
    { Id = 42, Name = "Astral Academy", World = 10, Code = '10-2' },
    { Id = 43, Name = "Arcane Tower", World = 10, Code = 'Tower 6' },

    --Special--
    { Id = 22, Name = "Haunted Event", World = "Spooky Courtyard", Special = true, Code = 'Halloween Raid' },
    { Id = 17, Name = "Klaus Factory", World = "Holiday Village", Special = true, Code = 'Christmas Raid' },
    { Id = 38, Name = "Infinite Tower", Special = true, Code = 'Special' },
    { Id = 39, Name = "Celestial Tower", Special = true, Code = 'Special' },
    { Id = 40, Name = "Daily Dungeon", Special = true, Code = 'I dont know' },
    { Id = 44, Name = "Vane's Lair", Special = true, Code = 'Event Raid' },
}
local ClassData = {
    Assassin = {
        DisplayName = 'Shadowblade',
        Range = 10.5,
        Type = 'Melee',
        Primary = 'Longsword',
        Offhand = 'Longsword',
        Skills = {
            { Skill = 'Assassin1', Cooldown = 0.25 },
            { Skill = 'Assassin2', Cooldown = 0.25 },
            { Skill = 'Assassin3', Cooldown = 0.25 },
            { Skill = 'Assassin4', Cooldown = 0.25 },
            { Skill = 'Assassin5', Cooldown = 0.25 },
            { Skill = 'Assassin6', Cooldown = 0.25 },
            { Skill = 'Assassin7', Cooldown = 0.25 },
            { Skill = 'Assassin8', Cooldown = 0.25 },
            { Skill = 'ShadowLeap', Cooldown = 3, Range = 49 },
            { Skill = 'ShadowSlash1', Cooldown = 6, Range = 59 },
            { Skill = 'ShadowSlash2', Cooldown = 6, Range = 59 },
            { Skill = Skillsets:WaitForChild('Assassin'):WaitForChild('EventStealthWalk'), Cooldown = 0.25, Type = 'Remote' },
            { Skill = Skillsets:WaitForChild('Assassin'):WaitForChild('Ultimate'), Cooldown = 1, Type = 'Remote' },
            { Skill = 'RealmOfShadows', Cooldown = 31, Type = 'Ranged', Range = 79 },
            { Skill = 'ShadowMulti1', Cooldown = 31, Type = 'Ranged', Range = 59 },
            { Skill = 'ShadowMulti2', Cooldown = 31, Type = 'Ranged', Range = 59 },
            { Skill = 'ShadowMulti3', Cooldown = 31, Type = 'Ranged', Range = 59 },
            { Skill = 'ShadowMulti4', Cooldown = 31, Type = 'Ranged', Range = 59 },
            { Skill = 'ShadowMulti5', Cooldown = 31, Type = 'Ranged', Range = 59 }
        }
    },

    MageOfLight = {
        DisplayName = 'Mage Of Light',
        Range = 96,
        Type = 'Ranged',
        Primary = 'Staff',
        Skills = {
            { Skill = 'MageOfLight', Cooldown = 0.28 },
            { Skill = 'MageOfLightBlast', Cooldown = 0.33 },
            { Skill = 'MageOfLightCharged', Cooldown = 0.33 },
            { Skill = 'MageOfLightBlastCharged', Cooldown = 0.33 },
            { Skill = Skillsets:WaitForChild('MageOfLight'):WaitForChild('HealCircle'), Cooldown = 14.2, Type = 'Heal' },
            { Skill = Skillsets:WaitForChild('MageOfLight'):WaitForChild('Barrier'), Args = LocalPlayer, Cooldown = 15.2, Type = 'Heal' },
            { Skill = Skillsets:WaitForChild('MageOfLight'):WaitForChild('Ultimate'), Cooldown = 1, Type = 'Heal' }
        }
    },

    Warlord = {
        DisplayName = 'Warlord',
        Range = 19.5,
        Type = 'Melee',
        Primary = 'Greataxe',
        Offhand = 'Shield',
        Skills = {
            { Skill = 'Warlord1', Cooldown = 0.42, Type = 'Ranged', MeleeOnBoss = true, BossRange = 14.5 },
            { Skill = 'Warlord2', Cooldown = 0.42, Type = 'Ranged', MeleeOnBoss = true, BossRange = 14.5 },
            { Skill = 'Warlord3', Cooldown = 0.42, Type = 'Ranged', MeleeOnBoss = true, BossRange = 14.5 },
            { Skill = 'Warlord4', Cooldown = 0.42, Type = 'Ranged', MeleeOnBoss = true, BossRange = 14.5 },
            { Skill = 'ChainsOfWar', Cooldown = 8, Range = 69, Type = 'Ranged' },
            { Skill = 'BlockingWarlord', Cooldown = 2.5, Type = 'Ranged', MeleeOnBoss = true, BossRange = 14.5 },
            { Skill = 'Piledriver1', Cooldown = 5.1, Range = 12, Type = 'Ranged' },
            { Skill = 'Piledriver2', Cooldown = 6.1, Range = 12, Type = 'Ranged' },
            { Skill = 'Piledriver3', Cooldown = 7.1, Range = 12, Type = 'Ranged' },
            { Skill = 'WarlordUltimate1', Cooldown = 31, Range = 59, Type = 'Ranged' },
            { Skill = 'WarlordUltimate2', Cooldown = 31, Range = 59, Type = 'Ranged' },
            { Skill = 'WarlordUltimate3', Cooldown = 31, Range = 59, Type = 'Ranged' },
            { Skill = 'WarlordUltimate4', Cooldown = 31, Range = 59, Type = 'Ranged' },
            { Skill = 'WarlordUltimate5', Cooldown = 31, Range = 59, Type = 'Ranged' }
        }
    },

    Paladin = {
        DisplayName = 'Paladin',
        Range = 14,
        Type = 'Melee',
        Primary = 'Longsword',
        Offhand = 'Shield',
        Skills = {
            { Skill = 'BlockingPaladin', Cooldown = 0.37, Range = 9 },
            { Skill = 'Paladin1', Cooldown = 0.52 },
            { Skill = 'Paladin2', Cooldown = 0.52 },
            { Skill = 'Paladin3', Cooldown = 0.52 },
            { Skill = 'Paladin4', Cooldown = 0.52 },
            { Skill = 'LightPaladin1', Cooldown = 0.52, Range = 19 },
            { Skill = 'LightPaladin2', Cooldown = 0.52, Range = 19 },
            { Skill = 'LightPaladin3', Cooldown = 0.52, Range = 19 },
            { Skill = 'LightPaladin4', Cooldown = 0.52, Range = 19 },
            { Skill = 'LightThrust1', Cooldown = 9, Range = 19 },
            { Skill = 'LightThrust2', Cooldown = 9, Range = 19 },
            { Skill = Skillsets:WaitForChild('Paladin'):WaitForChild('GuildedLight'), Cooldown = 15.2, Type = 'Heal' }
        }
    },

    Berserker = {
        DisplayName = 'Berserker',
        Range = 19.5,
        Type = 'Melee',
        Primary = 'Greataxe',
        Offhand = 'Greataxe',
        Skills = {
            { Skill = 'Berserker1', Cooldown = 0.51, Type = 'Ranged' },
            { Skill = 'Berserker2', Cooldown = 0.51, Type = 'Ranged' },
            { Skill = 'Berserker3', Cooldown = 0.51, Type = 'Ranged' },
            { Skill = 'Berserker4', Cooldown = 0.51, Type = 'Ranged' },
            { Skill = 'Berserker5', Cooldown = 0.51, Type = 'Ranged' },
            { Skill = 'Berserker6', Cooldown = 0.51, Type = 'Ranged' },
            { Skill = 'AggroSlam', Cooldown = 5.2, Range = 39, Type = 'Ranged' },
            { Skill = 'GigaSpin1', Cooldown = 7.2, Range = 16 },
            { Skill = 'GigaSpin2', Cooldown = 7.2, Range = 16 },
            { Skill = 'GigaSpin3', Cooldown = 7.2, Range = 16 },
            { Skill = 'GigaSpin4', Cooldown = 7.2, Range = 16 },
            { Skill = 'GigaSpin5', Cooldown = 7.2, Range = 16 },
            { Skill = 'GigaSpin6', Cooldown = 7.2, Range = 16 },
            { Skill = 'GigaSpin7', Cooldown = 7.2, Range = 16 },
            { Skill = 'GigaSpin8', Cooldown = 7.2, Range = 16 },
            { Skill = 'Fissure1', Cooldown = 10.2, Range = 9 },
            { Skill = 'Fissure2', Cooldown = 10.2, Range = 9 },
            { Skill = 'FissureErupt1', Cooldown = 10.2, Range = 9 },
            { Skill = 'FissureErupt2', Cooldown = 10.2, Range = 9 },
            { Skill = 'FissureErupt3', Cooldown = 10.2, Range = 9 },
            { Skill = 'FissureErupt4', Cooldown = 10.2, Range = 9 },
            { Skill = 'FissureErupt5', Cooldown = 10.2, Range = 9 },
            { Skill = 'FissureErupt6', Cooldown = 10.2, Range = 9 },
            { Skill = 'FissureErupt7', Cooldown = 10.2, Range = 9 },
            { Skill = 'FissureErupt8', Cooldown = 10.2, Range = 9 },
            { Skill = Skillsets:WaitForChild('Berserker'):WaitForChild('Ultimate'), Cooldown = 1, Type = 'Remote' },
        },
    },

    Guardian = {
        DisplayName = 'Guardian',
        Range = 14.5,
        Type = 'Melee',
        Primary = 'Greatsword',
        Skills = {
            { Skill = 'Guardian1', Cooldown = 0.6 },
            { Skill = 'Guardian2', Cooldown = 0.6 },
            { Skill = 'Guardian3', Cooldown = 0.6 },
            { Skill = 'Guardian4', Cooldown = 0.6 },
            { Skill = 'RockSpikes1', Cooldown = 6.1, Range = 29, Type = 'Ranged' },
            { Skill = 'RockSpikes2', Cooldown = 6.1, Range = 31, Type = 'Ranged' },
            { Skill = 'RockSpikes3', Cooldown = 6.1, Range = 34, Type = 'Ranged' },
            { Skill = 'SlashFury1', Cooldown = 7.1, Range = 44, Type = 'Ranged' },
            { Skill = 'SlashFury2', Cooldown = 7.1, Range = 44, Type = 'Ranged' },
            { Skill = 'SlashFury3', Cooldown = 7.1, Range = 44, Type = 'Ranged' },
            { Skill = 'SlashFury4', Cooldown = 7.1, Range = 44, Type = 'Ranged' },
            { Skill = 'SlashFury5', Cooldown = 7.1, Range = 44, Type = 'Ranged' },
            { Skill = 'SlashFury6', Cooldown = 7.1, Range = 44, Type = 'Ranged' },
            { Skill = 'SlashFury7', Cooldown = 7.1, Range = 44, Type = 'Ranged' },
            { Skill = 'SlashFury8', Cooldown = 7.1, Range = 44, Type = 'Ranged' },
            { Skill = Skillsets:WaitForChild('Guardian'):WaitForChild('AggroDraw'), Cooldown = 14.5, Type = 'Remote' },
            { Skill = 'SwordPrison1', Cooldown = 30.2, Range = 120, Type = 'Ranged' },
            { Skill = 'SwordPrison2', Cooldown = 30.2, Range = 120, Type = 'Ranged' },
            { Skill = 'SwordPrison3', Cooldown = 30.2, Range = 120, Type = 'Ranged' },
            { Skill = 'SwordPrison4', Cooldown = 30.2, Range = 120, Type = 'Ranged' },
            { Skill = 'SwordPrison5', Cooldown = 30.2, Range = 120, Type = 'Ranged' },
            { Skill = 'SwordPrison6', Cooldown = 30.2, Range = 120, Type = 'Ranged' },
            { Skill = 'SwordPrison7', Cooldown = 30.2, Range = 120, Type = 'Ranged' },
            { Skill = 'SwordPrison8', Cooldown = 30.2, Range = 120, Type = 'Ranged' },
            { Skill = 'SwordPrison9', Cooldown = 30.2, Range = 120, Type = 'Ranged' },
            { Skill = 'SwordPrison10', Cooldown = 30.2, Range = 120, Type = 'Ranged' },
            { Skill = 'SwordPrison11', Cooldown = 30.2, Range = 120, Type = 'Ranged' },
            { Skill = 'SwordPrison12', Cooldown = 30.2, Range = 120, Type = 'Ranged' }
        }
    },

    Demon = {
        DisplayName = 'Demon',
        Range = 10,
        Type = 'Melee',
        Primary = 'Scythe',
        Skills = {
            { Skill = 'Demon1', Cooldown = 0.85 },
            { Skill = 'Demon2', Cooldown = 0.85 },
            { Skill = 'Demon3', Cooldown = 0.85 },
            { Skill = 'Demon4', Cooldown = 1.2 },
            { Skill = 'Demon5', Cooldown = 1.2 },
            { Skill = 'Demon6', Cooldown = 1.2 },
            { Skill = 'Demon7', Cooldown = 1.5 },
            { Skill = 'Demon8', Cooldown = 1.5 },
            { Skill = 'Demon9', Cooldown = 1.5 },
            { Skill = 'Demon10', Cooldown = 1.85 },
            { Skill = 'Demon11', Cooldown = 1.85 },
            { Skill = 'Demon12', Cooldown = 1.85 },
            { Skill = 'Demon13', Cooldown = 2.15 },
            { Skill = 'Demon14', Cooldown = 2.15 },
            { Skill = 'Demon15', Cooldown = 2.15 },
            { Skill = 'Demon16', Cooldown = 2.55 },
            { Skill = 'Demon17', Cooldown = 2.55 },
            { Skill = 'Demon18', Cooldown = 2.55 },
            { Skill = 'Demon19', Cooldown = 2.85 },
            { Skill = 'Demon20', Cooldown = 2.85 },
            { Skill = 'Demon21', Cooldown = 2.85 },
            { Skill = 'Demon22', Cooldown = 3.2 },
            { Skill = 'Demon23', Cooldown = 3.2 }, 
            { Skill = 'Demon24', Cooldown = 3.2 }, 
            { Skill = 'Demon25', Cooldown = 3.5 }, 
            { Skill = 'Demon26', Cooldown = 3.5 }, 
            { Skill = 'Demon27', Cooldown = 3.5 }, 
            { Skill = 'DemonDPS1', Cooldown = 0.85, Range = 12 },
            { Skill = 'DemonDPS2', Cooldown = 1.2, Range = 12 },
            { Skill = 'DemonDPS3', Cooldown = 1.5, Range = 12 },
            { Skill = 'DemonDPS4', Cooldown = 1.85, Range = 12 },
            { Skill = 'DemonDPS5', Cooldown = 2.15, Range = 12 },
            { Skill = 'DemonDPS6', Cooldown = 2.55, Range = 12 },
            { Skill = 'DemonDPS7', Cooldown = 2.9, Range = 12 },
            { Skill = 'DemonDPS8', Cooldown = 3.3, Range = 12 },
            { Skill = 'DemonDPS9', Cooldown = 3.6, Range = 12 },
            { Skill = 'ScytheThrowDPS1', Cooldown = 5.5, Type = 'Ranged', Range = 71 },
            { Skill = 'ScytheThrowDPS2', Cooldown = 5.5, Type = 'Ranged', Range = 71 },
            { Skill = 'ScytheThrowDPS3', Cooldown = 5.5, Type = 'Ranged', Range = 71 },
            { Skill = 'ScytheThrow1', Cooldown = 5.5, Type = 'Ranged', Range = 88 },
            { Skill = 'ScytheThrow2', Cooldown = 5.5, Type = 'Ranged', Range = 88 },
            { Skill = 'ScytheThrow3', Cooldown = 5.5, Type = 'Ranged', Range = 88 },
            { Skill = 'ScytheThrow4', Cooldown = 5.5, Type = 'Ranged', Range = 88 },
            { Skill = 'ScytheThrow5', Cooldown = 5.5, Type = 'Ranged', Range = 88 },
            { Skill = 'ScytheThrow6', Cooldown = 5.5, Type = 'Ranged', Range = 88 },
            { Skill = 'ScytheThrow7', Cooldown = 5.5, Type = 'Ranged', Range = 88 },
            { Skill = 'ScytheThrow8', Cooldown = 5.5, Type = 'Ranged', Range = 88 },
            { Skill = 'DemonLifeStealDPS', Cooldown = 8.2, Type = 'Ranged', Range = 56 },
            --{ Skill = Skillsets:WaitForChild('Demon'):WaitForChild('BloodBinding'), Cooldown = 7.2, Type = 'Remote' },
            { Skill = Skillsets:WaitForChild('Demon'):WaitForChild('Ultimate'), Cooldown = 1, Type = 'Remote' },
            { Skill = 'DemonSoulDPS1', Cooldown = 31, Type = 'Ranged', Range = 26 },
            { Skill = 'DemonSoulDPS2', Cooldown = 31, Type = 'Ranged', Range = 26 },
            { Skill = 'DemonSoulDPS3', Cooldown = 31, Type = 'Ranged', Range = 26 }
        }
    },

    Swordmaster = {
        DisplayName = 'Swordmaster',
        Range = 12,
        Type = 'Melee',
        Primary = 'Longsword',
        Skills = {
            { Skill = 'Swordmaster1', Cooldown = 0.34 },
            { Skill = 'Swordmaster2', Cooldown = 0.34 },
            { Skill = 'Swordmaster3', Cooldown = 0.34 },
            { Skill = 'Swordmaster4', Cooldown = 0.34 },
            { Skill = 'Swordmaster5', Cooldown = 0.34 },
            { Skill = 'Swordmaster6', Cooldown = 0.34 },
            { Skill = 'CrescentStrike1', Cooldown = 5.2 },
            { Skill = 'CrescentStrike2', Cooldown = 5.2 },
            { Skill = 'CrescentStrike3', Cooldown = 5.2 },
            { Skill = 'CrescentStrike4', Cooldown = 5.2 },
            { Skill = 'CrescentStrike5', Cooldown = 5.2 },
            { Skill = 'Leap', Cooldown = 8.2, Range = 14 }
        }
    },

    Mage = {
        DisplayName = 'Arcane Mage',
        Range = 62,
        Type = 'Ranged',
        Primary = 'Staff',
        Skills = {
            { Skill = 'Mage1', Cooldown = 0.33 },
            { Skill = 'Mage2', Cooldown = 0.33 },
            { Skill = 'Mage3', Cooldown = 0.33 },
            { Skill = 'ArcaneBlast', Cooldown = 5.2, Range = 42 },
            { Skill = 'ArcaneBlastAOE', Cooldown = 5.2, Range = 42 },
            { Skill = 'ArcaneWave1', Cooldown = 8.2, Range = 36 },
            { Skill = 'ArcaneWave2', Cooldown = 8.2, Range = 36 },
            { Skill = 'ArcaneWave3', Cooldown = 8.2, Range = 36 },
            { Skill = 'ArcaneWave4', Cooldown = 8.2, Range = 36 },
            { Skill = 'ArcaneWave5', Cooldown = 8.2, Range = 36 },
            { Skill = 'ArcaneWave6', Cooldown = 8.2, Range = 36 },
            { Skill = 'ArcaneWave7', Cooldown = 8.2, Range = 36 },
            { Skill = 'ArcaneWave8', Cooldown = 8.2, Range = 36 },
            { Skill = 'ArcaneWave9', Cooldown = 8.2, Range = 36 },
            { Skill = 'ArcaneWave10', Cooldown = 8.2, Range = 36 },
            { Skill = 'ArcaneWave11', Cooldown = 8.2, Range = 36 },
            { Skill = 'ArcaneWave12', Cooldown = 8.2, Range = 36 }
        }
    },

    Defender = {
        DisplayName = 'Defender',
        Range = 12,
        Type = 'Melee',
        Primary = 'Greataxe',
        Skills = {
            { Skill = 'Defender1', Cooldown = 0.66 },
            { Skill = 'Defender2', Cooldown = 0.66 },
            { Skill = 'Defender3', Cooldown = 0.66 },
            { Skill = 'Defender4', Cooldown = 0.66 },
            { Skill = 'Defender5', Cooldown = 0.66 },
            { Skill = 'Groundbreaker', Cooldown = 5.1, Range = 9 },
            { Skill = 'Spin1', Cooldown = 8.1, Range = 10 },
            { Skill = 'Spin2', Cooldown = 8.1, Range = 10 },
            { Skill = 'Spin3', Cooldown = 8.1, Range = 10 },
            { Skill = 'Spin4', Cooldown = 8.1, Range = 10 }
        }
    },

    DualWielder = {
        DisplayName = 'Dual Wielder',
        Range = 12,
        Type = 'Melee',
        Primary = 'Longsword',
        Offhand = 'Longsword',
        Skills = {
            { Skill = 'DualWield1', Cooldown = 0.55 },
            { Skill = 'DualWield2', Cooldown = 0.55 },
            { Skill = 'DualWield3', Cooldown = 0.55 },
            { Skill = 'DualWield4', Cooldown = 0.55 },
            { Skill = 'DualWield5', Cooldown = 0.75 },
            { Skill = 'DualWield6', Cooldown = 0.75 },
            { Skill = 'DualWield7', Cooldown = 0.75 },
            { Skill = 'DualWield8', Cooldown = 0.75 },
            { Skill = 'DualWield9', Cooldown = 0.75 },
            { Skill = 'DualWield10', Cooldown = 0.75 },
            { Skill = Skillsets:WaitForChild('DualWielder'):WaitForChild('AttackBuff'), Cooldown = 12.2, Type = 'Remote' },
            { Skill = 'DashStrike', Cooldown = 6.2 },
            { Skill = 'CrossSlash1', Cooldown = 8.2, Type = 'Ranged', Range = 47 },
            { Skill = 'CrossSlash2', Cooldown = 8.2, Type = 'Ranged', Range = 47 },
            { Skill = 'CrossSlash3', Cooldown = 8.2, Type = 'Ranged', Range = 47 },
            { Skill = 'CrossSlash4', Cooldown = 8.2, Type = 'Ranged', Range = 47 },
            { Skill = 'CrossSlash5', Cooldown = 8.2, Type = 'Ranged', Range = 47 },
            { Skill = 'CrossSlash6', Cooldown = 8.2, Type = 'Ranged', Range = 47 },
            { Skill = 'CrossSlash7', Cooldown = 8-2, Type = 'Ranged', Range = 47 },
            { Skill = 'CrossSlash8', Cooldown = 8.2, Type = 'Ranged', Range = 47 },
            { Skill = 'CrossSlash9', Cooldown = 8.2, Type = 'Ranged', Range = 47 },
            { Skill = 'CrossSlash10', Cooldown = 8.2, Type = 'Ranged', Range = 47 },
            { Skill = Skillsets:WaitForChild('DualWielder'):WaitForChild('Ultimate'), Cooldown = 31, Type = 'Remote' },
            { Skill = 'DualWieldUltimateHit1', Cooldown = 31 },
            { Skill = 'DualWieldUltimateHit2', Cooldown = 31 },
            { Skill = 'DualWieldUltimateHit3', Cooldown = 31 },
            { Skill = 'DualWieldUltimateHit4', Cooldown = 31 },
            { Skill = 'DualWieldUltimateHit5', Cooldown = 31 },
            { Skill = 'DualWieldUltimateHit6', Cooldown = 31 },
            { Skill = 'DualWieldUltimateHit7', Cooldown = 31 },
            { Skill = 'DualWieldUltimateHit8', Cooldown = 31 },
            { Skill = 'DualWieldUltimateSlam', Cooldown = 31, Type = 'Ranged', Range = 17 },
            { Skill = 'DualWieldUltimateSlam1', Cooldown = 31, Type = 'Ranged', Range = 17 },
            { Skill = 'DualWieldUltimateSlam2', Cooldown = 31, Type = 'Ranged', Range = 17 },
            { Skill = 'DualWieldUltimateSlam3', Cooldown = 31, Type = 'Ranged', Range = 17 },
            { Skill = 'DualWieldUltimateSword1', Cooldown = 31, Type = 'Ranged', Range = 17 },
            { Skill = 'DualWieldUltimateSword2', Cooldown = 31, Type = 'Ranged', Range = 17 },
            { Skill = 'DualWieldUltimateSword3', Cooldown = 31, Type = 'Ranged', Range = 17 },
            { Skill = 'DualWieldUltimateSword4', Cooldown = 31, Type = 'Ranged', Range = 17 },
            { Skill = 'DualWieldUltimateSword5', Cooldown = 31, Type = 'Ranged', Range = 17 },
            { Skill = 'DualWieldUltimateSword6', Cooldown = 31, Type = 'Ranged', Range = 17 },
            { Skill = 'DualWieldUltimateSword7', Cooldown = 31, Type = 'Ranged', Range = 17 },
            { Skill = 'DualWieldUltimateSword8', Cooldown = 31, Type = 'Ranged', Range = 17 },
            { Skill = 'DualWieldUltimateSword9', Cooldown = 31, Type = 'Ranged', Range = 17 },
            { Skill = 'DualWieldUltimateSword10', Cooldown = 31, Type = 'Ranged', Range = 17 },
            { Skill = 'DualWieldUltimateSword11', Cooldown = 31, Type = 'Ranged', Range = 17 },
            { Skill = 'DualWieldUltimateSword12', Cooldown = 31, Type = 'Ranged', Range = 17 },
            { Skill = 'DualWieldUltimateSword13', Cooldown = 31, Type = 'Ranged', Range = 17 },
            { Skill = 'DualWieldUltimateSword14', Cooldown = 31, Type = 'Ranged', Range = 17 },
            { Skill = 'DualWieldUltimateSword15', Cooldown = 31, Type = 'Ranged', Range = 17 },
            { Skill = 'DualWieldUltimateSword16', Cooldown = 31, Type = 'Ranged', Range = 17 }
        }
    },

    IcefireMage = {
        DisplayName = 'Elementalist',
        Range = 93,
        Type = 'Ranged',
        Primary = 'Staff',
        Skills = {
            { Skill = 'IcefireMage1', Cooldown = 0.33 },
            { Skill = 'IcefireMage2', Cooldown = 0.33 },
            { Skill = 'IcefireMage3', Cooldown = 0.33 },
            { Skill = 'IcySpikes1', Cooldown = 6.2, Range = 36 },
            { Skill = 'IcySpikes2', Cooldown = 6.2, Range = 36 },
            { Skill = 'IcySpikes3', Cooldown = 6.2, Range = 36 },
            { Skill = 'IcySpikes4', Cooldown = 6.2, Range = 36 },
            { Skill = 'IcySpikes5', Cooldown = 6.2, Range = 36 },
            { Skill = 'IcefireMageFireball', Cooldown = 10.2 },
            { Skill = 'IcefireMageFireballBlast', Cooldown = 10.2 },
            { Skill = 'LightningStrike1', Cooldown = 15.2, Range = 46 },
            { Skill = 'LightningStrike2', Cooldown = 15.2, Range = 46 },
            { Skill = 'LightningStrike3', Cooldown = 15.2, Range = 46 },
            { Skill = 'LightningStrike4', Cooldown = 15.2, Range = 46 },
            { Skill = 'LightningStrike5', Cooldown = 15.2, Range = 46 },
            --{ Skill = Skillsets:WaitForChild('IcefireMage'):WaitForChild('Ultimate'), Cooldown = 30, Type = 'Remote' },
            { Skill = 'IcefireMageUltimateFrost', Cooldown = 31, Range = 56 },
            { Skill = 'IcefireMageUltimateMeteor1', Cooldown = 31, Range = 56 },
            { Skill = 'IcefireMageUltimateMeteor2', Cooldown = 31, Range = 56 },
            { Skill = 'IcefireMageUltimateMeteor3', Cooldown = 31, Range = 56 },
            { Skill = 'IcefireMageUltimateMeteor4', Cooldown = 31, Range = 56 },
            { Skill = 'IcefireMageUltimateMeteor5', Cooldown = 31, Range = 56 },
            { Skill = 'IcefireMageUltimateMeteor6', Cooldown = 31, Range = 56 },
            { Skill = 'IcefireMageUltimateMeteor7', Cooldown = 31, Range = 56 },
            { Skill = 'IcefireMageUltimateMeteor8', Cooldown = 31, Range = 56 },
            { Skill = 'IcefireMageUltimateMeteor9', Cooldown = 31, Range = 56 },
            { Skill = 'IcefireMageUltimateMeteor10', Cooldown = 31, Range = 56 }
        }
    },

    Dragoon = {
        DisplayName = 'Dragoon',
        Range = 12,
        Type = 'Ranged',
        Primary = 'Spear',
        Skills = {
            { Skill = 'Dragoon1', Cooldown = 0.45, Type = 'Melee' },
            { Skill = 'Dragoon2', Cooldown = 0.45, Type = 'Melee' },
            { Skill = 'Dragoon3', Cooldown = 0.45, Type = 'Melee' },
            { Skill = 'Dragoon4', Cooldown = 0.45, Type = 'Melee' },
            { Skill = 'Dragoon5', Cooldown = 0.45, Type = 'Melee' },
            { Skill = 'Dragoon6', Cooldown = 0.45, Type = 'Melee' },
            { Skill = 'DragoonDash', Cooldown = 6.2, Range = 17 },
            { Skill = 'DragoonCross1', Cooldown = 6.2, Range = 17 },
            { Skill = 'DragoonCross2', Cooldown = 6.2, Range = 17 },
            { Skill = 'DragoonCross3', Cooldown = 6.2, Range = 17 },
            { Skill = 'DragoonCross4', Cooldown = 6.2, Range = 17 },
            { Skill = 'DragoonCross5', Cooldown = 6.2, Range = 17 },
            { Skill = 'DragoonCross6', Cooldown = 6.2, Range = 17 },
            { Skill = 'DragoonCross7', Cooldown = 6.2, Range = 17 },
            { Skill = 'DragoonCross8', Cooldown = 6.2, Range = 17 },
            { Skill = 'DragoonCross9', Cooldown = 6.2, Range = 17 },
            { Skill = 'DragoonCross10', Cooldown = 6.2, Range = 17 },
            { Skill = 'MultiStrike1', Cooldown = 6.2, Type = 'Melee', Range = 18 },
            { Skill = 'MultiStrike2', Cooldown = 6.2, Type = 'Melee', Range = 18 },
            { Skill = 'MultiStrike3', Cooldown = 6.2, Type = 'Melee', Range = 18 },
            { Skill = 'MultiStrike4', Cooldown = 6.2, Type = 'Melee', Range = 18 },
            { Skill = 'MultiStrike5', Cooldown = 6.2, Type = 'Melee', Range = 18 },
            { Skill = 'MultiStrikeDragon1', Cooldown = 6.2, Range = 57 },
            { Skill = 'MultiStrikeDragon2', Cooldown = 6.2, Range = 57 },
            { Skill = 'MultiStrikeDragon3', Cooldown = 6.2, Range = 57 },
            { Skill = 'DragoonFall', Cooldown = 8.2, Range = 5 },
            { Skill = Skillsets:WaitForChild('Dragoon'):WaitForChild('Ultimate'), Cooldown = 1, Type = 'Remote' },
            { Skill = 'DragoonUltimate', Cooldown = 31, Range = 46 },
            { Skill = 'UltimateDragon1', Cooldown = 31, Range = 94 },
            { Skill = 'UltimateDragon2', Cooldown = 31, Range = 94  },
            { Skill = 'UltimateDragon3', Cooldown = 31, Range = 94  },
            { Skill = 'UltimateDragon4', Cooldown = 31, Range = 94  },
            { Skill = 'UltimateDragon5', Cooldown = 31, Range = 94  },
            { Skill = 'UltimateDragon6', Cooldown = 31, Range = 94  },
            { Skill = 'UltimateDragon7', Cooldown = 31, Range = 94  },
            { Skill = 'UltimateDragon8', Cooldown = 31, Range = 94  },
            { Skill = 'UltimateDragon9', Cooldown = 31, Range = 94  },
            { Skill = 'UltimateDragon10', Cooldown = 31, Range = 94  },
            { Skill = 'UltimateDragon11', Cooldown = 31, Range = 94  },
            { Skill = 'UltimateDragon12', Cooldown = 31, Range = 94  },
            { Skill = 'UltimateDragon13', Cooldown = 31, Range = 94  },
            { Skill = 'UltimateDragon14', Cooldown = 31, Range = 94  },
            { Skill = 'UltimateDragon15', Cooldown = 31, Range = 94  },
            { Skill = 'UltimateDragon16', Cooldown = 31, Range = 94  },
            { Skill = 'UltimateDragon17', Cooldown = 31, Range = 94  },
            { Skill = 'UltimateDragon18', Cooldown = 31, Range = 94  },
        }
    },

    Archer = {
        DisplayName = 'Archer',
        Range = 79,
        Type = 'Ranged',
        Primary = 'Bow',
        Skills = {
            { Skill = 'Archer', Cooldown = 0.47 },
            { Skill = 'PiercingArrow1', Cooldown = 5.2, Range = 99 },
            { Skill = 'PiercingArrow2', Cooldown = 5.2, Range = 99 },
            { Skill = 'PiercingArrow3', Cooldown = 5.2, Range = 99 },
            { Skill = 'PiercingArrow4', Cooldown = 5.2, Range = 99 },
            { Skill = 'PiercingArrow5', Cooldown = 5.2, Range = 99 },
            { Skill = 'PiercingArrow6', Cooldown = 5.2, Range = 99 },
            { Skill = 'PiercingArrow7', Cooldown = 5.2, Range = 99 },
            { Skill = 'PiercingArrow8', Cooldown = 5.2, Range = 99 },
            { Skill = 'PiercingArrow9', Cooldown = 5.2, Range = 99 },
            { Skill = 'SpiritBomb', Cooldown = 10.2, Range = 208 },
            { Skill = 'MortarStrike1', Cooldown = 12.2, Range = 59 },
            { Skill = 'MortarStrike2', Cooldown = 12.2, Range = 76 },
            { Skill = 'MortarStrike3', Cooldown = 12.2, Range = 93 },
            { Skill = 'MortarStrike4', Cooldown = 12.2, Range = 110 },
            { Skill = 'MortarStrike5', Cooldown = 12.2, Range = 127 },
            { Skill = 'MortarStrike6', Cooldown = 12.2, Range = 144  },
            { Skill = 'MortarStrike7', Cooldown = 12.2, Range = 161 },
            { Skill = 'MortarStrike8', Cooldown = 12.2, Range = 179 },
            { Skill = 'HeavenlySword1', Cooldown = 31, Range = 143 },
            { Skill = 'HeavenlySword2', Cooldown = 31, Range = 99 },
            { Skill = 'HeavenlySword3', Cooldown = 31, Range = 99 },
            { Skill = 'HeavenlySword4', Cooldown = 31, Range = 99 },
            { Skill = 'HeavenlySword5', Cooldown = 31, Range = 99 },
            { Skill = 'HeavenlySword6', Cooldown = 31, Range = 99 },
        }
    },

    Summoner = {
        DisplayName = 'Summoner',
        Range = 82,
        Type = 'Ranged',
        Primary = 'Staff',
        Skills = {
            { Skill = 'Summoner1', Cooldown = 0.55 },
            { Skill = 'Summoner2', Cooldown = 0.75 },
            { Skill = 'Summoner3', Cooldown = 1.05 },
            { Skill = 'Summoner4', Cooldown = 1.3 },
            { Skill = 'SoulHarvest1', Cooldown = 1.1, Type = 'Melee', Range = 16 },
            { Skill = 'SoulHarvest2', Cooldown = 1.1, Type = 'Melee', Range = 21 },
            { Skill = 'SoulHarvest3', Cooldown = 1.1, Type = 'Melee', Range = 21 },
            { Skill = 'SoulHarvest4', Cooldown = 1.1, Type = 'Melee', Range = 21 },
            { Skill = 'SoulHarvest5', Cooldown = 1.1, Type = 'Melee', Range = 21 },
            { Skill = Skillsets:WaitForChild('Summoner'):WaitForChild('SoulHarvest'), Cooldown = 10.2, Type = 'Remote', Args = "MobPosition", Range = 39 },
            { Skill = Skillsets:WaitForChild('Summoner'):WaitForChild('Summon'), Cooldown = 0.5, Type = 'Remote' },
            --{ Skill = Skillsets:WaitForChild('Summoner'):WaitForChild('ExplodeSummons'), Cooldown = 0, Type = 'Remote' },
            { Skill = Skillsets:WaitForChild('Summoner'):WaitForChild('Ultimate'), Cooldown = 1, Type = 'Remote' },
        }
    },

    Necromancer = {
        DisplayName = 'Necromancer',
        Range = 14,
        Type = 'Melee',
        Primary = 'Scythe',
        Skills = {
            { Skill = 'NecroDPS1', Cooldown = 0.8 },
            { Skill = 'NecroDPS2', Cooldown = 1.2 },
            { Skill = 'NecroDPS3', Cooldown = 1.5 },
            { Skill = 'NecroDPS4', Cooldown = 1.9 },
            { Skill = 'NecroDPS5', Cooldown = 2.2 },
            { Skill = 'NecroDPS6', Cooldown = 2.5 },
            { Skill = 'NecroDPS7', Cooldown = 2.8 },
            { Skill = 'NecroDPS8', Cooldown = 3.2 },
            { Skill = 'NecroDPS9', Cooldown = 3.5 },
            { Skill = 'SpiritExplosion0', Cooldown = 2.25, Range = 17, Type = 'Self' },
            { Skill = 'SpiritExplosion1', Cooldown = 2.25, Range = 17, Type = 'Self' },
            { Skill = 'SpiritExplosion2', Cooldown = 3, Range = 18, Type = 'Self' },
            { Skill = 'SpiritExplosion3', Cooldown = 3.25, Range = 21, Type = 'Self' },
            { Skill = 'SpiritExplosion4', Cooldown = 4, Range = 24, Type = 'Self' },
            { Skill = 'TombstoneRise1', Cooldown = 4.2, Range = 18 },
            { Skill = 'TombstoneRise2', Cooldown = 4.2, Range = 18 },
            { Skill = 'TombstoneRise3', Cooldown = 4.2, Range = 18 },
            { Skill = 'TombstoneRise4', Cooldown = 4.2, Range = 18 },
            { Skill = 'TombstoneRise5', Cooldown = 4.2, Range = 18 },
            { Skill = 'SpiritCavern1', Cooldown = 10.2, Range = 140, Type = 'Ranged' },
            { Skill = 'SpiritCavern2', Cooldown = 10.2, Range = 140, Type = 'Ranged' },
            { Skill = 'SpiritCavern3', Cooldown = 10.2, Range = 140, Type = 'Ranged' },
            { Skill = 'SpiritCavern4', Cooldown = 10.2, Range = 140, Type = 'Ranged' },
            { Skill = 'SpiritCavern5', Cooldown = 10.2, Range = 140, Type = 'Ranged' },
            { Skill = 'SpiritCavern6', Cooldown = 10.2, Range = 140, Type = 'Ranged' },
            { Skill = 'UltScytheDrop', Cooldown = 27, Range = 98, Type = 'Ranged' },
            { Skill = Skillsets:WaitForChild('Necromancer'):WaitForChild('Ultimate'), Cooldown = 31, Type = 'Remote' },
        }
    },

    MageOfShadows = {
        DisplayName = 'Mage Of Shadows',
        Range = 99,
        Type = 'Ranged',
        Primary = 'Staff',
        Skills = {
            { Skill = 'MageOfShadows', Cooldown = 0.275 },
            { Skill = 'MageOfShadowsBlast', Cooldown = 0.3 },
            { Skill = 'MageOfShadowsCharged', Cooldown = 0.31 },
            { Skill = 'MageOfShadowsBlastCharged', Cooldown = 0.31 },
            { Skill = 'BighShadowOrb1', Cooldown = 0.33 },
            { Skill = 'BighShadowOrb2', Cooldown = 0.33 },
            { Skill = 'BighShadowOrb3', Cooldown = 0.33 },
            { Skill = 'MageOfShadowsDamageCircle', Cooldown = 0.33 },
            { Skill = Skillsets:WaitForChild('MageOfShadows'):WaitForChild('ShadowChains'), Cooldown = 6, Type = 'Remote', Args = 'mobTbl' },
            { Skill = Skillsets:WaitForChild('MageOfShadows'):WaitForChild('Ultimate'), Cooldown = 2, Type = 'Remote' },
        }
    },
}   


local Folder = Instance.new('Folder')
Folder.Name = 'SummonFolder'
Folder.Parent = Workspace

local mageOfShadowBodies = Instance.new('Folder')
mageOfShadowBodies.Name = 'Mageofshadowgood'
mageOfShadowBodies.Parent = Workspace



local repo = 'https://raw.githubusercontent.com/infinitekill/General/main/'
local Library
local ThemeManager
local SaveManager
if not noCacheLoading then
    local function loadFromCacheOrGithub(url, filename)
        local success, content = pcall(function()
            return readfile(filename)
        end)
        
        if success and not UpdateLib then
            print('Loaded ' .. filename .. ' from cache')
            return loadstring(content)()
        else
            print('Loaded ' .. filename .. ' from GitHub')
            content = game:HttpGet(url)
            writefile(filename, content)
            return loadstring(content)()
        end
    end

    Library = loadFromCacheOrGithub(repo .. 'Linoria', 'BluuLinoria.lua')
    ThemeManager = loadFromCacheOrGithub(repo .. 'LinoriaThemeManager', 'BluuLinoriaThemeManager.lua')
    SaveManager = loadFromCacheOrGithub(repo .. 'LinoriaSaveManager', 'BluuLinoriaSaveManager.lua')
else
    Library = loadstring(game:HttpGet(repo .. 'Linoria'))()
    ThemeManager = loadstring(game:HttpGet(repo .. 'LinoriaThemeManager'))()
    SaveManager = loadstring(game:HttpGet(repo .. 'LinoriaSaveManager'))()
end
LibraryLoaded = true
local Window = Library:CreateWindow({
    Title = 'Infinite | World Zero',
    Center = false,
    AutoShow = true,
    TabPadding = 8,
    MenuFadeTime = 0
})

local Tabs = {
    Main = Window:AddTab('Main'),
    Teleports = Window:AddTab('Teleports'),
    ['Settings'] = Window:AddTab('Settings'),
    Outfits = Window:AddTab('Outfits'),
}

local mainFarming = Tabs.Main:AddLeftTabbox('farmmm')
local Farming = mainFarming:AddTab('Farming')
local FarmingSettings = mainFarming:AddTab('Settings')
local AutoSell = mainFarming:AddTab('Selling')
local Weapons = mainFarming:AddTab('Weapons')
local rightTabbox = Tabs.Main:AddRightTabbox('box')
local Miscellaneous = rightTabbox:AddTab('Miscellaneous')
local Gui = rightTabbox:AddTab('Gui')
local StatsTabbox = Tabs.Main:AddRightTabbox('temp')
local StatsTab = StatsTabbox:AddTab('Stats')
local Worlds = Tabs.Teleports:AddLeftGroupbox('Worlds')
local TowerTeleports = Tabs.Teleports:AddRightGroupbox('Towers')
local NightmareDungeons = Tabs.Teleports:AddRightGroupbox('Nightmare Dungeons')
local OutfitList = Tabs.Outfits:AddLeftGroupbox('Outfits')

-- Farming
do
    Farming:AddToggle('Killaura', {
        Text = 'Killaura',
        Default = false, -- Default value (true / false)
    })
    Farming:AddSlider('KillauraDelay', {
        Text = 'Delay',
        Default = 0,
        Min = 0,
        Max = 1,
        Rounding = 2,
        HideMax = true,
        Compact = true,
    })

    --[[Farming:AddSlider('LifeStealInterval', {
        Text = 'Life Steal Repeats',
        Default = 1,
        Min = 1,
        Max = 10,
        Rounding = 0,
        HideMax = true,
    })]]

    Farming:AddToggle('Autofarm', {
        Text = 'Autofarm',
        Default = false, -- Default value (true / false)
        -- Tooltip = '', -- Information shown when you hover over the toggle
    })
    local defaultOffset = ClassData[Class].Type == 'Ranged' and 50 or 6
    local maxOffset = ClassData[Class].Type == 'Ranged' and 75 or 25

    Farming:AddSlider('Offset', {
        Text = 'Offset',
        Default = defaultOffset,
        Min = 0,
        Max = maxOffset,
        Rounding = 1,
        Compact = true,
    })


    Farming:AddSlider('healPercent', {
        Text = 'Heal At',
        Default = 30,
        Min = 0,
        Max = 100,
        Rounding = 0,
        HideMax = true,
        Compact = true,
        Suffix = '% HP'
    })
    Farming:AddSlider('resumePercent', {
        Text = 'Resume At',
        Default = 100,
        Min = 0,
        Max = 100,
        Rounding = 0,
        HideMax = true,
        Compact = true,
        Suffix = '% HP'
    })

    Farming:AddToggle('CollectDrops', {
        Text = 'Collect Drops',
        Default = false, -- Default value (true / false)
    })
    Farming:AddToggle('RestartDungeon', {
        Text = 'Restart Dungeon',
        Default = false, -- Default value (true / false)
    })

    Farming:AddInput('shadowChainDmg', {
        Numeric = true, -- true / false, only allows numbers
        Finished = true, -- true / false, only calls callback when you press enter
        Default = 105030,
        Text = 'Shadow Chains Tick',
        Tooltip = 'Put your Shadow Chains tick damage to dummies here or to specific enemies like raid bosses',
    })

    Farming:AddToggle('nightmareLoop', {
        Text = 'Nightmare Loop',
        Default = false, -- Default value (true / false)
    })
    Farming:AddToggle('NextDungeon', {
        Text = 'Next Dungeon',
        Default = false, -- Default value (true / false)
    })
    Farming:AddToggle('PerkSwitcher', {
        Text = 'Auto Switch Mob/Bob perk',
        Default = false, -- Default value (true / false)
    })
    Farming:AddToggle('mobCamera', {
        Text = 'Mob POV',
        Default = false, -- Default value (true / false)
    })
    Farming:AddSlider('FastSprint', {
        Text = 'Sprint Speed',
        Default = 28,
        Min = 28,
        Max = 200,
        Rounding = 0,
        Compact = true,
    })
    
    Farming:AddButton({
        Text = 'Restart Dungeon',
        Func = function()
            if InMission then
                StartRaid(DungeonID, DifficultyID)
            end
        end,
        DoubleClick = false
    })
  
    FarmingSettings:AddSlider('dungeonRestartTimer', {
        Text = 'Restart Dungeon Delay',
        Default = 0,
        Min = 0,
        Max = 200,
        Rounding = 0,
        HideMax = true,
        Suffix = ' seconds',
        Compact = true,
    })

    FarmingSettings:AddSlider('towerRestartTimer', {
        Text = 'Restart Tower Delay',
        Default = 2,
        Min = 0,
        Max = 30,
        Rounding = 0,
        HideMax = true,
        Suffix = ' seconds',
        Compact = true,
    })

    FarmingSettings:AddSlider('timeoutTimer', {
        Text = 'Dungeon Timeout',
        Default = 120,
        Min = 10,
        Max = 300,
        Rounding = 0,
        HideMax = true,
        Suffix = ' seconds',
        Tooltip = 'Restart dungeon if no damage has been done within the specified time period',
        Compact = true,
    })

    FarmingSettings:AddToggle('restartAfterFloors', {
        Text = 'Inf Tower Smart Restart',
        Tooltip = 'Restarts Infinite Floor after specified amount of floors are completed',
        Default = false, -- Default value (true / false)
    })
    FarmingSettings:AddSlider('completedInfiniteTowerFloors', {
        Text = 'Floors',
        Default = 31,
        Min = 1,
        Max = 150,
        Rounding = 0,
        HideMax = true,
        Compact = true,
    })

    FarmingSettings:AddDivider()
    FarmingSettings:AddToggle('rejoinDungeon', {
        Text = 'Rejoin Last Dungeon',
        Tooltip = 'Automatically starts the last dungeon started within your desired time limit',
        Default = false, -- Default value (true / false)
    })
    Toggles.rejoinDungeon:OnChanged(function(c)
        InfiniteWorldZeroData.RejoinLastDungeon = c
        save()
    end)
    local rjdLimitTbl = {
        ['30 minutes'] = 1800,
        ['3 hours'] = 10800,
        ['12 hours'] = 43200,
        ['24 hours'] = 86400,
        ['Infinite'] = 999999999,
    }
    FarmingSettings:AddDropdown('rjdLimit', {
        Text = 'Rejoin Last Dungeon Limit',
        Values = {'30 minutes','3 hours','12 hours','24 hours','Infinite'},
        Default = '30 minutes',
        AllowNull = false,
        Multi = false,
    })
    Options.rjdLimit:OnChanged(function(c)
        InfiniteWorldZeroData.RejoinLastDungeonThreshold = rjdLimitTbl[c]
        save()
    end)
    FarmingSettings:AddDivider()
    FarmingSettings:AddInput('dungeonHook', {
        Numeric = false, -- true / false, only allows numbers
        Finished = true, -- true / false, only calls callback when you press enter
        Text = 'Dungeon Webhook',
        Tooltip = 'Put your own webhook link to log dungeon completions/fails',
    })
    FarmingSettings:AddInput('drophook', {
        Numeric = false, -- true / false, only allows numbers
        Finished = true, -- true / false, only calls callback when you press enter
        Text = 'Drop Webhook',
        Tooltip = 'Put your own webhook link to log T5 drops',
    })
    FarmingSettings:AddToggle('anonHook', {
        Text = 'Anonymous Webhook',
        Tooltip = "Won't show your avatar, username, or userId in the webhook",
        Default = false, -- Default value (true / false)
    })
    Weapons:AddInput('mobWepId', {
        Numeric = false, -- true / false, only allows numbers
        Finished = true, -- true / false, only calls callback when you press enter
        Text = 'Current Mob Weapon',
    })
    Weapons:AddInput('bossWepId', {
        Numeric = false, -- true / false, only allows numbers
        Finished = true, -- true / false, only calls callback when you press enter
        Text = 'Current Boss Weapon',
    })
    Weapons:AddButton({
        Text = 'Set Current Primary for Mobs',
        Tooltip = 'Killaura will auto equip this weapon when targeting mobs',
        Func = function()
            local newWep = Primary and Primary:GetChildren()[1]
            local newWepId = newWep and newWep.ID.Value
            if newWepId then Options.mobWepId:SetValue(newWepId); Library:Notify('Set ' .. items[newWep.Name].DisplayKey .. ' as your Mob weapon!') 
            else Library:Notify('No suitable Primary Weapon Detected') end
        end,
        DoubleClick = false,
    })
    Weapons:AddButton({
        Text = 'Set Current Primary for Bosses',
        Tooltip = 'Killaura will auto equip this weapon when targeting bosses',
        Func = function()
            local newWep = Primary and Primary:GetChildren()[1]
            local newWepId = newWep and newWep.ID.Value
            if newWepId then Options.bossWepId:SetValue(newWepId); Library:Notify('Set ' .. items[newWep.Name].DisplayKey .. ' as your Boss weapon!')
            else Library:Notify('No suitable Primary Weapon Detected') end
        end,
        DoubleClick = false,
    })
    Weapons:AddButton({
        Text = 'Reset Selected Weapons',
        Func = function()
            mobWepId:SetValue('')
            bossWepId:SetValue('')
        end,
        DoubleClick = false,
    })
end

-- Auto Sell and some restart dungeon
do
    AutoSell:AddDropdown('AutoSellTbl', {
        Text = 'Auto Sell Tiers',
        Values = {1,2,3,4,5},
        AllowNull = true,
        Multi = true,
    })

    Options.AutoSellTbl:OnChanged(function(v2)
        AutoSellTbl = {}
        for i,v in pairs(v2) do
            table.insert(AutoSellTbl, i)
        end
    end)

    AutoSell:AddButton({
        Text = 'Sell All',
        Tooltip = 'Sells all weapons and armors of selected tiers',
        Func = function()
            local newSellTbl = {}
            for i,v in pairs(Inventory:GetChildren()) do
                local newItem = items[v.Name]
                if (newItem.Type == 'Weapon' or newItem.Type == 'Armor') and table.find(AutoSellTbl, tier:GetItemTier(v)) and not v:FindFirstChild('Locked') then
                    table.insert(newSellTbl, v)
                end
            end  
            if #newSellTbl > 0 then
                Library:Notify('Sold ' .. #newSellTbl .. ' items')
                Shared.Drops.SellItems:InvokeServer(newSellTbl)
            end
        end,
        DoubleClick = true,
    })
    AutoSell:AddDivider()
    AutoSell:AddToggle('smartPerkSell', {
        Text = 'Smart T5 Auto Sell',
        Default = false, -- Default value (true / false)
        Tooltip = 'Do NOT enable this until you have turned all of your desired perks slider atleast 1 higher than lowest value',
    })
    local perkDisplayNames = {}
    for i,v in pairs(PerkData) do
        table.insert(perkDisplayNames, v.DisplayName) 
    end
    sortTbl(perkDisplayNames)
    for i = 1, #perkDisplayNames do
        for perkCode, perk in pairs(PerkData) do
            if perkDisplayNames[i] == perk.DisplayName then
                AutoSell:AddSlider(perkCode, {
                    Text = perk.DisplayName,
                    Default = math.round(perk.StatRange[1]*100),
                    Min = math.round(perk.StatRange[1]*100),
                    Max = math.round(perk.StatRange[2]*100),
                    Rounding = 0,
                    HideMax = true,
                    Compact = true,
                    Suffix = '%'
                })
            end
        end
    end
end

--  Miscellaneous
do
    function PlayerTp(v1,x,y,z)
        HumanoidRootPart.CFrame = CFrame.new(v1 + Vector3.new(x,y,z))
    end

    function SmartPlayerTp(pos)
        --HumanoidRootPart.CFrame = v1.CFrame + (v1.CFrame.lookVector*(x)+v1.CFrame.upVector*(y)+v1.CFrame.rightVector*(z))
        --HumanoidRootPart.CFrame = CFrame.lookAt(HumanoidRootPart.Position, Vector3.new(v1.Position.x, HumanoidRootPart.Position.y, v1.Position.z))
        --HumanoidRootPart.CFrame = CFrame.new(v1.Position + (v1.CFrame.lookVector*(x)+v1.CFrame.upVector*(y)+v1.CFrame.rightVector*(z)),
        --Vector3.new(v1.Position.x, HumanoidRootPart.Position.y, v1.Position.z))
        if plr.Character and plr.Character.PrimaryPart then
            noclip()
            plr.Character.PrimaryPart.Velocity = Vector3.new()
		    plr.Character.Collider.Velocity = Vector3.new()
            plr.Character:SetPrimaryPartCFrame(pos)
        end
    end

    Miscellaneous:AddToggle('NVD', {
        Text = 'No Visual Damage',
        Default = false, -- Default value (true / false)
    })
    Miscellaneous:AddToggle('rendering', {
        Text = 'Disable 3D Rendering',
        Default = false, -- Default value (true / false)
    })
    Toggles.rendering:OnChanged(function(c)
        cloneref(game:GetService("RunService")):Set3dRenderingEnabled(not c)
    end)

    local UpgradeItems = Miscellaneous:AddButton({
        Text = 'Upgrade Equipped Items',
        Func = function()
            for _, Item in pairs(Equip:GetDescendants()) do
                task.spawn(function()
                    if Item:FindFirstChild('UpgradeLimit') and Item.UpgradeLimit.Value ~= 0 then
                        while task.wait(0.1) do
                            if Item:FindFirstChild('Upgrade') and Item.Upgrade.Value == Item.UpgradeLimit.Value then
                                break
                            else
                                Upgrade:FireServer(Item) 
                            end
                        end
                    end
                end)
            end
        end,
        DoubleClick = false
    })

    local DiscoverDungeon = Miscellaneous:AddButton({
        Text = 'Discover Dungeons (BLATANT)',
        Func = function()
            if not InMission then
                local dungs = Workspace.PhysicalDungeonLocations
                for i,v in pairs(dungs:GetChildren()) do
                    Shared.Teleport.WaystoneTeleport:FireServer(1)
                    HumanoidRootPart:GetPropertyChangedSignal("Position"):Once(function()
                        PlayerTp(v.Ring.Position,0,10,0)
                    end)
                    wait(1)
                end
            end
        end,
        DoubleClick = true,
    })

    local DisableAnticheat = Miscellaneous:AddButton({
        Text = 'Disable Anti-TP',
        Func = function()
            if not InMission then
                ReplicatedStorage.Remotes.SetMounted:FireServer(true)
                wait(1)
                Shared.Teleport.WaystoneTeleport:FireServer(1)
                wait(0.5)
                ReplicatedStorage.Remotes.SetMounted:FireServer(false)
                require(ReplicatedStorage.Client.Gui):Get("Waystones"):Close();
                
                
            end
        end,
        DoubleClick = false
    })

    Miscellaneous:AddDivider()
    Miscellaneous:AddToggle('autoHide', {
        Text = 'Hide GUI On Execution',
        Default = false, -- Default value (true / false)
    }) 
end

-- Gui
do
    local TotalGuis = 5
    local GuiData = {
        Bank = { DisplayName = 'Bank', CodeName = 'Bank', OrderId = 1 },
        ZeroAltar = { DisplayName = 'Zero Altar', CodeName = 'Fusion', OrderId = 2 },
        UpgradeMenu = { DisplayName = 'Upgrade', CodeName = 'ItemUpgrade', OrderId = 3 },
        DungeonMenu = { DisplayName = 'Dungeon Menu', CodeName = 'MissionSelect', OrderId = 4 },
        Inventory = { DisplayName = 'Inventory', CodeName = 'Inventory', OrderId = 5 },
        AdminItemPanel = { DisplayName = 'Admin Item Panel', CodeName = 'AdminItemPanel', OrderId = 5 },
    }
    local function OpenGui(v1)
        setthreadcontext(2)
        require(ReplicatedStorage.Client.Gui):Get(v1):Open()
    end
    for i = 1, TotalGuis do
        for i2, Gui1 in pairs(GuiData) do
            if Gui1.OrderId == i then
                Gui:AddButton({
                    Text = Gui1.DisplayName,
                    Func = function()
                        OpenGui(Gui1.CodeName)
                    end,
                    DoubleClick = false
                })
            end
        end
    end

    Gui:AddInput('marketFilter', {
        --Default = '1000000',
        Numeric = false, -- true / false, only allows numbers
        Finished = true, -- true / false, only calls callback when you press enter
        Text = 'Market Filter',
    })
    Gui:AddButton({
        Text = 'Open All Markets',
        Func = function()
            task.spawn(function()
                setthreadcontext(2)
                local shop = require(game.ReplicatedStorage.Client.Gui):Get("Shop")
                local func = getfenv(shop.Open).BuildShop
                
                pcall(shop.Open, shop, game)
                for i,v in pairs(getupvalue(func, 1)) do
                    v:Destroy()
                end
                for i,v in pairs(getupvalue(func, 2)) do
                    v:Disconnect()
                end

                local list = {}
                local conns = {}
                local profiles = game.ReplicatedStorage:WaitForChild("Profiles")
                for i,p in pairs(game.Players:GetPlayers()) do
                    local plrShop = profiles:FindFirstChild(p.Name) and profiles[p.Name]:FindFirstChild("SellShop")
                    if plrShop and plrShop:FindFirstChild("Active") and plrShop.Active.Value then
                        setupvalue(func, 1, {})
                        setupvalue(func, 2, {})
                        func(p)
                        for i,v in pairs(getupvalue(func, 1)) do
                            v.Title.Text = v.Title.Text .. " (" .. p.Name .. ")"
                            v.Title.Overlay.Text = v.Title.Text
                            table.insert(list, v)
                        end
                        for i,v in pairs(getupvalue(func, 2)) do
                            table.insert(conns, v)
                        end
                    end
                end

                if Options.marketFilter.Value and #Options.marketFilter.Value > 0 then
                    for i,v in pairs(list) do
                        if not v.Title.Text:lower():find(Options.marketFilter.Value:lower()) then
                            v:Destroy()
                        end
                    end
                end

                setupvalue(func, 1, list)
                setupvalue(func, 2, conns)
                getupvalue(shop.Init, 1).Title.Text = "All Shops"
                getupvalue(shop.Init, 1).Title.Overlay.Text = "All Shops"
                
            end)
        end,
        DoubleClick = false
    })
end

-- Stats Tab
do
    local goldGainedText = StatsTab:AddLabel('Gold Gained: ' .. Gold.Value-OldGold)
    local goldRateText = StatsTab:AddLabel('Gold Rate: N/A')
    local firstTime = true
    local sessionTick = tick()
    local goldRateTick
    local goldRateGold
    local startGoldTimer = false
    local totalGoldText = StatsTab:AddLabel('Total Gold: ' .. Gold.Value)
    local goldTimeElapsedText = StatsTab:AddLabel('Time Elapsed: 0h 0m 0s')
    local function timeElapsed(v)
        local h = math.floor(v / 3600)
        local m = math.floor((v % 3600) / 60)
        local s = math.floor((v % 60))
        return (h .. 'h ' .. m .. 'm ' .. s .. 's')
    end
    task.spawn(function()
        while true do
            if Gold.Value ~= NewGold then
                NewGold = Gold.Value
                if not firstTime then
                    goldRateText:SetText('Gold Rate: ' .. math.floor((NewGold-goldRateGold)/(tick()-goldRateTick)*600)/10 .. '/min')
                end
                if firstTime then
                    firstTime = false
                    startGoldTimer = true
                    goldRateTick = tick()
                    goldRateGold = NewGold
                end
                goldGainedText:SetText('Gold Gained: ' .. NewGold-OldGold)
                totalGoldText:SetText('Total Gold: ' .. NewGold)
            end
            task.wait()
        end
    end)
    task.spawn(function()
        while true do
            task.wait(1)
            goldTimeElapsedText:SetText('Session Time: ' .. timeElapsed(tick()-sessionTick))
        end
    end)
end

-- Teleports
do
    for i = 1, TotalWorlds do
        for i2, World in pairs(WorldData) do
            if World.OrderId == i then
                Worlds:AddButton({
                    Text = World.Name,
                    Func = function()
                        Shared.Teleport.TeleportToHub:FireServer(World.Id)
                    end,
                    DoubleClick = false
                })
            end
        end
    end
end

-- Towers GUI Teleports
do
    for i,v in pairs(Towers) do
        local Dung = MissionData[v]
        TowerTeleports:AddButton({
            Text = Dung.NameTag .. ' T' .. i,
            Func = function()
                StartRaid(v)
            end,
            DoubleClick = false
        })
    end
end

-- Nightmare dungeon buttons
do
    local DifficultyMode
    for i,v in pairs(Nightmares) do
        local Dung = MissionData[v]
        local nameStr
        for i2,v2 in pairs(DungeonData) do
            if v2.Id == Dung.InternalID then
                nameStr = v2.Name
                break
            end
        end
        NightmareDungeons:AddButton({
            Text = nameStr .. ' ' .. Dung.DisplayWorldID .. '-' .. Dung.WorldMissionID,
            Func = function()
                StartRaid(v, DifficultyMode)
            end,
            DoubleClick = false
        })
    end
    NightmareDungeons:AddToggle('ChallengeMode', {
        Text = 'Challenge Mode',
        Default = true, -- Default value (true / false)
    }) 
    Toggles.ChallengeMode:OnChanged(function(c)
        if c then
            DifficultyMode = 5
        else
            DifficultyMode = 1
        end
    end)
end
local healingVector3 = Vector3.new(2000,2000,2000)
-- Autofarm/Killaura Functions
do    
    function MobTeleport()
        task.spawn(function()
            while Toggles.Autofarm.Value do
                for i,v in pairs(Mobs:GetChildren()) do
                    if v.PrimaryPart and v:FindFirstChild("HealthProperties") and v.HealthProperties:FindFirstChild("Health") and v.HealthProperties.Health.Value > 0 then
                        local mobRoot = v.PrimaryPart
                        while mobRoot and v:FindFirstChild("HealthProperties") and v.HealthProperties:FindFirstChild('Health') and
                        v.HealthProperties.Health.Value > 0 and Toggles.Autofarm.Value and TeleportingToMob do
                            if Healing then resetCamera() else setMobCamera(Toggles.mobCamera.Value, mobRoot) end
                            local yOffset = (mobRoot.Size.Y/2 + (Options.Offset.Value)) * (ClassData[Class].Type == 'Ranged' and 1 or -1)
                            local extraVector = Healing and healingVector3 or Vector3.new()
                            SmartPlayerTp(CFrame.new(mobRoot.Position + Vector3.new(0, yOffset, 0) + extraVector) + mobRoot.CFrame.lookVector * 2)
                            Heartbeat:Wait()
                        end
                    end
                end
                if InInfiniteTower and TeleportingToMob then SmartPlayerTp(CFrame.new(10000,10000,10000)) end
                resetCamera()
                unnoclip()
                task.wait()
            end
        end)
    end

    function MobTeleportIgnore(v1,waittime)
        local waited
        task.spawn(function()
            while Toggles.Autofarm.Value do
                for i,v in pairs(Mobs:GetChildren()) do
                    if v.PrimaryPart and v:FindFirstChild("HealthProperties") and v.HealthProperties:FindFirstChild('Health') and v.HealthProperties.Health.Value > 0 and not (v.Name == v1) then
                        local mobRoot = v.PrimaryPart
                        while mobRoot and v:FindFirstChild("HealthProperties") and v.HealthProperties:FindFirstChild('Health') and
                        v.HealthProperties.Health.Value > 0 and Toggles.Autofarm.Value and TeleportingToMob do
                            if Healing then resetCamera() else setMobCamera(Toggles.mobCamera.Value, mobRoot) end
                            local yOffset = (mobRoot.Size.Y/2 + (Options.Offset.Value)) * (ClassData[Class].Type == 'Ranged' and 1 or -1)
                            local extraVector = Healing and healingVector3 or Vector3.new()
                            SmartPlayerTp(CFrame.new(mobRoot.Position + Vector3.new(0, yOffset, 0) + extraVector) + mobRoot.CFrame.lookVector * 2)
                            Heartbeat:Wait()
                        end
                    elseif v.Name == v1 and MobCount == 1 and v.PrimaryPart and v:FindFirstChild("HealthProperties") and v.HealthProperties:FindFirstChild('Health') and v.HealthProperties.Health.Value > 0 then
                        if waittime and not waited then waited = true; task.wait(waittime) end
                        local mobRoot = v.PrimaryPart
                        while mobRoot and v:FindFirstChild("HealthProperties") and v.HealthProperties:FindFirstChild('Health') and
                        v.HealthProperties.Health.Value > 0 and Toggles.Autofarm.Value and TeleportingToMob do
                            if MobCount > 1 then break end
                            if Healing then resetCamera() else setMobCamera(Toggles.mobCamera.Value, mobRoot) end
                            local yOffset = (mobRoot.Size.Y/2 + (Options.Offset.Value)) * (ClassData[Class].Type == 'Ranged' and 1 or -1)
                            local extraVector = Healing and healingVector3 or Vector3.new()
                            SmartPlayerTp(CFrame.new(mobRoot.Position + Vector3.new(0, yOffset, 0) + extraVector) + mobRoot.CFrame.lookVector * 2)
                            Heartbeat:Wait()
                        end
                    end
                end
                resetCamera()
                unnoclip()
                task.wait()
            end
        end)
    end

    function MobTeleportPriority(table)
        local newBestMob 
        task.spawn(function()
            while Toggles.Autofarm.Value do
                local isPriorityMob = false
                for i = 1, #table do
                    for _, Mob in pairs(Mobs:GetChildren()) do
                        if Mob.Name == table[i] and Mob.PrimaryPart and Mob:FindFirstChild("HealthProperties") and Mob.HealthProperties:FindFirstChild("Health").Value > 0 then
                            isPriorityMob = true
                            newBestMob = Mob
                            break
                        end
                    end
                    if isPriorityMob then
                        break
                    end
                end
                if not isPriorityMob then
                    for _, Mob in pairs(Mobs:GetChildren()) do
                        if Mob.PrimaryPart and Mob:FindFirstChild("HealthProperties") and Mob.HealthProperties:FindFirstChild("Health").Value > 0 then
                            newBestMob = Mob
                            break
                        end
                    end
                end
                task.wait()
            end
        end)
        task.spawn(function()
            while Toggles.Autofarm.Value do
                if newBestMob and newBestMob.PrimaryPart and newBestMob:FindFirstChild("HealthProperties") and newBestMob.HealthProperties:FindFirstChild("Health") and newBestMob.HealthProperties.Health.Value > 0 then
                    while newBestMob and newBestMob:FindFirstChild("HealthProperties") and newBestMob.HealthProperties:FindFirstChild("Health") 
                    and newBestMob.HealthProperties.Health.Value > 0 and Toggles.Autofarm.Value and newBestMob.PrimaryPart and TeleportingToMob do
                        local mobRoot = newBestMob.PrimaryPart
                        if Healing then resetCamera() else setMobCamera(Toggles.mobCamera.Value, mobRoot) end
                        local yOffset = (mobRoot.Size.Y/2 + (Options.Offset.Value)) * (ClassData[Class].Type == 'Ranged' and 1 or -1)
                        local extraVector = Healing and healingVector3 or Vector3.new()
                        SmartPlayerTp(CFrame.new(mobRoot.Position + Vector3.new(0, yOffset, 0) + extraVector) + mobRoot.CFrame.lookVector * 2)
                        Heartbeat:Wait()
                    end
                end
                resetCamera()
                unnoclip()
                task.wait()
            end
        end)
    end


    function AutoCheckpoint()
        task.spawn(function()
            while Toggles.Autofarm.Value do
                if not PauseAutoCheckpoint then
                    for i,v in pairs(workspace:GetDescendants()) do
                        if v.Name == "TouchInterest" and v.Parent and (table.find(checkpointTbl, v.Parent.Name) or table.find(checkpointTbl, v.Parent.Parent.Name)) then
                            task.spawn(function()
                                v.Parent.CanCollide = false
                                v.Parent.Anchored = true
                                v.Parent.CFrame = CFrame.new(HumanoidRootPart.Position)
                                task.wait(0.25)
                                if v and v.Parent then
                                    v.Parent.CFrame = CFrame.new(Vector3.new(0,0,0))
                                end
                            end)
                        end
                    end
                end
                task.wait(0.5)
            end
        end)
    end

    function MobCounter()
        task.spawn(function()
            while Toggles.Autofarm.Value do
                MobCountNum = 0
                for i,v in pairs(Mobs:GetChildren()) do
                    if v:FindFirstChild("HealthProperties") and v.HealthProperties:FindFirstChild('Health') and v.HealthProperties.Health.Value > 0 then
                        MobCountNum += 1
                    end
                end
                if MobCount and MobCount ~= MobCountNum then
                    MobCount = MobCountNum
                elseif not MobCount then
                    MobCount = MobCountNum
                end
                task.wait()
            end
        end)
    end
    
    function AntiFling()
        if Toggles.Autofarm.Value then
            task.spawn(function()
                PausePos = nil
                while true do
                    if mobPos then
                        PausePos = mobPos
                    end
                    if PausePos and MobCount and MobCount == 0 and HealthProperties and HealthProperties:FindFirstChild('Health') and HealthProperties.Health.Value > 0 and
                    HumanoidRootPart then
                        local newTick = tick()
                        while tick()-newTick <= 0.1 and MobCount == 0 do
                            SmartPlayerTp(CFrame.new(PausePos + Vector3.new(0,5,0)))
                            Heartbeat:Wait()
                        end
                        PausePos = nil
                    end
                    if not Toggles.Autofarm.Value then
                        if PausePos then
                            local newTick = tick()
                            while tick()-newTick <= 0.1 do
                                SmartPlayerTp(CFrame.new(PausePos + Vector3.new(0,5,0)))
                                Heartbeat:Wait()
                            end
                            PausePos = nil
                        end
                        break
                    end
                    Heartbeat:Wait()
                end
            end)
        end
    end
    
    function sell(v1)
        if Toggles.Autofarm.Value then
            Shared.Drops.SellItems:InvokeServer({v1})
        end
    end

end

-- Change Cosmetic 
do
    local function ChangeCosmetic(v1,v2)
        if Character then
            Equipment:SetAttribute(v1,v2)
        end
    end
    local function color(x,y,z)
        Color3.fromRGB(x,y,z)
    end
    local Colors = {
        Red = Color3.fromRGB(255,0,0),
        Black = Color3.fromRGB(0,0,0),
        White = Color3.fromRGB(255,255,255),
        Green = Color3.fromRGB(0,255,0),
        Pink = Color3.fromRGB(255,0,255),
        Cyan = Color3.fromRGB(0,255,255),
        Purple = Color3.fromRGB(127.5,0,255),
        Orange = Color3.fromRGB(255,127.5,0),
        LightPink = Color3.fromRGB(255,127.5,255)
    }
    local Equip = {
        Costume = "Costume",
        CostumeDye = "CostumeDye",
        RightAura = "RightAura",
        LeftAura = "LeftAura",
        RightWepSkin = "PrimarySkin",
        LeftWepSkin = "OffhandSkin",
        Back = "Back",
        BackDye = "BackDye",
        Hat1 = "Hat1",
        Hat1Dye = "Hat1Dye",
        Hat2 = "Hat2",
        Hat2Dye = "Hat2Dye",
        Hat3 = "Ha32",
        Hat3Dye = "Hat3Dye",
        Mount = "Mount"
    }

    local CogWork = {
        Costume = "CogWorkArmor",
        Hat1 = "CogWorkTophat",
        Hat2 = "CogWorkGoggles",
    }
    
    -- Platemails
    do
        --function GreenPlatemail()
        --    ChangeCosmetic(Equip.Costume, "FullPlatemail")
        --    ChangeCosmetic(Equip.CostumeDye, Colors.Green)
    
        --    ChangeCosmetic(Equip.LeftAura, "PoisonBreathAura")
        --   ChangeCosmetic(Equip.RightAura, "PoisonBreathAura")
    
        --    ChangeCosmetic(Equip.LeftWepSkin, "GalacticLongswordGreen")
        --    ChangeCosmetic(Equip.RightWepSkin, "GalacticLongswordGreen")
    
        --    ChangeCosmetic(Equip.Hat1, "FullPlatemailHelm")
        --    ChangeCosmetic(Equip.Hat1Dye, Colors.Green)
    
        --    ChangeCosmetic(Equip.Back, "AngelWings") 
        --    ChangeCosmetic(Equip.BackDye, Colors.Green)
        --end
        
        function CogWorkOutfit()
            if Equipment:GetAttribute('Primary') then
                local WeaponType = items[Equipment:GetAttribute('Primary')].SubType
                if WeaponType == 'Greataxe' then
                    ChangeCosmetic(Equip.RightWepSkin, 'CogWorkAxe')
                else
                    ChangeCosmetic(Equip.RightWepSkin, 'CogWork' .. WeaponType)               
                end
            end
            if Equipment:GetAttribute('Offhand') then
                local WeaponType = items[Equipment:GetAttribute('Offhand')].SubType
                if WeaponType == 'Greataxe' then
                    ChangeCosmetic(Equip.LeftWepSkin, 'CogWorkAxe')
                else
                    ChangeCosmetic(Equip.LeftWepSkin, 'CogWork' .. WeaponType)               
                end
            end
            for i,v in pairs(CogWork) do
                ChangeCosmetic(i,v)
            end
        end
    end

    -- Cosmetic Buttons
    do
        OutfitList:AddButton({
            Text = 'Cogwork',
            Func = function()
                if Character then
                    CogWorkOutfit()
                end
            end,
            DoubleClick = false
        })
    end
end

-- DamageDebug
if DamageDebug then
    local LastDamage = tick()
    Workspace.Camera.ChildAdded:Connect(function(c)
        if Toggles.Killaura.Value then
            if c.Name == 'DamagePartVisual' then
                print(tick()-LastDamage)
                LastDamage = tick()
            end
        end
    end)
end

-- Dungeon fixer and restartdungeon and nextdungeon and autosell
do

    -- Dungeon Fixer and dungeon hook and dungeon restart
    if InMission then
        if MissionScripts:FindFirstChild(6) then -- Gravetower move pillars to mob folder
            task.spawn(function()
                local Pillar1, Pillar2, Pillar3 = Workspace:WaitForChild('Pillar1'), Workspace:WaitForChild('Pillar2'), Workspace:WaitForChild('Pillar3')
                Pillar3:WaitForChild('HealthProperties')
                Pillar1.Parent = Mobs
                Pillar2.Parent = Mobs
                Pillar3.Parent = Mobs
            end)
        elseif MissionScripts:FindFirstChild(23) then -- Atlantis Tower ignore kraken
            task.spawn(function()
                Mobs:WaitForChild('BOSSKrakenMain')
                ChestWait = 4
                ChestName = 'lol'
                local AtlantisFolder = Instance.new('Folder')
                AtlantisFolder.Name = 'WaterFolder'
                AtlantisFolder.Parent = Workspace
                Mobs.BOSSKrakenMain.Parent = Workspace.WaterFolder
                AtlantisBossCheck = true
            end)
        elseif MissionScripts:FindFirstChild(30) then -- Ruin Rush ignore sentries
            local count = 0
            task.spawn(function()
                while true do
                    for i,v in pairs(Mobs:GetChildren()) do
                        if (v.PrimaryPart.Position-Vector3.new(533, 302, -123)).magnitude < 100 then
                            v:Destroy()
                            count += 1
                        end
                    end
                    if count == 3 then break end
                    task.wait()
                end
            end)
        end


        --[[ Turn off lootreceived gui
        local s,e = pcall(function()
            local lootGui = game:GetService("Players").LocalPlayer.PlayerGui.LootReceived.LootReceived
            lootGui:GetPropertyChangedSignal('Visible'):Connect(function(v)
                if v then
                    require(game:GetService("ReplicatedStorage").Client.Gui):Get("LootReceived"):_Close()
                    lootGui.Visible = false
                    Library:Notify('Disabled loot gui')
                end
            end)
        end)
        if not s and e then warn('[Infinite]: ' .. e)]]

        -- Dungeon Hook
        local end1 = game:GetService("Players").LocalPlayer.PlayerGui:WaitForChild("MissionRewards").MissionRewards.RaidClear
        local x = "D U N G E O N    C"
        local x2 = "D U N G E O N    C L E A R E D"
        local y = "D U N G E O N    F"
        local y2 = "D U N G E O N    F A I L U R E"
        local z = "T O W E R"
        local name = game.Players.LocalPlayer.Name
        local raids = {21,22,17,23,27,29,34,43,38,39}
        local specialMissions = {38,39}
        local diffs = {Normal = 1, Challenge = 5}
        local dungname = "str1" .. " str2"
        local bool = false
        local codeStr
        for i,v in pairs(DungeonData) do
            if MissionScripts:FindFirstChild(v.Id) then
                codeStr = v.Code
                break
            end
        end
        for i,v in pairs(DungeonData) do

            -- Non nightmare dungeons
            if DungeonID == v.Id then
                dungname = string.gsub(dungname,"str1",v.Name)
                for i2,v2 in pairs(raids) do
                    if DungeonID == v2 then
                        bool = true
                        dungname = string.gsub(dungname," str2","")
                    end
                end
                for i3,v3 in pairs(diffs) do
                    if DifficultyID == v3 and bool == false then
                        dungname = string.gsub(dungname,"str2",i3)
                        break
                    end
                end
            end

            -- Nightmare dungeons
            if DungeonID > 500 then
                if game:GetService("ReplicatedStorage").MissionScripts:FindFirstChild(v.Id) then
                    local newname = "Nightmare " .. v.Name
                    dungname = string.gsub(dungname,"str1",newname)
                    for i2,v2 in pairs(diffs) do
                        if DifficultyID == v2 then
                            dungname = string.gsub(dungname,"str2",i2)
                            break
                        end
                    end
                end
            end
        end
        local plr = game.Players.LocalPlayer
        local plrLink = 'User: [' .. plr.DisplayName .. ' (@' .. plr.Name .. ')](https://www.roblox.com/users/' .. plr.UserId .. '/profile)'
        function hookWithUserInfo(url, title, desc, color, time, content)
            request({
                Url = url,
                Method = "POST",
                Headers = {
                    ["Content-Type"] = "application/json"
                },
                Body = HttpService:JSONEncode({
                    ["content"] = content or '',  -- This is the text outside of the embed
                    ["embeds"] = {{
                        ["title"] = title,
                        ["description"] = desc,
                        ["type"] = 'rich',
                        ["color"] = tonumber(color),
                        ["footer"] = {
                            ["text"] = time .. ' UTC',
                        },
                        --[[["thumbnail"] = {
                            ["url"] = avaLink,
                        },]]
                    }}
                })
            })
        end
        function anonHook(url, title, desc, color, time, content)
            request({
                Url = url,
                Method = "POST",
                Headers = {
                    ["Content-Type"] = "application/json"
                },
                Body = HttpService:JSONEncode({
                    ["content"] = content or '',  -- This is the text outside of the embed
                    ["embeds"] = {{
                        ["title"] = title,
                        ["description"] = desc,
                        ["type"] = 'rich',
                        ["color"] = tonumber(color),
                        ["footer"] = {
                            ["text"] = time .. ' UTC',
                        },
                    }}
                })
            })
        end
        function msg(status, color, time)  
            --local s,e = pcall(function()
                local newLink = Options.dungeonHook.Value
                local completionStr = 'Code: ``' .. codeStr .. '``\nMission: ``' .. dungname .. '``\nTime: ``' .. math.round(time/0.1) / 10 .. 's``\nClass: ' .. '``' .. ClassData[Class].DisplayName .. '``'
                if fileSystemEnabled then
                    if InfiniteWorldZeroData.LastDungeonCompletion then
                        completionStr = completionStr .. '\nTime Since Last Completion: ``' .. math.round((dungeonEndTime-InfiniteWorldZeroData.LastDungeonCompletion)/0.1) / 10 .. 's``'
                    end
                    if InfiniteWorldZeroData.Gold and dungeonEndGold >= InfiniteWorldZeroData.Gold then
                        completionStr = completionStr .. '\nGold Gained: ``' .. formatNumberWithCommas(dungeonEndGold-InfiniteWorldZeroData.Gold) .. '``'
                    end 
                    InfiniteWorldZeroData.Gold = dungeonEndGold; InfiniteWorldZeroData.LastDungeonCompletion = dungeonEndTime; save()
                end
                completionStr = completionStr .. '\nGold: ``' ..  formatNumberWithCommas(Gold.Value) .. '``' 
                if DungeonID == 44 then
                    local vaneraids = game:GetService("ReplicatedStorage").Shared.LeaderboardHookup.GetScore:InvokeServer("VANE_KILLS",1)
                    completionStr = completionStr .. '\nVane Raids Completed Total: **' .. vaneraids[1] .. '**\nVane Raids Completed Daily: ' .. '**' .. vaneraids[2] .. '**'
                    if Inventory:FindFirstChild('DragonCoin') and Inventory.DragonCoin:FindFirstChild('Count') then
                        completionStr = completionStr .. '\nDragon Coins: ``' .. Inventory.DragonCoin.Count.Value .. '``'
                    end
                elseif DungeonID == 38 then
                    completionStr = completionStr ..  '\nFloor: **' .. ReplicatedStorage.ReplicateTowerFloor.Value .. '**'
                end
                if not Toggles.anonHook.Value then completionStr = completionStr .. '\n' .. plrLink end 
                if newLink and #newLink > 30 then
                    if httpRequestSent then task.wait(1.5) end
                    httpRequestSent = true
                    if Toggles.anonHook.Value then anonHook(newLink, status, completionStr, color, GetTime()) else hookWithUserInfo(newLink, status, completionStr, color, GetTime()) end
                    httpRequestSent = false
                end
                if not devMode then
                    if httpRequestSent then task.wait(1.5) end
                    httpRequestSent = true
                    hookWithUserInfo(publicHookUrl, status, completionStr, color, GetTime())
                    httpRequestSent = false
                end
                requestDone = true
            --end)
            --if not s and e then warn('[Infinite]: ' .. e) end
        end
        Shared.Missions.MissionFinished.OnClientEvent:Once(function(completionTime, playerTable, failed, idk)
            dungeonEndTime = tick()
            dungeonEndGold = Gold.Value
            DungeonCompleted = true
            waitforRequest = true
            task.spawn(function()
                if not failed then
                    Library:Notify('Dungeon Completed!')
                    msg("Completed",colorTbl.Green, completionTime)
                else
                    msg("Failed", colorTbl.Red, completionTime)
                end
            end)
            Inventory.ChildAdded:Connect(function(c)
                local drop = items[c.Name]
                local itemTier = tier:GetItemTier(c)
                if (drop.Type == 'Weapon' or drop.Type == 'Armor') then
                    c:WaitForChild('Level')
                    if itemTier < 6 then
                        if table.find(AutoSellTbl, itemTier) and Toggles.Autofarm.Value then
                            Library:Notify('Sold a Lvl ' .. c.Level.Value .. ' T' .. itemTier .. ' ' .. drop.DisplayKey)
                            sell(c)
                        elseif Toggles.Autofarm.Value then
                            Library:Notify('Got a Lvl ' .. c.Level.Value .. ' T' .. itemTier .. ' ' .. drop.DisplayKey .. '!')
                        end
                    end
                    if itemTier == 5 and not table.find(AutoSellTbl, 5) then
                        c:WaitForChild('Perk1')
                        c:WaitForChild('Perk2')
                        c:WaitForChild('Perk3')
                        c.Perk1:WaitForChild('PerkValue')
                        c.Perk2:WaitForChild('PerkValue')
                        c.Perk3:WaitForChild('PerkValue')
                        local goodPerkExists
                        local perfPerkExists
                        local plr = game.Players.LocalPlayer
                        local plrLink = 'User: [' .. plr.DisplayName .. ' (@' .. plr.Name .. ')](https://www.roblox.com/users/' .. plr.UserId .. '/profile)\nUserId: ' .. plr.UserId
                        local itemProfile
                        if not Toggles.anonHook.Value then
                            itemProfile = plrLink .. '\nType: ``' .. drop.Type .. '``\nLevel: ``' .. c.Level.Value .. '``\n## ``' .. drop.DisplayKey .. '``'
                        else
                            itemProfile = 'Type: ``' .. drop.Type .. '``\nLevel: ``' .. c.Level.Value .. '``\n## ``' .. drop.DisplayKey .. '``'
                        end
                        for _, Perk in pairs(c:GetChildren()) do
                            if Options[Perk.Value] then
                                local perkValue = math.round(Perk.PerkValue.Value*100)
                                local minDesiredValue = Options[Perk.Value].Value
                                local countingPerk = minDesiredValue > math.round(PerkData[Perk.Value].StatRange[1]*100) and true
                                local perkName = PerkData[Perk.Value].DisplayName
                                local isGoodPerk = countingPerk and perkValue >= minDesiredValue and true
                                local isPerfPerk = countingPerk and perkValue == math.round(PerkData[Perk.Value].StatRange[2]*100) and true
                                if isGoodPerk and not goodPerkExists then goodPerkExists = true end
                                if isPerfPerk and not perfPerkExists then perfPerkExists = true end
                                itemProfile = itemProfile .. '\n' .. (isPerfPerk and '### <:Gold:832693611396857886> ' or isGoodPerk and '### :green_circle: ' or '### :red_circle: ') .. perkName .. ': ``' .. perkValue .. '%``'
                            end
                        end
                        if not goodPerkExists and Toggles.smartPerkSell.Value and Toggles.Autofarm.Value then
                            Library:Notify('Sold a Lvl ' .. c.Level.Value .. ' T' .. itemTier .. ' ' .. drop.DisplayKey)
                            sell(c)
                        end
                        local newLink = Options.drophook.Value
                        if newLink and #newLink > 30 and Toggles.Autofarm.Value then
                            local mentionEveryoneIfGoodPerkExists = goodPerkExists and '@everyone' or ''
                            local bestColor = perfPerkExists and colorTbl.Gold or goodPerkExists and colorTbl.Green or colorTbl.Cyan
                            if httpRequestSent then task.wait(1.5) end
                            httpRequestSent = true
                            local t1 = 'Legendary Drop'
                            if Toggles.anonHook.Value then anonHook(newLink, t1, itemProfile, bestColor, GetTime(), mentionEveryoneIfGoodPerkExists) 
                            else hookWithUserInfo(newLink, t1, itemProfile, bestColor, GetTime(), mentionEveryoneIfGoodPerkExists) end
                            httpRequestSent = true
                        end
                    end
                end
            end)
            if Toggles.Autofarm.Value then
                GetMissionChest:InvokeServer()
                GetMissionChest:InvokeServer()
            end
            if not failed then
                task.wait(3 + Options.dungeonRestartTimer.Value)
            else
                task.wait(2)
            end
            --repeat task.wait() until requestDone
            if Toggles.nightmareLoop.Value and Toggles.Autofarm.Value and table.find(Nightmares, DungeonID) then
                local nextDungeonId = Nightmares[table.find(Nightmares, DungeonID)+1]
                if nextDungeonId then StartRaid(nextDungeonId, DifficultyID) else StartRaid(1005, DifficultyID) end
            elseif Toggles.RestartDungeon.Value and Toggles.Autofarm.Value then
                game:GetService("ReplicatedStorage").Shared.Missions.NotifyReadyToLeave:FireServer(false)
                StartRaid(DungeonID, DifficultyID)
            elseif Toggles.NextDungeon.Value and Toggles.Autofarm.Value and DungeonID ~= 38 then
                if table.find(Towers2, nextDungeonTbl[table.find(nextDungeonTbl, DungeonID)+1]) and (DifficultyID == 5 or InTower or InInfiniteTower) then
                    StartRaid(nextDungeonTbl[table.find(nextDungeonTbl, DungeonID)+1])
                else
                    if InDungeon and DifficultyID == 1 then
                        StartRaid(DungeonID, 5)
                    else
                        StartRaid(nextDungeonTbl[table.find(nextDungeonTbl, DungeonID)+1],1)
                    end
                end
            end
        end)

        -- Tower Finished Function - we dont restart here because sometimes arcane tower lags and takes a long time to spawn in the chests, so we rely on the tower gui being changed, because thats when the chests open
        if InTower then MissionScripts[DungeonID].TowerFinished.OnClientEvent:Once(function(unknown, completionTime)
            dungeonEndTime = tick()
            DungeonCompleted = true
            dungeonEndGold = Gold.Value
            task.spawn(function()
                msg("Completed", colorTbl.Green, completionTime)
            end)
            if Toggles.Autofarm.Value then
                GetMissionChest:InvokeServer()
                GetMissionChest:InvokeServer()
            end
            while true do
                if finalChestsAppeared and finalItemHandled and tick()-finalItemHandledTime >= 2 and tick()-lastChestAppeared >= 2 then break end task.wait()
            end
            task.wait(Options.towerRestartTimer.Value)
            if Toggles.RestartDungeon.Value and Toggles.Autofarm.Value then
                game:GetService("ReplicatedStorage").Shared.Missions.NotifyReadyToLeave:FireServer(false)
                StartRaid(DungeonID, DifficultyID)
            elseif Toggles.NextDungeon.Value and Toggles.Autofarm.Value and DungeonID ~= 38 then
                if table.find(Towers2, nextDungeonTbl[table.find(nextDungeonTbl, DungeonID)+1]) and (DifficultyID == 5 or InTower or InInfiniteTower) then
                    StartRaid(nextDungeonTbl[table.find(nextDungeonTbl, DungeonID)+1])
                else
                    if InDungeon and DifficultyID == 1 then
                        StartRaid(DungeonID, 5)
                    else
                        StartRaid(nextDungeonTbl[table.find(nextDungeonTbl, DungeonID)+1],1)
                    end
                end
            end
        end) end



        --[[Restart dungeon if beaten (for towers and celestial, not infinite)
        TowerEnd:GetPropertyChangedSignal("Text"):Once(function()
            task.wait(10 + Options.towerRestartTimer.Value)
            if Toggles.RestartDungeon.Value and Toggles.Autofarm.Value then
                game:GetService("ReplicatedStorage").Shared.Missions.NotifyReadyToLeave:FireServer(false)
                StartRaid(DungeonID, DifficultyID)
            elseif Toggles.NextDungeon.Value and Toggles.Autofarm.Value and DungeonID ~= 38 then
                if table.find(Towers2, nextDungeonTbl[table.find(nextDungeonTbl, DungeonID)+1]) and (DifficultyID == 5 or InTower or InInfiniteTower) then
                    StartRaid(nextDungeonTbl[table.find(nextDungeonTbl, DungeonID)+1])
                else
                    if InDungeon and DifficultyID == 1 then
                        StartRaid(DungeonID, 5)
                    else
                        StartRaid(nextDungeonTbl[table.find(nextDungeonTbl, DungeonID)+1],1)
                    end
                end
            end
        end)]]
    end
    if InTower or InInfiniteTower then

        -- Get Chests
        Workspace.ChildAdded:Connect(function(c)
            if Toggles.Autofarm.Value then
                if c.Name == ChestName then
                    lastChestAppeared = tick()
                    if DungeonCompleted then finalChestsAppeared = true; finalItemHandled = false end
                    task.spawn(function()
                        c.PrimaryPart.CanCollide = false
                        while c and c.PrimaryPart do
                            c.PrimaryPart.CFrame = CFrame.new(HumanoidRootPart.Position)
                            task.wait()
                        end
                    end)
                end
                if (ownsDoubleDrop or DungeonCompleted) and c.Name == ChestName2 then
                    lastChestAppeared = tick()
                    if DungeonCompleted then finalChestsAppeared = true; finalItemHandled = false end
                    task.spawn(function()
                        c.PrimaryPart.CanCollide = false
                        while c and c.PrimaryPart do
                            c.PrimaryPart.CFrame = CFrame.new(HumanoidRootPart.Position)
                            task.wait()
                        end
                    end)
                end
            end
        end)

        
        
        -- Autosell
        Inventory.ChildAdded:Connect(function(c)
            if finalChestsAppeared then
                finalItemHandled = false
                finalItemHandledTime = tick()
            end
            local drop = items[c.Name]
            local itemTier = tier:GetItemTier(c)
            if (drop.Type == 'Weapon' or drop.Type == 'Armor') then
                task.spawn(function()
                    task.wait(2)
                    require(game:GetService("ReplicatedStorage").Client.Gui):Get("LootReceived"):_Close()
                    game:GetService("Players").LocalPlayer.PlayerGui.LootReceived.LootReceived.Visible = false
                end)
                c:WaitForChild('Level')
                if itemTier < 6 then
                    if table.find(AutoSellTbl, itemTier) and Toggles.Autofarm.Value then
                        task.wait(2)
                        Library:Notify('Sold a Lvl ' .. c.Level.Value .. ' T' .. itemTier .. ' ' .. drop.DisplayKey)
                        sell(c)
                    elseif Toggles.Autofarm.Value then
                        Library:Notify('Got a Lvl ' .. c.Level.Value .. ' T' .. itemTier .. ' ' .. drop.DisplayKey .. '!')
                    end
                end
                if itemTier == 5 and not table.find(AutoSellTbl, 5) then
                    c:WaitForChild('Perk1')
                    c:WaitForChild('Perk2')
                    c:WaitForChild('Perk3')
                    c.Perk1:WaitForChild('PerkValue')
                    c.Perk2:WaitForChild('PerkValue')
                    c.Perk3:WaitForChild('PerkValue')
                    local goodPerkExists
                    local perfPerkExists
                    local plr = game.Players.LocalPlayer
                    local plrLink = 'User: [' .. plr.DisplayName .. ' (@' .. plr.Name .. ')](https://www.roblox.com/users/' .. plr.UserId .. '/profile)\nUserId: ' .. plr.UserId
                    local itemProfile
                    if not Toggles.anonHook.Value then
                        itemProfile = plrLink .. '\nType: ``' .. drop.Type .. '``\nLevel: ``' .. c.Level.Value .. '``\n## ``' .. drop.DisplayKey .. '``'
                    else
                        itemProfile = 'Type: ``' .. drop.Type .. '``\nLevel: ``' .. c.Level.Value .. '``\n## ``' .. drop.DisplayKey .. '``'
                    end
                    for _, Perk in pairs(c:GetChildren()) do
                        if Options[Perk.Value] then
                            local perkValue = math.round(Perk.PerkValue.Value*100)
                            local minDesiredValue = Options[Perk.Value].Value
                            local countingPerk = minDesiredValue > math.round(PerkData[Perk.Value].StatRange[1]*100) and true
                            local perkName = PerkData[Perk.Value].DisplayName
                            local isGoodPerk = countingPerk and perkValue >= minDesiredValue and true
                            local isPerfPerk = countingPerk and perkValue == math.round(PerkData[Perk.Value].StatRange[2]*100) and true
                            if isGoodPerk and not goodPerkExists then goodPerkExists = true end
                            if isPerfPerk and not perfPerkExists then perfPerkExists = true end
                            itemProfile = itemProfile .. '\n' .. (isPerfPerk and '### <:Gold:832693611396857886> ' or isGoodPerk and '### :green_circle: ' or '### :red_circle: ') .. perkName .. ': ``' .. perkValue .. '%``'
                        end
                    end
                    if not goodPerkExists and Toggles.smartPerkSell.Value and Toggles.Autofarm.Value then
                        Library:Notify('Sold a Lvl ' .. c.Level.Value .. ' T' .. itemTier .. ' ' .. drop.DisplayKey)
                        sell(c)
                    end
                    local newLink = Options.drophook.Value
                    if newLink and #newLink > 30 and Toggles.Autofarm.Value then
                        local mentionEveryoneIfGoodPerkExists = goodPerkExists and '@everyone' or ''
                        local bestColor = perfPerkExists and colorTbl.Gold or goodPerkExists and colorTbl.Green or colorTbl.Cyan
                        if httpRequestSent then task.wait(1.5) end
                        httpRequestSent = true
                        local t1 = 'Legendary Drop'
                        if Toggles.anonHook.Value then anonHook(newLink, t1, itemProfile, bestColor, GetTime(), mentionEveryoneIfGoodPerkExists) 
                        else hookWithUserInfo(newLink, t1, itemProfile, bestColor, GetTime(), mentionEveryoneIfGoodPerkExists) end
                        httpRequestSent = true
                    end
                end
            end
            if finalChestsAppeared then
                finalItemHandled = true
                finalItemHandledTime = tick()
            end
        end)
    end
end

local StayInSpawn = true
local safeVanePos = Vector3.new(-1700.391845703125, 1461.56591796875, -323.8279724121094)
local safeFromDarkriseSpot = Vector3.new(-1879, 1071, -354)
local safeVanePartExists
local newPart
local safePlateExists
Toggles.Autofarm:OnChanged(function()
    lastAttackTime = tick()
    Healing = false

    -- Main
    if InMission and Toggles.Autofarm.Value then

        --anti void death plate--
        if not safePlateExists then
            local plate = Instance.new("Part")
            plate.Anchored = true
            plate.Size = Vector3.new(20,1,20)
            plate.Parent = workspace
            plate.Transparency = 1
            safePlateExists = true
        end

        -- MissionStart
        if MissionObjects:FindFirstChild('MissionStart') then
            for i,v in pairs(MissionObjects.MissionStart:GetDescendants()) do
                if v:IsA('TouchTransmitter') and v.Parent then
                    v.Parent.CanCollide = false
                    v.Parent.CFrame = CFrame.new(HumanoidRootPart.Position)
                    break
                end
            end
        end
        --[[if (Class == 'Demon') and (DungeonID == 44) then -- vane raid demon op killaura stuff
            --[[if not safeVanePartExists then
                newPart = Instance.new('Part')
                newPart.Anchored = true
                newPart.Size =  Vector3.new(100,5,100)
                newPart.Position = safeVanePos
                newPart.Transparency = 1
                newPart.Parent = workspace
            end
            PlayerTp(newPart.Position, 0, 15, 0)
            task.spawn(function()
                task.wait(2)
                local vaneSafePos = Vector3.new(-1825.1507568359375, 1068.8070068359375, -255.45379638671875)
                HumanoidRootPart.CFrame = CFrame.new(vaneSafePos + Vector3.new(0,10,0))
            end)
            return
        end]]

        -- Main Autofarm Initiation
        AutoCheckpoint()
        AntiFling()
        MobCounter()
        local specialTargetingMode = false
        for i,v in pairs(specialTargetingDungeons) do
            if MissionScripts:FindFirstChild(v.Id) then
                specialTargetingMode = true
                if v.ignoreMob then 
                    MobTeleportIgnore(v.ignoreMob, v.mobWaitTime) 
                elseif v.priorityTbl then
                    MobTeleportPriority(v.priorityTbl)
                end
            end
        end
        if not specialTargetingMode then
            MobTeleport()
        end

        -- Auto heal and Resume
        task.spawn(function()
            while Toggles.Autofarm.Value do
                if plr.Character and plr.Character:FindFirstChild('Health', true) and plr.Character:FindFirstChild('MaxHealth', true) then
                    local hpPercent = (plr.Character.HealthProperties.Health.Value/plr.Character.HealthProperties.MaxHealth.Value) / 0.01
                    if Options.resumePercent.Value > Options.healPercent.Value then
                        if hpPercent <= Options.healPercent.Value and hpPercent > 0 and not Healing then
                            Healing = true
                            Library:Notify('Pausing To Heal!', 2)
                        elseif hpPercent >= Options.resumePercent.Value and Healing then
                            Healing = false
                            Library:Notify('Resuming Attack!', 2)
                        end
                    else
                        -- Force turn off healing if someone tries to play with settings and freezes himself in the healing process lol
                        if hpPercent == 100 and Healing then
                            Healing = false
                            Library:Notify('Resuming Attack!', 2)
                        end
                    end
                end
                task.wait()
            end
        end)

        -- Dragon Auto Shield Hide
        if InMission then
            task.spawn(function()
                while Toggles.Autofarm.Value do
                    local shield = workspace:FindFirstChild('IceWall') or workspace:FindFirstChild('IgnisShield')
                    if shield and Character then
                        TeleportingToMob = false
                        if (Character.HumanoidRootPart.Position-shield.Ring.Position).magnitude > 10 then
                            Character:SetPrimaryPartCFrame(shield.Ring.CFrame * CFrame.new(0,3,0))
                        end
                    else
                        TeleportingToMob = true
                    end
                    task.wait(0.5)
                end    
            end)
        end
    end

    --[[if (Class == 'Demon') and (DungeonID == 44) and StayInSpawn then
        return
    end]]
       
    -- Towers (does nothing for now)
    if InTower and Toggles.Autofarm.Value then
        --if ReplicatedStorage.Client.Gui.GuiScripts:FindFirstChild('LootReceived') then ReplicatedStorage.Client.Gui.GuiScripts.LootReceived:Destroy(); print('Destroyed') end
    end

    -- Atlantis Tower
    if InTower and Toggles.Autofarm.Value and InAtlantis then
        local PipePause
        local Cannon
        local CannonCheck

        task.spawn(function()
            while Toggles.Autofarm.Value and TempCheck do
                if AtlantisBossCheck then
                    for i,v in pairs(Mobs:GetChildren()) do
                        if v:FindFirstChild("HealthProperties") and v.HealthProperties.Health.Value > 0 
                        and (v.MobProperties.CurrentAttack.Value == 'Piledriver' or v.MobProperties.CurrentAttack.Value == 'Slap') then
                            BestMob = v.Subcollider.SubPrimaryPart
                            KrakenArmCheck = false
                            while v:FindFirstChild("HealthProperties") and v.HealthProperties.Health.Value > 0 and Character and Toggles.Autofarm.Value 
                            and (v.MobProperties.CurrentAttack.Value == 'Piledriver' or v.MobProperties.CurrentAttack.Value == 'Slap') 
                            and v:FindFirstChild('Collider') and not (PipePause) do
                                SmartPlayerTp(v.Collider, 0, 5, 0) 
                                Heartbeat:Wait()
                            end
                        else
                            BestMob = nil
                            KrakenArmCheck = true
                        end
                    end
                end
                task.wait()
            end
        end)

        task.spawn(function()
            while Toggles.Autofarm.Value do
                if AtlantisBossCheck then
                    for i,v in pairs(Mobs:GetChildren()) do
                        if KrakenArmCheck and v:FindFirstChild('Collider') and Character and Toggles.Autofarm.Value
                        and not (PipePause) then
                            SmartPlayerTp(v.Collider, 40, 10, 0)
                            task.wait(0.2)
                            if Cannon then
                                PlayerTp(Cannon.Position, 0, 2, 0)
                                task.wait(0.16)
                            end
                        end
                    end
                end
                task.wait()
            end
        end)

        task.spawn(function()
            while TempCheck do
                if AtlantisBossCheck then
                    for i,v in pairs(Workspace:GetChildren()) do
                        if v.Name == 'KrakenPipe' then
                            if v:FindFirstChild('GuiPart') then
                                while Toggles.Autofarm.Value and v.GuiPart.SurfaceGui.Percent.Text ~= '100%' and Character do
                                    CannonCheck = false
                                    PipePause = true
                                    PlayerTp(v.Base.Position, 0, 4, 0)
                                    Heartbeat:Wait()
                                end
                            end
                        end
                    end
                    
                    if Workspace:FindFirstChild('KrakenCannon') then
                        Cannon = Workspace.KrakenCannon.PrimaryPart
                    else
                        Cannon = nil
                    end

                    if PipePause then
                        for i,v in pairs(Workspace:GetChildren()) do
                            if v.Name == 'KrakenPipe' then
                                if v:FindFirstChild('GuiPart') then
                                    if v.GuiPart.SurfaceGui.Percent.Text ~= '100%' then
                                        CannonCheck = true
                                    end
                                end
                            end
                        end
                        if not CannonCheck then
                            PipePause = false
                        end
                    end
                end
                task.wait()
            end     
        end)
    end

    -- Infinite Tower
    if InInfiniteTower and Toggles.Autofarm.Value then
        if Shared.Mobs.Mobs:FindFirstChild('Taurha') then Shared.Mobs.Mobs.Taurha:Destroy() end
        local tempt = {'Demon', 'MageOfShadows'}
        --if not table.find(tempt, Class) then
            MobTeleport()
        --end
        local FloorPart = game:GetService("Workspace").LobbyTeleport.Interaction
        local BossPart = game:GetService("Workspace").Boss_Gate.Interactions.Bounds
        task.spawn(function() 
            while Toggles.Autofarm.Value do
                BossPart.CanCollide = false
                BossPart.CFrame = CFrame.new(HumanoidRootPart.Position)
                FloorPart.CFrame = CFrame.new(HumanoidRootPart.Position)
                task.wait(0.25)
            end
        end)
        task.spawn(function() 
            while Toggles.Autofarm.Value do
                if ReplicatedStorage.ReplicateTowerFloor.Value - ReplicatedStorage.ReplicateTowerStartFloor.Value >= Options.completedInfiniteTowerFloors.Value and Toggles.restartAfterFloors.Value then
                    Library:Notify(ReplicatedStorage.ReplicateTowerFloor.Value - ReplicatedStorage.ReplicateTowerStartFloor.Value .. ' floors completed, restarting Infinite Tower!')
                    task.wait(1)
                    StartRaid(DungeonID)
                    break
                end
                task.wait()
            end
        end)
    end
end)



--reduce lag--
coroutine.wrap(function()
    workspace:WaitForChild("Mobs").ChildAdded:Connect(function(mob)
        mob:WaitForChild("HealthProperties"):WaitForChild("Health").Changed:Connect(function(val)
            if val == 0 then
                game:GetService("Debris"):AddItem(mob, 0.2)
            end
        end)
    end)

    local f = require(game.ReplicatedStorage:WaitForChild("Shared"):WaitForChild("Effects"))
    local old = f.DoEffect
    f.DoEffect = function(self, ...)
        local args = {...}
        if DungeonID and DungeonID == 27 and args[1] == "RadialIndicator" and Toggles.Autofarm.Value then
            args[5] = args[5] + 1 --make the indicators stay longer so that the autofarm has more time to dodge
            return old(self, unpack(args)) --at the same time don't apply NoEffects to them
        end
        return old(self, ...)
    end
end)()

-- Remove Mob attacks on client
local allowAllRemotesMobs = {
   
}
local mobSpecificAllowedRemotes = {
   
}
local universalAllowedRemotes = {

}
local mobSkills = game:GetService("ReplicatedStorage").Shared.Mobs.Mobs
for i,v in pairs(mobSkills:GetDescendants()) do
    if v:IsA('RemoteEvent') then
        local canDelete = true
        if v.Parent and table.find(allowAllRemotesMobs, v.Parent.Name) then
            canDelete = false
        end
        for i2,v2 in pairs(mobSpecificAllowedRemotes) do
            if table.find(v2, v.Name) and v.Parent and v.Parent.Name == i2 then
                canDelete = false
            end
        end
        if canDelete and table.find(universalAllowedRemotes, v.Name) then canDelete = false end 
        if canDelete then v:Destroy() end
    end
end
--and table.find(blockedList, v.Name) -- we will remove only the remotes in the table blockedlist in case removing all remotes breaks something



-- Killaura Functions
do

    -- Newer advanced getClosestMob
    function getClosestPointAndDistance(humanoidRootPart, targetPart)
        local function getClosestPointOnAABB(point, minBounds, maxBounds)
            -- Clamps the point to the AABB defined by minBounds and maxBounds
            local closestPoint = Vector3.new(
                math.clamp(point.X, minBounds.X, maxBounds.X),
                math.clamp(point.Y, minBounds.Y, maxBounds.Y),
                math.clamp(point.Z, minBounds.Z, maxBounds.Z)
            )
            return closestPoint
        end
    
        local function getBoundingBox(part)
            -- Get the min and max points of the bounding box of the part
            local size = part.Size
            local minBounds = part.Position - size / 2
            local maxBounds = part.Position + size / 2
            return minBounds, maxBounds
        end
    
        -- Get the position of the HumanoidRootPart
        local characterPosition = humanoidRootPart.Position
        
        -- Get the bounding box of the target part
        local minBounds, maxBounds = getBoundingBox(targetPart)
        
        -- Find the closest point on the bounding box to the character position
        local closestPoint = getClosestPointOnAABB(characterPosition, minBounds, maxBounds)
        
        -- Calculate the distance between the character and the closest point
        local distance = (closestPoint - characterPosition).Magnitude
        
        return distance, closestPoint
    end
    local ignoreIfNotAloneTbl = {
        'CorruptedGreaterTree',
    }
    function ignoreIfNotAlone(mobName)
        if MobCount and MobCount > 1 and table.find(ignoreIfNotAloneTbl, mobName) then return true end
    end
    function getClosestMob()
        local closestDistance = math.huge
        local closestMob = nil
        local closestPoint = nil
        local originDistance = nil
        local mobPos = nil
        local isBoss = nil
    
        for _, mob in pairs(workspace.Mobs:GetChildren()) do
            local primaryPart = mob.PrimaryPart
            if Character and primaryPart and mob:FindFirstChild('HealthProperties') and mob.HealthProperties:FindFirstChild('Health') and mob.HealthProperties.Health.Value > 0 then
                local distance, bestPoint = getClosestPointAndDistance(HumanoidRootPart, primaryPart)
                if distance < closestDistance and not ignoreIfNotAlone(mob.Name) then
                    closestDistance = distance
                    closestPoint = bestPoint
                    closestMob = primaryPart
                end
            end
        end

        local mobData, mobHealthProperty = closestMob and Mob(closestMob.Parent.Name), closestMob and closestMob.Parent.HealthProperties.Health
        if closestMob then mobPos = closestMob.Position; originDistance = (HumanoidRootPart.Position-mobPos).magnitude; isBoss = mobData and mobData['BossTag'] end
        
        return closestMob, closestPoint, mobPos, closestDistance, originDistance, isBoss, mobHealthProperty
    end

    function equipWepWithId(wepId, str)
        for i,v in pairs(Inventory:GetChildren()) do
            if v:FindFirstChild('ID') and v.ID.Value and v.ID.Value == wepId then 
                Shared.Inventory.EquipItem:FireServer(v, Primary); Library:Notify('Equipped ' .. items[v.Name].DisplayKey .. ' for' .. str) 
            break end
        end
    end

    -- TargetDummies to mobs folder
    if Workspace:FindFirstChild('TargetDummies') then
        for _, Dummy in pairs(Workspace.TargetDummies:GetChildren()) do
            Dummy.Parent = Mobs
        end
    end

    --[[Moving Players to mobs folder in pvp arena
    if game.PlaceId == 6510868181 then
        for _, Player in pairs(Workspace.Characters:GetChildren()) do
            if Player.Name ~= PlayerName then
                Player.Parent = Mobs
            end
        end
        Workspace.Characters.ChildAdded:Connect(function(Player)
            if Player.Name ~= PlayerName then
                Player.Parent = Mobs
            end
        end)
    end]]
end

Toggles.Killaura:OnChanged(function()
    local LifeSteal = Skillsets.Demon.LifeSteal
    lastAttackTime = tick()


-- LifeSteal Loop for demon
if InMission then
    if Class == 'Demon' then
        if not InAtlantis then
            local IgnoringMobs = false
            for i2,v2 in pairs(specialTargetingDungeons) do
                if DungeonID == v2.Id and v2.ignoreMob then
                    IgnoringMobs = true
                    task.spawn(function()
                        local mobWait
                        while Toggles.Killaura.Value do
                            for _, Mob in pairs(Mobs:GetChildren()) do
                                if Mob:FindFirstChild("HealthProperties") and Mob.HealthProperties.Health.Value > 0 then
                                    if not (Mob.Name == v2.ignoreMob) then
                                        lastAttackTime = tick()
                                        for i = 1, Options.LifeStealInterval.Value do
                                            LifeSteal:FireServer(table.create(3, Mob))
                                        end
                                    end
                                    if Mob.Name == v2.ignoreMob and MobCount and MobCount == 1 then
                                        if not mobWait then
                                            task.wait(3)
                                            mobWait = true
                                        end
                                        if MobCount == 1 then
                                            lastAttackTime = tick() 
                                            for i = 1, Options.LifeStealInterval.Value do
                                                LifeSteal:FireServer(table.create(3, Mob))
                                            end
                                        end
                                    end
                                end
                            end
                            task.wait(Options.KillauraDelay.Value)
                        end
                    end)
                end
            end
            if not IgnoringMobs then
                task.spawn(function()
                    while Toggles.Killaura.Value do
                        for _, Mob in pairs(Mobs:GetChildren()) do
                            if Mob:FindFirstChild("HealthProperties") and Mob.HealthProperties.Health.Value > 0 then
                                lastAttackTime = tick()
                                for i = 1, Options.LifeStealInterval.Value do
                                    LifeSteal:FireServer(table.create(3, Mob))
                                end
                            end
                        end
                        task.wait(Options.KillauraDelay.Value)
                    end
                end)
            end
        end
        if InAtlantis then
            task.spawn(function()
                while not Workspace:FindFirstChild('WaterFolder') and Toggles.Killaura.Value do
                        for _, Mob in pairs(Mobs:GetChildren()) do
                            if Mob:FindFirstChild("HealthProperties") and Mob.HealthProperties.Health.Value > 0 then
                                lastAttackTime = tick()
                                for i = 1, Options.LifeStealInterval.Value do
                                    LifeSteal:FireServer(table.create(3, Mob))
                                end
                            end
                        end
                    task.wait(Options.KillauraDelay.Value)
                end
                while Workspace:FindFirstChild('WaterFolder') and Toggles.Killaura.Value do
                    for _, Mob in pairs(Mobs:GetChildren()) do
                        if Mob:FindFirstChild("HealthProperties") and Mob.HealthProperties.Health.Value > 0 then
                            lastAttackTime = tick()
                            for i = 1, Options.LifeStealInterval.Value do
                                LifeSteal:FireServer(table.create(3, Mob))
                            end
                        end
                    end
                    task.wait(Options.KillauraDelay.Value)
                end
            end)
        end
    end
end

-- MageOfShadow
if Class == 'MageOfShadows' and Toggles.Killaura.Value and InMission then
    
    task.spawn(function()
        while Toggles.Killaura.Value do
            local attackTbl = {}
            local movingTbl = {}
            for _, Mob in pairs(Workspace.Mobs:GetChildren()) do
                local MeshPart = Mob.PrimaryPart
                if MeshPart and Mob:FindFirstChild('HealthProperties') and Mob.HealthProperties:FindFirstChild('Health') and Mob.HealthProperties.Health.Value > 0 then
                    local intervals = math.ceil(Mob.HealthProperties.Health.Value / (Options.shadowChainDmg.Value or 30000))
                    for i = 1,intervals do
                        table.insert(attackTbl, Mob)
                    end
                    table.insert(movingTbl, Mob)
                end
            end
            if #attackTbl > 0 then
                print('Launching Attack ' .. #attackTbl .. ' times')
                game:GetService("ReplicatedStorage").Shared.Combat.Skillsets.MageOfShadows.ShadowChains:FireServer(attackTbl)
                lastAttackTime = tick()
                for i,v in pairs(movingTbl) do
                    if v then v.Parent = mageOfShadowBodies end
                end
                task.wait(3)
            end
            task.wait()
        end
    end)
end

if true then
    return
end







    -- PerkSwitcher and Auto Equip Selected Mob/Boss Weapons
    task.spawn(function()
        while Toggles.Killaura.Value do
            if Toggles.PerkSwitcher.Value and mobRoot then
                local OffhandPerksOn = OffhandPerksActive()
                local OffhandPerkValue = nil
                local PrimaryPerkValue = nil
                if ClassData[Class].Offhand then
                    if isBoss then
                        if Offhand:FindFirstChild('Perk3',true) and Offhand:FindFirstChild('Perk3',true).Value == 'TestTier5' and not(OffhandPerksOn) then
                            OffhandPerkValue = Offhand:FindFirstChild('Perk3',true).PerkValue.Value
                            SwitchOffhandPerks(true)
                        elseif Primary:FindFirstChild('Perk3',true) and Primary:FindFirstChild('Perk3',true).Value == 'TestTier5' and OffhandPerksOn then
                            PrimaryPerkValue = Primary:FindFirstChild('Perk3',true).PerkValue.Value
                            if OffhandPerkValue and OffhandPerkValue < PrimaryPerkValue then
                                SwitchOffhandPerks(false)
                            elseif not OffhandPerkValue then
                                SwitchOffhandPerks(false)
                            end
                        end
                    elseif not isBoss then
                        if Offhand:FindFirstChild('Perk3',true) and Offhand:FindFirstChild('Perk3',true).Value == 'MobBoss' and not(OffhandPerksOn) then
                            OffhandPerkValue = Offhand:FindFirstChild('Perk3',true).PerkValue.Value
                            SwitchOffhandPerks(true)
                        elseif Primary:FindFirstChild('Perk3',true) and Primary:FindFirstChild('Perk3',true).Value == 'MobBoss' and OffhandPerksOn then
                            PrimaryPerkValue = Primary:FindFirstChild('Perk3',true).PerkValue.Value
                            if OffhandPerkValue and OffhandPerkValue < PrimaryPerkValue then
                                SwitchOffhandPerks(false)
                            elseif not OffhandPerkValue then
                                SwitchOffhandPerks(false)
                            end
                        end
                    end
                end
            end
            if mobRoot and plr.Character and plr.Character.PrimaryPart then
                local currentWep = Primary and Primary:GetChildren()[1]
                if currentWep and currentWep:FindFirstChild('ID') and currentWep.ID.Value then
                    local currentWepId = currentWep.ID.Value
                    local newMobWepId = Options.mobWepId.Value and #Options.mobWepId.Value > 2 and Options.mobWepId.Value
                    local newBossWepId = Options.bossWepId.Value and #Options.bossWepId.Value > 2 and Options.bossWepId.Value
                    if newMobWepId and not isBoss and currentWepId ~= newMobWepId then equipWepWithId(newMobWepId, ' Mobs!') end
                    if newBossWepId and isBoss and currentWepId ~= newBossWepId then equipWepWithId(newBossWepId, ' Bosses!') end 
                    task.wait(1)
                end
            end
            task.wait()
        end
    end)

    -- Main Killaura
    task.spawn(function()
        while Toggles.Killaura.Value do mobRoot, attackPos, mobPos, dist, originDist, isBoss, mobHp = getClosestMob()
            if mobRoot and Character and Character:FindFirstChild('Properties') and not (Character.Properties:GetAttribute('Mounted')) 
            and HealthProperties and HealthProperties:FindFirstChild('Health') and HealthProperties.Health.Value > 0 then
                for _, SkillData in pairs(ClassData[Class].Skills) do
                    local SkillType, Skill = (SkillData.MeleeOnBoss and isBoss and 'Melee' or SkillData.Type or ClassData[Class].Type), (SkillData.Skill)
                    local SkillRange = (SkillData.MeleeOnBoss and isBoss and SkillData.BossRange or SkillData.Range or ClassData[Class].Range)
                    local SkillCooldown, isRangedAndIsBoss = (SkillData.Cooldown + Options.KillauraDelay.Value), (SkillType == 'Ranged' and isBoss)
                    local attackingPoint, distance = (isRangedAndIsBoss and mobPos or dist > 0 and attackPos or mobPos), (isRangedAndIsBoss and originDist or dist)
                    if tick() - (SkillData.LastUsed or 0) >= SkillCooldown  then
                        if SkillType ~= 'Heal' and distance <= SkillRange and mobHp.Value > 0 then
                            if SkillType == 'Melee' then Attack:FireServer(Skill, hrp.Position, (attackingPoint-hrp.Position).Unit)
                            elseif SkillType == 'Ranged' then Attack:FireServer(Skill, attackingPoint)
                            elseif SkillType == 'Self' then Attack:FireServer(Skill, hrp.Position)
                            elseif SkillType == 'Remote' then
                                if SkillData.Args == 'MobPosition' then Skill:FireServer(mobPos) end
                                if SkillData.Args == 'mobTbl' then Skill:FireServer(table.create(1, mobRoot.Parent)) 
                                else Skill:FireServer() end
                            end
                            SkillData.LastUsed = tick(); lastAttackTime = tick() 
                        end
                        if SkillType == 'Heal' and HealthProperties.Health.Value/HealthProperties.MaxHealth.Value < 0.6 then
                            if SkillData.Args then Skill:FireServer(SkillData.Args) else Skill:FireServer() end SkillData.LastUsed = tick() 
                        end 
                    end
                end
            end task.wait()
        end
    end)

    -- MissionObjects moving to mobs folder
    if InMission and not MissionScripts:FindFirstChild(36) then
        task.spawn(function()
            while Toggles.Killaura.Value do
                for i,v in pairs(MissionObjects:GetChildren()) do
                    local child = v:FindFirstChild("HealthProperties", true)
                    if child and not table.find(ignoreObjects, child.Parent.Name) then print('Moved ' .. child.Parent.Name); child.Parent.Parent = Mobs end
                end 
                task.wait(0.1)
            end 
        end)    
    end

    -- Demon BloodBinding - disabled for now because it lowers health - TODO: make a toggle to enable it 
    if Class == 'Demon' and Toggles.Killaura.Value and BloodBindingEnabled then
        task.spawn(function()
            while Toggles.Killaura.Value do
                if not Character:FindFirstChild('AttackBuffDemonBloodBinding',true) 
                and BestMob and (BestMob.Position-HumanoidRootPart.Position).magnitude <= 95
                and Character:FindFirstChild('Properties') and not (Character.Properties:GetAttribute('Mounted')) 
                and HealthProperties:FindFirstChild('Health') and HealthProperties.Health.Value > 0 then
                    Skillsets.Demon.BloodBinding:FireServer()
                    lastAttackTime = tick()
                    task.wait(6)
                end
                task.wait()
            end
        end)
    end

    -- Summoner exploding summons and teleporting them to mobs which seems to be visual only but looks nice and gives a good placebo effect
    if Class == 'Summoner' and Toggles.Killaura.Value then
        task.spawn(function()
            while Toggles.Killaura.Value do
                for _, Mob in pairs(Mobs:GetChildren()) do
                    if Mob.Name == 'SummonerSummonWeak' or Mob.Name == 'SummonerSummonStrong' then
                        Mob.Parent = Workspace.SummonFolder
                    end
                end
                for _, Summon in pairs(Workspace.SummonFolder:GetChildren()) do
                    if mobRoot then
                        Summon.PrimaryPart.CFrame = CFrame.new(mobPos)
                    end
                    if Summon:FindFirstChild('HealthProperties') and Summon.HealthProperties:FindFirstChild('Health') and Summon.HealthProperties.Health.Value > 0
                    and Summon.HealthProperties.Health.Value/Summon.HealthProperties.MaxHealth.Value <= 0.25 then
                        Skillsets.Summoner.ExplodeSummons:FireServer()
                    end
                end
                Heartbeat:Wait()
            end
        end)
    end

    -- Dungeon restart timeout if no damage done in specified time minutes
    if InMission then
        task.spawn(function()
            while Toggles.Killaura.Value and not DungeonCompleted do
                if Toggles.Autofarm.Value and not Healing then
                    task.wait(0.5)
                    if tick()-lastAttackTime >= Options.timeoutTimer.Value then
                        local oldValue = Options.Offset.Value
                        Options.Offset:SetValue(0)
                        task.wait(3)
                        if tick()-lastAttackTime >= Options.timeoutTimer.Value then
                            Library:Notify('Timeout! Force restarting dungeon!')
                            StartRaid(DungeonID, DifficultyID)
                            break
                        else
                            Options.Offset:SetValue(oldValue)
                        end
                    end
                end
                task.wait(1)
            end
        end)
    end
end)

Toggles.CollectDrops:OnChanged(function()
    task.spawn(function()
        while Toggles.CollectDrops.Value do
            for Index, Coin in pairs(CoinTable) do
                Coin.model:Destroy()
                Coin.followPart:Destroy()
                table.remove(CoinTable, Index)
                CoinEvent:FireServer(Coin.id)
            end
            task.wait()
        end
    end)
end)

local f = require(game.ReplicatedStorage:WaitForChild("Shared"):WaitForChild("Effects"))
local DmgNum = f.RenderDamageNumber
Toggles.NVD:OnChanged(function()
    f.RenderDamageNumber = function(...)
        if Toggles.NVD.Value then
            return
        end
        return DmgNum(...)
    end
end)

Options.FastSprint:OnChanged(function()
    Settings.SPRINT_WALKSPEED = Options.FastSprint.Value
end)

-- UI Settings
local MenuGroup = Tabs['Settings']:AddLeftGroupbox('Menu')

MenuGroup:AddButton('Unload', function() Library:Unload() end)
MenuGroup:AddLabel('Menu bind'):AddKeyPicker('MenuKeybind', { Default = 'LeftAlt', NoUI = false, Text = 'Menu keybind' })

Library.ToggleKeybind = Options.MenuKeybind -- Allows you to have a custom keybind for the menu

-- Addons:
-- SaveManager (Allows you to have a configuration system)
-- ThemeManager (Allows you to have a menu theme system)

-- Hand the library over to our managers
ThemeManager:SetLibrary(Library)
SaveManager:SetLibrary(Library)

-- Ignore keys that are used by ThemeManager.
-- (we dont want configs to save themes, do we?)
SaveManager:IgnoreThemeSettings()

-- Adds our MenuKeybind to the ignore list
-- (do you want each config to have a different menu key? probably not.)
SaveManager:SetIgnoreIndexes({ 'MenuKeybind' })

-- use case for doing it this way:
-- a script hub could have themes in a global folder
-- and game configs in a separate folder per game
ThemeManager:SetFolder('MyScriptHub')
SaveManager:SetFolder('MyScriptHub')

-- Builds our config menu on the right side of our tab
SaveManager:BuildConfigSection(Tabs['Settings'])

-- Builds our theme menu (with plenty of built in themes) on the left side
-- NOTE: you can also call ThemeManager:ApplyToGroupbox to add it to a specific groupbox
ThemeManager:ApplyToTab(Tabs['Settings'])


-- You can use the SaveManager:LoadAutoloadConfig() to load a config
-- which has been marked to be one that auto loads!
if InMission then
    SaveManager:LoadAutoloadConfig()
    if DungeonID and MissionScripts:FindFirstChild(24) then
        if Options.Offset.Value > 45 then
            Options.Offset:SetValue(45)
            Library:Notify('Set offset value to 45 to avoid death')
        end
    end
end


if Toggles.autoHide.Value then task.wait(0.25); Library:Toggle() end

