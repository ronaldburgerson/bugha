if game.gameId ~= 985731078 then
    return
end
if not game:IsLoaded() then
    game.Loaded:Wait()
end
local DamageDebug = false -- DamageDebug
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Shared = ReplicatedStorage:WaitForChild('Shared')
local TeleportService = game:GetService('TeleportService')
local SafePart
local SafeZone
local Players = game:GetService('Players')
local LocalPlayer = Players.LocalPlayer or Players:GetPropertyChangedSignal('LocalPlayer'):Wait() or Players.LocalPlayer
local ownsDoubleDrop = game:GetService("MarketplaceService"):UserOwnsGamePassAsync(LocalPlayer.UserId, 8136250)
local VirtualUser = game:GetService('VirtualUser')
LocalPlayer.Idled:Connect(function()
    VirtualUser:CaptureController()
    VirtualUser:ClickButton2(Vector2.new())
end)
local PlayerName = LocalPlayer.Name
local WorldZeroID = 2727067538
local MissionStarted = false
local TowerIdleSpot
local KickTbl = {
    Kicked = false,
    CharacterID = false, 
    Dungeon = false,
    Difficulty = false,
}
if game.PlaceId ~= WorldZeroID then
    KickTbl.CharacterID = ReplicatedStorage:WaitForChild('Profiles'):WaitForChild(PlayerName):WaitForChild('GUID').Value
end 
local KickFilename = 'ExploitKickRejoin.txt'
local http = game:GetService("HttpService")
local Towers2 = {21,23,27,29,34,43,39,38, 44}
function save()
    local json
    if (writefile) then
        json = http:JSONEncode(KickTbl)
        writefile(KickFilename, json)
    end
end
function load()
    if (readfile and isfile and isfile(KickFilename)) then
        KickTbl = http:JSONDecode(readfile(KickFilename))
    end
end
local function sendError(v1,v2,v3)
    game.StarterGui:SetCore("SendNotification", {
    Title = v3 or "Infinite";
    Text = v1; 
    Duration = v2 or 4; 
    })
end
local guiService = game:GetService('GuiService')
guiService.ErrorMessageChanged:Once(function(msg)
    if guiService:GetErrorCode() == Enum.ConnectionError.DisconnectLuaKick or guiService:GetErrorCode() == Enum.ConnectionError.DisconnectConnectionLost then
        KickTbl.Kicked = true
        save()
        TeleportService:Teleport(WorldZeroID, LocalPlayer)
    end
end)
if game.PlaceId == WorldZeroID then
    load()
    if KickTbl.Kicked then
        local Play = Shared:WaitForChild('Teleport'):WaitForChild('JoinGame')
        while true do
            Play:FireServer(KickTbl.CharacterID)
            task.wait(1)
        end
    end
else
    load()
    if KickTbl.Kicked then
        KickTbl.Kicked = false
        save()
        if KickTbl.Dungeon then
            local JoinDungeon = Shared:WaitForChild('Teleport'):WaitForChild('StartRaid')
            while true do
                if table.find(Towers2, KickTbl.Dungeon) then
                    JoinDungeon:FireServer(KickTbl.Dungeon)
                else
                    JoinDungeon:FireServer(KickTbl.Dungeon, KickTbl.Difficulty)
                end
                task.wait(1)
            end
        end
    end
end 
local Gold = ReplicatedStorage:WaitForChild('Profiles'):WaitForChild(PlayerName):WaitForChild('Currency'):WaitForChild('Gold')
local OldGold = ReplicatedStorage:WaitForChild('Profiles'):WaitForChild(PlayerName):WaitForChild('Currency'):WaitForChild('Gold').Value
local NewGold = OldGold
local MissionObjects
local MissionScripts
local DungeonID
local DifficultyID = nil
local Towers = {21,23,27,29,34,43}
local InMission = false
local InDungeon = false
local InAtlantis = false
local InTower = false
local InInfiniteTower = false
local OldPosition
local TempCheck = false
if ReplicatedStorage:FindFirstChild("ActiveMission") then
    InMission = true
    MissionObjects = game:GetService("Workspace"):WaitForChild("MissionObjects")
    MissionScripts = ReplicatedStorage:WaitForChild("MissionScripts")
    DungeonID = ReplicatedStorage:WaitForChild("ActiveMission").Value
    KickTbl.Dungeon = ReplicatedStorage:WaitForChild("ActiveMission").Value
    if table.find(Towers, DungeonID) then
        InTower = true
    elseif DungeonID == 38 or DungeonID == 39 then
        InInfiniteTower = true
    else
        InDungeon = true
        DifficultyID = Shared.Missions.GetDifficulty:InvokeServer()
        KickTbl.Difficulty = Shared.Missions.GetDifficulty:InvokeServer()
    end  
    if DungeonID == 23 then
        InAtlantis = true
    end
end

local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait() or LocalPlayer.Character
local HumanoidRootPart = Character:WaitForChild('HumanoidRootPart')
local HealthProperties
while true do
    if game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild('HealthProperties') then
        HealthProperties = game.Players.LocalPlayer.Character.HealthProperties
        print('HealthProperties Found')
        break
    end
    task.wait()
end
task.spawn(function()
    while true do
        if not HealthProperties then
            print('HealthProperties disappeared')
            break
        end
        task.wait()
    end
end)
local HealthProperties = Character:WaitForChild('HealthProperties',10)
local KrakenArmCheck = true
local UserId = LocalPlayer.UserId
local MarketplaceService = game:GetService("MarketplaceService")
local CoinTable = debug.getupvalue(require(Shared.Drops).Start, 4)
local CoinEvent = Shared:WaitForChild('Drops'):WaitForChild('CoinEvent')
local Profile = ReplicatedStorage:WaitForChild("Profiles"):WaitForChild(PlayerName)
local Equip = Profile:WaitForChild('Equip')
local Primary = Equip:WaitForChild('Primary')
local Offhand = Equip:WaitForChild('Offhand')
local Upgrade = Shared:WaitForChild('ItemUpgrade'):WaitForChild('Upgrade')
local Characters = game:GetService("Workspace"):WaitForChild("Characters")
local Class1 = Profile:WaitForChild("Class")
local Class = Class1.Value
local GetMissionChest = Shared.Missions.GetMissionPrize
local Equipment = Character.Equipment
local Skillsets = Shared:WaitForChild('Combat'):WaitForChild('Skillsets')
local RangedClassRange = 60
local MeleeClassRange = 18
local UltimateDelay = 31
local MobCount
local MobCountNum
local ChestWait = 1
local ChestName = 'RaidChestSilver'
local ChestName2 = 'RaidChestGold'
local AtlantisBossCheck = false
local Attack = Shared:WaitForChild("Combat"):WaitForChild("Attack")   
local Mobs = game:GetService("Workspace"):FindFirstChild("Mobs")
local MobList = Shared.Mobs.Mobs
local function Mob(v1)
    return require(MobList[v1])
end
local function SwitchOffhandPerks(v1)
    Shared.Settings.OffhandPerksActive:FireServer(v1)
end
local BestMob
local DoubleDrop = 8136250
local TowerEnd = game:GetService("Players").LocalPlayer.PlayerGui:WaitForChild("TowerFinish").TowerFinish.Description
local Nightmares = {1005, 1006, 1007}
local Inventory = Profile:WaitForChild('Inventory'):WaitForChild('Items')
local MissionData = require(Shared.Missions.MissionData)
local items = require(Shared.Items)
local TowerDing = true
local AutoSellTbl = {}
local Settings = require(Shared:WaitForChild('Settings'))
local ProfileSettings = Profile:WaitForChild('Settings')
local PausePos
local Heartbeat = game:GetService('RunService').Heartbeat
local function OffhandPerksActive()
    return ProfileSettings:GetAttribute('OffhandPerksActive')
end
function StartRaid(v1,v2)
    Shared:WaitForChild('Teleport'):WaitForChild('StartRaid'):FireServer(v1, v2)
end
local tier = require(Shared.Inventory)
Class1:GetPropertyChangedSignal("Value"):Connect(function()
    Class = Class1.Value
end)
LocalPlayer.CharacterAdded:Connect(function(NewCharacter)
    print('New Character Added')
    Character = NewCharacter
    HumanoidRootPart = Character:WaitForChild('HumanoidRootPart')
    HealthProperties = Character:WaitForChild('HealthProperties')
    Equipment = Character:WaitForChild('Equipment')
end)
local dungeonTime = 0
Shared.Missions.MissionStart.OnClientEvent:Once(function()
    MissionStarted = true
    task.spawn(function()
		while bigboo == true do
			task.wait(1)
			count += 10
		end
	end)
end)
--if MarketplaceService:UserOwnsGamePassAsync(UserId, DoubleDrop) then
--    ChestName = 'lol'
--end
local checkpointTbl = {
    'Checkpoint1', 
    'Checkpoint2', 
    'Checkpoint3', 
    'Checkpoint4', 
    'Checkpoint5', 
    'Checkpoint6', 
    'Checkpoint7', 
    'Checkpoint8',
    'Checkpoint9',
    'Checkpoint10',   
    'CutsceneTrigger', 
    'Main', 
    'CaveTrigger',
    'BossIntroTrigger',
    'TownTalkPart',
    'BridgeTrigger',
    'BoulderTrigger',
    'BoulderStopTrigger',
    'Cage1Marker',
    'Cage2Marker',
    'CannonTrigger',
    'CastleTrigger',
    'WallsCheckpoint',
    'HammerReset1',
    'WallsTrigger',
    'WallsFinalTrigger',
    'Room1Trigger',
    'Room2Trigger',
    'Room3Trigger',
    'Room4Trigger',
    'Room5Trigger',
    'Room6Trigger',
    'TreasureMarker',
    'NextCheckpointTrigger',
    'TempleTrigger',
    'PreBridgeTrigger',
    'CheckpointTriggers',
    'CaveSpawnTrigger',
    'CliffsideEndTrigger',
    'VineRoomTrigger',
    'CheckpointTrigger',
    'ObbyTrigger',
    'BossTrigger',
    'DropTrigger',
    'CastleGateTrigger',
    'SceneTrigger',
    'OutsideBossTrigger',
    'Area1Trigger',
    'Area2Trigger',
    'Area3Trigger',
    'FinishRing',
    'StartWaveDefense',
    'Trigger1',
    'Trigger2',
    'Trigger3',
    'BossCutsceneTrigger',
    'FloorTrigger',
    'BossCutscene',
    'BottomElevatorTrigger',
    'MiddleElevatorTrigger',
    'TopElevatorTrigger',
    'ObbyTrigger5',
}
local ignoreObjects = {
    'Scarecrow1', 
    'Scarecrow2', 
    'Scarecrow3', 
}
local mobIgnoreTbl = {
    DireProblem = { Id = 2, ignoreMob = 'BOSSDireBoarwolf' },
    GravetowerDungeon = { Id = 6, ignoreMob = 'BOSSTreeEnt' },
    RoughWaters = {Id = 25, ignoreMob = 'DavyJones'},
    VolcanosShadow = { Id = 13, ignoreMob = 'BOSSCerberus' },
    KonoHeartlands = { Id = 24, ignoreMob = 'CorruptedGreaterTree' },
    AetherFortress = { Id = 33, ignoreMob = 'BOSSTreeEnt' },
    MamaTrauma = { Id = 12, ignoreMob = 'BOSSMamaQuillodile' },
    TheUnderworld = { Id = 26, ignoreMob = 'HadesCerberus' },
}
local TotalWorlds = 15
local WorldData = {
    World1 = { Name = 'World 1', Id = 13, OrderId = 1 },
    World2 = { Name = 'World 2', Id = 19, OrderId = 2 },
    World3 = { Name = 'World 3', Id = 20, OrderId = 3 },
    World4 = { Name = 'World 4', Id = 29, OrderId = 4 },
    World5 = { Name = 'World 5', Id = 31, OrderId = 5 },
    World6 = { Name = 'World 6', Id = 36, OrderId = 6 },
    World7 = { Name = 'World 7', Id = 40, OrderId = 7 },
    World8 = { Name = 'World 8', Id = 45, OrderId = 8 },
    World9 = { Name = 'World 9', Id = 49, OrderId = 9 },
    World10 = { Name = 'World 10', Id = 56, OrderId = 10},
    TradingHub = { Name = 'Cliffside Marketplace', Id = 44, OrderId = 11 },
    PvpArena = { Name = 'Pvp Arena', Id = 39, OrderId = 12 },
    Baseplate = { Name = 'Baseplate', Id = 26, OrderId = 13 },
    --ChristmasHub = { Name = 'Holiday Village', Id = 24, OrderId = 14},
    --HalloweenHub = { Name = 'Spooky Courtyard', Id = 33, OrderId = 15},
    DragonTown = { Name = 'Dragon Town', Id = 65, OrderId = 14 },
}
local nextDungeonTbl = {1,3,2,4,6,11,12,13,7,14,15,16,20,19,18,24,35,21,25,36,23,26,37,27,30,31,29,32,33,34,41,42,43,1005,1006,1007,39,38}
local DungeonData = {
	--World 1--
	{ Id = 1, Name = "Crabby Crusade", World = 1, Code = '1-1' },
	{ Id = 3, Name = "Scarecrow Defense", World = 1, Code = '1-2' },
	{ Id = 2, Name = "Dire Problem", World = 1, Code = '1-3' },
	{ Id = 4, Name = "Kingslayer", World = 1, Code = '1-4' },
	--{ Id = 5, Name = "Night of the Dead", World = 1 },
	{ Id = 6, Name = "Gravetower Dungeon", World = 1, Code = '1-5' },
	
	--World 2--
	{ Id = 11, Name = "Temple of Ruin", World = 2, Code = '2-1' },
	{ Id = 12, Name = "Mama Trauma", World = 2, Code = '2-2' },
	{ Id = 13, Name = "Volcano's Shadow", World = 2, Code = '2-3' },
	{ Id = 7, Name = "Volcano Dungeon", World = 2, Code = '2-4', MobCount = 63 },
	
	--World 3--
	{ Id = 14, Name = "Mountain Pass", World = 3, Code = '3-1' },
	{ Id = 15, Name = "Winter Cavern", World = 3, Code = '3-2' },
	{ Id = 16, Name = "Winter Dungeon", World = 3, Code = '3-3' },
	
	--World 4--
	{ Id = 20, Name = "Scrap Canyon", World = 4, Code = '4-1', MobCount = 58 },
	{ Id = 19, Name = "Deserted Burrowmine", World = 4, Code = '4-2' },
	{ Id = 18, Name = "Pyramid Dungeon", World = 4, Code = '4-3' },

	--World 5--
	{ Id = 24, Name = "Konoh Heartlands", World = 5, Code = '5-1' },
	{ Id = 35, Name = "Konoh Inferno", World = 5, Code = '5-2', MobCount = 44 },
	{ Id = 21, Name = "Prison Tower", World = 5, Code = 'Tower 1' }, --:omegalul:

	--World 6--
	{ Id = 25, Name = "Rough Waters", World = 6, Code = '6-1' },
	{ Id = 36, Name = "Treasure Hunt", World = 6, Code = '6-2' },
	{ Id = 23, Name = "Atlantis Tower", World = 6, Code = 'Tower 2' },

	--World 7--
	{ Id = 26, Name = "The Underworld", World = 7, Code = '7-1' },
	{ Id = 37, Name = "The Labyrinth", World = 7, Code = '7-2' },
	{ Id = 27, Name = "Mezuvian Tower", World = 7, Code = 'Tower 3' },

	--World 8--
	{ Id = 30, Name = "Rescue In The Ruins", World = 8, Code = '8-1' },
	{ Id = 31, Name = "Ruin Rush", World = 8, Code = '8-2' },
	{ Id = 29, Name = "Oasis Tower", World = 8, Code = 'Tower 4' },

	--World 9--
	{ Id = 32, Name = "Treetop Trouble", World = 9, Code = '9-1' },
	{ Id = 33, Name = "Aether Fortress", World = 9, Code = '9-2', MobCount = 39 },
	{ Id = 34, Name = "Aether Tower", World = 9, Code = 'Tower 5' },

    --World 10--
	{ Id = 41, Name = "Crystal Chaos", World = 10, Code = '10-1' },
	{ Id = 42, Name = "Astral Academy", World = 10, Code = '10-2' },
	{ Id = 43, Name = "Arcane Tower", World = 10, Code = 'Tower 6' },

	--Special--
	{ Id = 22, Name = "Haunted Event", World = "Spooky Courtyard" },
	{ Id = 17, Name = "Klaus Factory", World = "Holiday Village" },
    { Id = 38, Name = "Infinite Tower" },
    { Id = 39, Name = "Celestial Tower" },
    { Id = 40, Name = "Daily Dungeon" },
    { Id = 44, Name = "Vane's Lair" },
}

local ClassData = {
    Assassin = {
        Range = 12,
        Type = 'Melee',
        Primary = 'Longsword',
        Offhand = 'Longsword',
        Skills = {
            { Skill = 'Assassin1', Cooldown = 0.26 },
            { Skill = 'Assassin2', Cooldown = 0.26 },
            { Skill = 'Assassin3', Cooldown = 0.26 },
            { Skill = 'Assassin4', Cooldown = 0.26 },
            { Skill = 'Assassin5', Cooldown = 0.26 },
            { Skill = 'Assassin6', Cooldown = 0.26 },
            { Skill = 'Assassin7', Cooldown = 0.26 },
            { Skill = 'Assassin8', Cooldown = 0.26 },
            { Skill = 'ShadowLeap', Cooldown = 3.1, Range = 11 },
            { Skill = 'ShadowSlash1', Cooldown = 6.1, Range = 15 },
            { Skill = 'ShadowSlash2', Cooldown = 6.1, Range = 15 },
            { Skill = Skillsets:WaitForChild('Assassin'):WaitForChild('EventStealthWalk'), Cooldown = 7.1, Type = 'Remote' },
            { Skill = Skillsets:WaitForChild('Assassin'):WaitForChild('Ultimate'), Cooldown = 1, Type = 'Remote' },
            { Skill = 'RealmOfShadows', Cooldown = 31, Type = 'Ranged', Range = 54 },
            { Skill = 'ShadowMulti1', Cooldown = 31, Type = 'Ranged', Range = 54 },
            { Skill = 'ShadowMulti2', Cooldown = 31, Type = 'Ranged', Range = 54 },
            { Skill = 'ShadowMulti3', Cooldown = 31, Type = 'Ranged', Range = 54 },
            { Skill = 'ShadowMulti4', Cooldown = 31, Type = 'Ranged', Range = 54 },
            { Skill = 'ShadowMulti5', Cooldown = 31, Type = 'Ranged', Range = 54 }
        }
    },

    MageOfLight = {
        Range = 96,
        Type = 'Ranged',
        Primary = 'Staff',
        Skills = {
            { Skill = 'MageOfLight', Cooldown = 0.28 },
            { Skill = 'MageOfLightBlast', Cooldown = 0.33 },
            { Skill = 'MageOfLightCharged', Cooldown = 0.33 },
            { Skill = 'MageOfLightBlastCharged', Cooldown = 0.33 },
            { Skill = Skillsets:WaitForChild('MageOfLight'):WaitForChild('HealCircle'), Cooldown = 14.2, Type = 'Heal' },
            { Skill = Skillsets:WaitForChild('MageOfLight'):WaitForChild('Barrier'), Args = LocalPlayer, Cooldown = 15.2, Type = 'Heal' },
            { Skill = Skillsets:WaitForChild('MageOfLight'):WaitForChild('Ultimate'), Cooldown = 1, Type = 'Heal' }
        }
    },

    Warlord = {
        Range = 14,
        Type = 'Ranged',
        Primary = 'Greataxe',
        Offhand = 'Shield',
        Skills = {
            { Skill = 'Warlord1', Cooldown = 0.12, Type = 'Melee' },
            { Skill = 'Warlord2', Cooldown = 0.12, Type = 'Melee' },
            { Skill = 'Warlord3', Cooldown = 0.12, Type = 'Melee' },
            { Skill = 'Warlord4', Cooldown = 0.12, Type = 'Melee' },
            { Skill = 'ChainsOfWar', Cooldown = 1.1, Range = 66 },
            { Skill = 'BlockingWarlord', Cooldown = 3.2, Range = 17 },
            { Skill = 'Piledriver1', Cooldown = 5.5, Range = 10 },
            { Skill = 'Piledriver2', Cooldown = 5.5, Range = 10 },
            { Skill = 'Piledriver3', Cooldown = 5.5, Range = 10 },
            { Skill = 'WarlordUltimate1', Cooldown = 31, Range = 55 },
            { Skill = 'WarlordUltimate2', Cooldown = 31, Range = 55 },
            { Skill = 'WarlordUltimate3', Cooldown = 31, Range = 55 },
            { Skill = 'WarlordUltimate4', Cooldown = 31, Range = 55 },
            { Skill = 'WarlordUltimate5', Cooldown = 31, Range = 55 }
         }
    },

    Paladin = {
        Range = 14,
        Type = 'Melee',
        Primary = 'Longsword',
        Offhand = 'Shield',
        Skills = {
            { Skill = 'Blocking', Cooldown = 0.37, Range = 9 },
            { Skill = 'Paladin1', Cooldown = 0.52 },
            { Skill = 'Paladin2', Cooldown = 0.52 },
            { Skill = 'Paladin3', Cooldown = 0.52 },
            { Skill = 'Paladin4', Cooldown = 0.52 },
            { Skill = 'LightPaladin1', Cooldown = 0.52, Range = 19 },
            { Skill = 'LightPaladin3', Cooldown = 0.52, Range = 19 },
            { Skill = 'LightPaladin4', Cooldown = 0.52, Range = 19 },
            { Skill = 'LightThrust1', Cooldown = 9, Range = 19 },
            { Skill = 'LightThrust2', Cooldown = 9, Range = 19 },
            { Skill = Skillsets:WaitForChild('Paladin'):WaitForChild('GuildedLight'), Cooldown = 15.2, Type = 'Heal' }
         }
    },

    Berserker = {
        Range = 14,
        Type = 'Melee',
        Primary = 'Greataxe',
        Offhand = 'Greataxe',
        Skills = {
            { Skill = 'Berserker1', Cooldown = 0.52 },
            { Skill = 'Berserker2', Cooldown = 0.52 },
            { Skill = 'Berserker3', Cooldown = 0.52 },
            { Skill = 'Berserker4', Cooldown = 0.52 },
            { Skill = 'Berserker5', Cooldown = 0.52 },
            { Skill = 'Berserker6', Cooldown = 0.52 },
            { Skill = 'AggroSlam', Cooldown = 5.2, Range = 17 },
            { Skill = 'GigaSpin1', Cooldown = 7.2, Range = 16 },
            { Skill = 'GigaSpin2', Cooldown = 7.2, Range = 16 },
            { Skill = 'GigaSpin3', Cooldown = 7.2, Range = 16 },
            { Skill = 'GigaSpin4', Cooldown = 7.2, Range = 16 },
            { Skill = 'GigaSpin5', Cooldown = 7.2, Range = 16 },
            { Skill = 'GigaSpin6', Cooldown = 7.2, Range = 16 },
            { Skill = 'GigaSpin7', Cooldown = 7.2, Range = 16 },
            { Skill = 'GigaSpin8', Cooldown = 7.2, Range = 16 },
            { Skill = 'Fissure1', Cooldown = 10.2, Range = 9 },
            { Skill = 'Fissure2', Cooldown = 10.2, Range = 9 },
            { Skill = 'FissureErupt1', Cooldown = 10.2, Range = 9 },
            { Skill = 'FissureErupt2', Cooldown = 10.2, Range = 9 },
            { Skill = 'FissureErupt3', Cooldown = 10.2, Range = 9 },
            { Skill = 'FissureErupt4', Cooldown = 10.2, Range = 9 },
            { Skill = 'FissureErupt5', Cooldown = 10.2, Range = 9 },
            { Skill = 'FissureErupt6', Cooldown = 10.2, Range = 9 },
            { Skill = 'FissureErupt7', Cooldown = 10.2, Range = 9 },
            { Skill = 'FissureErupt8', Cooldown = 10.2, Range = 9 },
            { Skill = Skillsets:WaitForChild('Berserker'):WaitForChild('Ultimate'), Cooldown = 1, Type = 'Remote' },
        },
    },

    Guardian = {
        Range = 18,
        Type = 'Ranged',
        Primary = 'Greatsword',
        Skills = {
            { Skill = 'Guardian1', Cooldown = 0.62, Type = 'Melee' },
            { Skill = 'Guardian2', Cooldown = 0.62, Type = 'Melee' },
            { Skill = 'Guardian3', Cooldown = 0.62, Type = 'Melee' },
            { Skill = 'Guardian4', Cooldown = 0.62, Type = 'Melee' },
            { Skill = 'RockSpikes1', Cooldown = 6.2, Range = 29 },
            { Skill = 'RockSpikes2', Cooldown = 6.2, Range = 31 },
            { Skill = 'RockSpikes3', Cooldown = 6.2, Range = 33 },
            { Skill = 'SlashFury1', Cooldown = 8.2, Range = 26 },
            { Skill = 'SlashFury2', Cooldown = 8.2, Range = 26 },
            { Skill = 'SlashFury3', Cooldown = 8.2, Range = 26 },
            { Skill = 'SlashFury4', Cooldown = 8.2, Range = 26 },
            { Skill = 'SlashFury5', Cooldown = 8.2, Range = 26 },
            { Skill = 'SlashFury6', Cooldown = 8.2, Range = 26 },
            { Skill = 'SlashFury7', Cooldown = 8.2, Range = 26 },
            { Skill = 'SlashFury8', Cooldown = 8.2, Range = 26 },
            { Skill = Skillsets:WaitForChild('Guardian'):WaitForChild('AggroDraw'), Cooldown = 14.5, Type = 'Remote' },
            { Skill = 'SwordPrison1', Cooldown = 31, Range = 94 },
            { Skill = 'SwordPrison2', Cooldown = 31, Range = 94 },
            { Skill = 'SwordPrison3', Cooldown = 31, Range = 94 },
            { Skill = 'SwordPrison4', Cooldown = 31, Range = 94 },
            { Skill = 'SwordPrison5', Cooldown = 31, Range = 94 },
            { Skill = 'SwordPrison6', Cooldown = 31, Range = 94 },
            { Skill = 'SwordPrison7', Cooldown = 31, Range = 94 },
            { Skill = 'SwordPrison8', Cooldown = 31, Range = 94 },
            { Skill = 'SwordPrison9', Cooldown = 31, Range = 94 },
            { Skill = 'SwordPrison10', Cooldown = 31, Range = 94 },
            { Skill = 'SwordPrison11', Cooldown = 31, Range = 94 },
            { Skill = 'SwordPrison12', Cooldown = 31, Range = 94 }
        }
    },

    Demon = {
        Range = 10,
        Type = 'Melee',
        Primary = 'Scythe',
        Skills = {
            --{ Skill = 'Demon1', Cooldown = 0.85 },
            --{ Skill = 'Demon2', Cooldown = 0.85 },
            --{ Skill = 'Demon3', Cooldown = 0.85 },
            --{ Skill = 'Demon4', Cooldown = 1.2 },
            --{ Skill = 'Demon5', Cooldown = 1.2 },
            --{ Skill = 'Demon6', Cooldown = 1.2 },
            --{ Skill = 'Demon7', Cooldown = 1.5 },
            --{ Skill = 'Demon8', Cooldown = 1.5 },
            --{ Skill = 'Demon9', Cooldown = 1.5 },
            --{ Skill = 'Demon10', Cooldown = 1.85 },
            --{ Skill = 'Demon11', Cooldown = 1.85 },
            --{ Skill = 'Demon12', Cooldown = 1.85 },
            --{ Skill = 'Demon13', Cooldown = 2.15 },
            --{ Skill = 'Demon14', Cooldown = 2.15 },
            --{ Skill = 'Demon15', Cooldown = 2.15 },
            --{ Skill = 'Demon16', Cooldown = 2.55 },
            --{ Skill = 'Demon17', Cooldown = 2.55 },
            --{ Skill = 'Demon18', Cooldown = 2.55 },
            --{ Skill = 'Demon19', Cooldown = 2.85 },
            --{ Skill = 'Demon20', Cooldown = 2.85 },
            --{ Skill = 'Demon21', Cooldown = 2.85 },
            --{ Skill = 'Demon22', Cooldown = 3.2 },
            --{ Skill = 'Demon23', Cooldown = 3.2 }, 
            --{ Skill = 'Demon24', Cooldown = 3.2 }, 
            --{ Skill = 'Demon25', Cooldown = 3.5 }, 
            --{ Skill = 'Demon26', Cooldown = 3.5 }, 
            --{ Skill = 'Demon27', Cooldown = 3.5 }, 
           -- { Skill = 'DemonDPS1', Cooldown = 0.85, Range = 12 },
            --{ Skill = 'DemonDPS2', Cooldown = 1.2, Range = 12 },
            --{ Skill = 'DemonDPS3', Cooldown = 1.5, Range = 12 },
            --{ Skill = 'DemonDPS4', Cooldown = 1.85, Range = 12 },
            --{ Skill = 'DemonDPS5', Cooldown = 2.15, Range = 12 },
            --{ Skill = 'DemonDPS6', Cooldown = 2.55, Range = 12 },
            --{ Skill = 'DemonDPS7', Cooldown = 2.9, Range = 12 },
            --{ Skill = 'DemonDPS8', Cooldown = 3.3, Range = 12 },
            --{ Skill = 'DemonDPS9', Cooldown = 3.6, Range = 12 },
            --{ Skill = 'ScytheThrowDPS1', Cooldown = 5.5, Type = 'Ranged', Range = 71 },
            --{ Skill = 'ScytheThrowDPS2', Cooldown = 5.5, Type = 'Ranged', Range = 71 },
            --{ Skill = 'ScytheThrowDPS3', Cooldown = 5.5, Type = 'Ranged', Range = 71 },
            --{ Skill = 'ScytheThrow1', Cooldown = 5.5, Type = 'Ranged', Range = 88 },
            --{ Skill = 'ScytheThrow2', Cooldown = 5.5, Type = 'Ranged', Range = 88 },
            --{ Skill = 'ScytheThrow3', Cooldown = 5.5, Type = 'Ranged', Range = 88 },
            --{ Skill = 'ScytheThrow4', Cooldown = 5.5, Type = 'Ranged', Range = 88 },
            --{ Skill = 'ScytheThrow5', Cooldown = 5.5, Type = 'Ranged', Range = 88 },
            --{ Skill = 'ScytheThrow6', Cooldown = 5.5, Type = 'Ranged', Range = 88 },
            --{ Skill = 'ScytheThrow7', Cooldown = 5.5, Type = 'Ranged', Range = 88 },
            --{ Skill = 'ScytheThrow8', Cooldown = 5.5, Type = 'Ranged', Range = 88 },
            --{ Skill = 'DemonLifeStealDPS', Cooldown = 8.2, Type = 'Ranged', Range = 56 },
            --{ Skill = Skillsets:WaitForChild('Demon'):WaitForChild('BloodBinding'), Cooldown = 7.2, Type = 'Remote' },
            --{ Skill = Skillsets:WaitForChild('Demon'):WaitForChild('Ultimate'), Cooldown = 1, Type = 'Remote' },
            --{ Skill = 'DemonSoulDPS1', Cooldown = 31, Type = 'Ranged', Range = 26 },
            --{ Skill = 'DemonSoulDPS2', Cooldown = 31, Type = 'Ranged', Range = 26 },
            --{ Skill = 'DemonSoulDPS3', Cooldown = 31, Type = 'Ranged', Range = 26 }
        }
    },

    Swordmaster = {
        Range = 12,
        Type = 'Melee',
        Primary = 'Longsword',
        Skills = {
            { Skill = 'Swordmaster1', Cooldown = 0.34 },
            { Skill = 'Swordmaster2', Cooldown = 0.34 },
            { Skill = 'Swordmaster3', Cooldown = 0.34 },
            { Skill = 'Swordmaster4', Cooldown = 0.34 },
            { Skill = 'Swordmaster5', Cooldown = 0.34 },
            { Skill = 'Swordmaster6', Cooldown = 0.34 },
            { Skill = 'CrescentStrike1', Cooldown = 5.2 },
            { Skill = 'CrescentStrike2', Cooldown = 5.2 },
            { Skill = 'CrescentStrike3', Cooldown = 5.2 },
            { Skill = 'CrescentStrike4', Cooldown = 5.2 },
            { Skill = 'CrescentStrike5', Cooldown = 5.2 },
            { Skill = 'Leap', Cooldown = 8.2, Range = 14 }
        }
    },

    Mage = {
        Range = 62,
        Type = 'Ranged',
        Primary = 'Staff',
        Skills = {
            { Skill = 'Mage1', Cooldown = 0.33 },
            { Skill = 'Mage2', Cooldown = 0.33 },
            { Skill = 'Mage3', Cooldown = 0.33 },
            { Skill = 'ArcaneBlast', Cooldown = 5.2, Range = 42 },
            { Skill = 'ArcaneBlastAOE', Cooldown = 5.2, Range = 42 },
            { Skill = 'ArcaneWave1', Cooldown = 8.2, Range = 36 },
            { Skill = 'ArcaneWave2', Cooldown = 8.2, Range = 36 },
            { Skill = 'ArcaneWave3', Cooldown = 8.2, Range = 36 },
            { Skill = 'ArcaneWave4', Cooldown = 8.2, Range = 36 },
            { Skill = 'ArcaneWave5', Cooldown = 8.2, Range = 36 },
            { Skill = 'ArcaneWave6', Cooldown = 8.2, Range = 36 },
            { Skill = 'ArcaneWave7', Cooldown = 8.2, Range = 36 },
            { Skill = 'ArcaneWave8', Cooldown = 8.2, Range = 36 },
            { Skill = 'ArcaneWave9', Cooldown = 8.2, Range = 36 },
            { Skill = 'ArcaneWave10', Cooldown = 8.2, Range = 36 },
            { Skill = 'ArcaneWave11', Cooldown = 8.2, Range = 36 },
            { Skill = 'ArcaneWave12', Cooldown = 8.2, Range = 36 }
        }
    },

    Defender = {
        Range = 12,
        Type = 'Melee',
        Primary = 'Greataxe',
        Skills = {
            { Skill = 'Defender1', Cooldown = 0.66 },
            { Skill = 'Defender2', Cooldown = 0.66 },
            { Skill = 'Defender3', Cooldown = 0.66 },
            { Skill = 'Defender4', Cooldown = 0.66 },
            { Skill = 'Defender5', Cooldown = 0.66 },
            { Skill = 'Groundbreaker', Cooldown = 5.1, Range = 9 },
            { Skill = 'Spin1', Cooldown = 8.1, Range = 10 },
            { Skill = 'Spin2', Cooldown = 8.1, Range = 10 },
            { Skill = 'Spin3', Cooldown = 8.1, Range = 10 },
            { Skill = 'Spin4', Cooldown = 8.1, Range = 10 }
        }
    },

    DualWielder = {
        Range = 12,
        Type = 'Melee',
        Primary = 'Longsword',
        Offhand = 'Longsword',
        Skills = {
            { Skill = 'DualWield1', Cooldown = 0.55 },
            { Skill = 'DualWield2', Cooldown = 0.55 },
            { Skill = 'DualWield3', Cooldown = 0.55 },
            { Skill = 'DualWield4', Cooldown = 0.55 },
            { Skill = 'DualWield5', Cooldown = 0.75 },
            { Skill = 'DualWield6', Cooldown = 0.75 },
            { Skill = 'DualWield7', Cooldown = 0.75 },
            { Skill = 'DualWield8', Cooldown = 0.75 },
            { Skill = 'DualWield9', Cooldown = 0.75 },
            { Skill = 'DualWield10', Cooldown = 0.75 },
            { Skill = Skillsets:WaitForChild('DualWielder'):WaitForChild('AttackBuff'), Cooldown = 12.2, Type = 'Remote' },
            { Skill = 'DashStrike', Cooldown = 6.2 },
            { Skill = 'CrossSlash1', Cooldown = 8.2, Type = 'Ranged', Range = 47 },
            { Skill = 'CrossSlash2', Cooldown = 8.2, Type = 'Ranged', Range = 47 },
            { Skill = 'CrossSlash3', Cooldown = 8.2, Type = 'Ranged', Range = 47 },
            { Skill = 'CrossSlash4', Cooldown = 8.2, Type = 'Ranged', Range = 47 },
            { Skill = 'CrossSlash5', Cooldown = 8.2, Type = 'Ranged', Range = 47 },
            { Skill = 'CrossSlash6', Cooldown = 8.2, Type = 'Ranged', Range = 47 },
            { Skill = 'CrossSlash7', Cooldown = 8-2, Type = 'Ranged', Range = 47 },
            { Skill = 'CrossSlash8', Cooldown = 8.2, Type = 'Ranged', Range = 47 },
            { Skill = 'CrossSlash9', Cooldown = 8.2, Type = 'Ranged', Range = 47 },
            { Skill = 'CrossSlash10', Cooldown = 8.2, Type = 'Ranged', Range = 47 },
            { Skill = Skillsets:WaitForChild('DualWielder'):WaitForChild('Ultimate'), Cooldown = 31, Type = 'Remote' },
            { Skill = 'DualWieldUltimateHit1', Cooldown = 31 },
            { Skill = 'DualWieldUltimateHit2', Cooldown = 31 },
            { Skill = 'DualWieldUltimateHit3', Cooldown = 31 },
            { Skill = 'DualWieldUltimateHit4', Cooldown = 31 },
            { Skill = 'DualWieldUltimateHit5', Cooldown = 31 },
            { Skill = 'DualWieldUltimateHit6', Cooldown = 31 },
            { Skill = 'DualWieldUltimateHit7', Cooldown = 31 },
            { Skill = 'DualWieldUltimateHit8', Cooldown = 31 },
            { Skill = 'DualWieldUltimateSlam', Cooldown = 31, Type = 'Ranged', Range = 17 },
            { Skill = 'DualWieldUltimateSlam1', Cooldown = 31, Type = 'Ranged', Range = 17 },
            { Skill = 'DualWieldUltimateSlam2', Cooldown = 31, Type = 'Ranged', Range = 17 },
            { Skill = 'DualWieldUltimateSlam3', Cooldown = 31, Type = 'Ranged', Range = 17 },
            { Skill = 'DualWieldUltimateSword1', Cooldown = 31, Type = 'Ranged', Range = 17 },
            { Skill = 'DualWieldUltimateSword2', Cooldown = 31, Type = 'Ranged', Range = 17 },
            { Skill = 'DualWieldUltimateSword3', Cooldown = 31, Type = 'Ranged', Range = 17 },
            { Skill = 'DualWieldUltimateSword4', Cooldown = 31, Type = 'Ranged', Range = 17 },
            { Skill = 'DualWieldUltimateSword5', Cooldown = 31, Type = 'Ranged', Range = 17 },
            { Skill = 'DualWieldUltimateSword6', Cooldown = 31, Type = 'Ranged', Range = 17 },
            { Skill = 'DualWieldUltimateSword7', Cooldown = 31, Type = 'Ranged', Range = 17 },
            { Skill = 'DualWieldUltimateSword8', Cooldown = 31, Type = 'Ranged', Range = 17 },
            { Skill = 'DualWieldUltimateSword9', Cooldown = 31, Type = 'Ranged', Range = 17 },
            { Skill = 'DualWieldUltimateSword10', Cooldown = 31, Type = 'Ranged', Range = 17 },
            { Skill = 'DualWieldUltimateSword11', Cooldown = 31, Type = 'Ranged', Range = 17 },
            { Skill = 'DualWieldUltimateSword12', Cooldown = 31, Type = 'Ranged', Range = 17 },
            { Skill = 'DualWieldUltimateSword13', Cooldown = 31, Type = 'Ranged', Range = 17 },
            { Skill = 'DualWieldUltimateSword14', Cooldown = 31, Type = 'Ranged', Range = 17 },
            { Skill = 'DualWieldUltimateSword15', Cooldown = 31, Type = 'Ranged', Range = 17 },
            { Skill = 'DualWieldUltimateSword16', Cooldown = 31, Type = 'Ranged', Range = 17 }
        }
    },

    IcefireMage = {
        Range = 93,
        Type = 'Ranged',
        Primary = 'Staff',
        Skills = {
            { Skill = 'IcefireMage1', Cooldown = 0.33 },
            { Skill = 'IcefireMage2', Cooldown = 0.33 },
            { Skill = 'IcefireMage3', Cooldown = 0.33 },
            { Skill = 'IcySpikes1', Cooldown = 6.2, Range = 36 },
            { Skill = 'IcySpikes2', Cooldown = 6.2, Range = 36 },
            { Skill = 'IcySpikes3', Cooldown = 6.2, Range = 36 },
            { Skill = 'IcySpikes4', Cooldown = 6.2, Range = 36 },
            { Skill = 'IcySpikes5', Cooldown = 6.2, Range = 36 },
            { Skill = 'IcefireMageFireball', Cooldown = 10.2 },
            { Skill = 'IcefireMageFireballBlast', Cooldown = 10.2 },
            { Skill = 'LightningStrike1', Cooldown = 15.2, Range = 46 },
            { Skill = 'LightningStrike2', Cooldown = 15.2, Range = 46 },
            { Skill = 'LightningStrike3', Cooldown = 15.2, Range = 46 },
            { Skill = 'LightningStrike4', Cooldown = 15.2, Range = 46 },
            { Skill = 'LightningStrike5', Cooldown = 15.2, Range = 46 },
            --{ Skill = Skillsets:WaitForChild('IcefireMage'):WaitForChild('Ultimate'), Cooldown = 30, Type = 'Remote' },
            { Skill = 'IcefireMageUltimateFrost', Cooldown = 31, Range = 56 },
            { Skill = 'IcefireMageUltimateMeteor1', Cooldown = 31, Range = 56 },
            { Skill = 'IcefireMageUltimateMeteor2', Cooldown = 31, Range = 56 },
            { Skill = 'IcefireMageUltimateMeteor3', Cooldown = 31, Range = 56 },
            { Skill = 'IcefireMageUltimateMeteor4', Cooldown = 31, Range = 56 },
            { Skill = 'IcefireMageUltimateMeteor5', Cooldown = 31, Range = 56 },
            { Skill = 'IcefireMageUltimateMeteor6', Cooldown = 31, Range = 56 },
            { Skill = 'IcefireMageUltimateMeteor7', Cooldown = 31, Range = 56 },
            { Skill = 'IcefireMageUltimateMeteor8', Cooldown = 31, Range = 56 },
            { Skill = 'IcefireMageUltimateMeteor9', Cooldown = 31, Range = 56 },
            { Skill = 'IcefireMageUltimateMeteor10', Cooldown = 31, Range = 56 }
        }
    },

    Dragoon = {
        Range = 12,
        Type = 'Ranged',
        Primary = 'Spear',
        Skills = {
            { Skill = 'Dragoon1', Cooldown = 0.45, Type = 'Melee' },
            { Skill = 'Dragoon2', Cooldown = 0.45, Type = 'Melee' },
            { Skill = 'Dragoon3', Cooldown = 0.45, Type = 'Melee' },
            { Skill = 'Dragoon4', Cooldown = 0.45, Type = 'Melee' },
            { Skill = 'Dragoon5', Cooldown = 0.45, Type = 'Melee' },
            { Skill = 'Dragoon6', Cooldown = 0.45, Type = 'Melee' },
            { Skill = 'DragoonDash', Cooldown = 6.2, Range = 17 },
            { Skill = 'DragoonCross1', Cooldown = 6.2, Range = 17 },
            { Skill = 'DragoonCross2', Cooldown = 6.2, Range = 17 },
            { Skill = 'DragoonCross3', Cooldown = 6.2, Range = 17 },
            { Skill = 'DragoonCross4', Cooldown = 6.2, Range = 17 },
            { Skill = 'DragoonCross5', Cooldown = 6.2, Range = 17 },
            { Skill = 'DragoonCross6', Cooldown = 6.2, Range = 17 },
            { Skill = 'DragoonCross7', Cooldown = 6.2, Range = 17 },
            { Skill = 'DragoonCross8', Cooldown = 6.2, Range = 17 },
            { Skill = 'DragoonCross9', Cooldown = 6.2, Range = 17 },
            { Skill = 'DragoonCross10', Cooldown = 6.2, Range = 17 },
            { Skill = 'MultiStrike1', Cooldown = 6.2, Type = 'Melee', Range = 18 },
            { Skill = 'MultiStrike2', Cooldown = 6.2, Type = 'Melee', Range = 18 },
            { Skill = 'MultiStrike3', Cooldown = 6.2, Type = 'Melee', Range = 18 },
            { Skill = 'MultiStrike4', Cooldown = 6.2, Type = 'Melee', Range = 18 },
            { Skill = 'MultiStrike5', Cooldown = 6.2, Type = 'Melee', Range = 18 },
            { Skill = 'MultiStrikeDragon1', Cooldown = 6.2, Range = 57 },
            { Skill = 'MultiStrikeDragon2', Cooldown = 6.2, Range = 57 },
            { Skill = 'MultiStrikeDragon3', Cooldown = 6.2, Range = 57 },
            { Skill = 'DragoonFall', Cooldown = 8.2, Range = 5 },
            { Skill = Skillsets:WaitForChild('Dragoon'):WaitForChild('Ultimate'), Cooldown = 1, Type = 'Remote' },
            { Skill = 'DragoonUltimate', Cooldown = 31, Range = 46 },
            { Skill = 'UltimateDragon1', Cooldown = 31, Range = 94 },
            { Skill = 'UltimateDragon2', Cooldown = 31, Range = 94  },
            { Skill = 'UltimateDragon3', Cooldown = 31, Range = 94  },
            { Skill = 'UltimateDragon4', Cooldown = 31, Range = 94  },
            { Skill = 'UltimateDragon5', Cooldown = 31, Range = 94  },
            { Skill = 'UltimateDragon6', Cooldown = 31, Range = 94  },
            { Skill = 'UltimateDragon7', Cooldown = 31, Range = 94  },
            { Skill = 'UltimateDragon8', Cooldown = 31, Range = 94  },
            { Skill = 'UltimateDragon9', Cooldown = 31, Range = 94  },
            { Skill = 'UltimateDragon10', Cooldown = 31, Range = 94  },
            { Skill = 'UltimateDragon11', Cooldown = 31, Range = 94  },
            { Skill = 'UltimateDragon12', Cooldown = 31, Range = 94  },
            { Skill = 'UltimateDragon13', Cooldown = 31, Range = 94  },
            { Skill = 'UltimateDragon14', Cooldown = 31, Range = 94  },
            { Skill = 'UltimateDragon15', Cooldown = 31, Range = 94  },
            { Skill = 'UltimateDragon16', Cooldown = 31, Range = 94  },
            { Skill = 'UltimateDragon17', Cooldown = 31, Range = 94  },
            { Skill = 'UltimateDragon18', Cooldown = 31, Range = 94  },
        }
    },

    Archer = {
        Range = 93,
        Type = 'Ranged',
        Primary = 'Bow',
        Skills = {
            { Skill = 'Archer', Cooldown = 0.5, Range = 76 },
            { Skill = 'PiercingArrow1', Cooldown = 5.2 },
            { Skill = 'PiercingArrow2', Cooldown = 5.2 },
            { Skill = 'PiercingArrow3', Cooldown = 5.2 },
            { Skill = 'PiercingArrow4', Cooldown = 5.2 },
            { Skill = 'PiercingArrow5', Cooldown = 5.2 },
            { Skill = 'PiercingArrow6', Cooldown = 5.2 },
            { Skill = 'PiercingArrow7', Cooldown = 5.2 },
            { Skill = 'PiercingArrow8', Cooldown = 5.2 },
            { Skill = 'PiercingArrow9', Cooldown = 5.2 },
            { Skill = 'SpiritBomb', Cooldown = 10.2 },
            { Skill = 'MortarStrike1', Cooldown = 12.2, Range = 56 },
            { Skill = 'MortarStrike2', Cooldown = 12.2, Range = 73 },
            { Skill = 'MortarStrike3', Cooldown = 12.2, Range = 91 },
            { Skill = 'MortarStrike4', Cooldown = 12.2 },
            { Skill = 'MortarStrike5', Cooldown = 12.2 },
            { Skill = 'MortarStrike6', Cooldown = 12.2 },
            { Skill = 'MortarStrike7', Cooldown = 12.2 },
            { Skill = 'MortarStrike8', Cooldown = 12.2 },
            { Skill = 'HeavenlySword1', Cooldown = 31 },
            { Skill = 'HeavenlySword2', Cooldown = 31 },
            { Skill = 'HeavenlySword3', Cooldown = 31 },
            { Skill = 'HeavenlySword4', Cooldown = 31 },
            { Skill = 'HeavenlySword5', Cooldown = 31 },
            { Skill = 'HeavenlySword6', Cooldown = 31 },
        }
    },

    Summoner = {
        Range = 82,
        Type = 'Ranged',
        Primary = 'Staff',
        Skills = {
            { Skill = 'Summoner1', Cooldown = 0.55 },
            { Skill = 'Summoner2', Cooldown = 0.75 },
            { Skill = 'Summoner3', Cooldown = 1.05 },
            { Skill = 'Summoner4', Cooldown = 1.3 },
            { Skill = 'SoulHarvest1', Cooldown = 1.1, Type = 'Melee', Range = 16 },
            { Skill = 'SoulHarvest2', Cooldown = 1.1, Type = 'Melee', Range = 21 },
            { Skill = 'SoulHarvest3', Cooldown = 1.1, Type = 'Melee', Range = 21 },
            { Skill = 'SoulHarvest4', Cooldown = 1.1, Type = 'Melee', Range = 21 },
            { Skill = 'SoulHarvest5', Cooldown = 1.1, Type = 'Melee', Range = 21 },
            { Skill = Skillsets:WaitForChild('Summoner'):WaitForChild('SoulHarvest'), Cooldown = 10.2, Type = 'Remote', Args = "MobPosition", Range = 39 },
            { Skill = Skillsets:WaitForChild('Summoner'):WaitForChild('Summon'), Cooldown = 0.5, Type = 'Remote' },
            --{ Skill = Skillsets:WaitForChild('Summoner'):WaitForChild('ExplodeSummons'), Cooldown = 0, Type = 'Remote' },
            { Skill = Skillsets:WaitForChild('Summoner'):WaitForChild('Ultimate'), Cooldown = 1, Type = 'Remote' },
        }
    },

    Necromancer = {
        Range = 14,
        Type = 'Melee',
        Primary = 'Scythe',
        Skills = {
            { Skill = 'NecroDPS1', Cooldown = 0.8 },
            { Skill = 'NecroDPS2', Cooldown = 1.2 },
            { Skill = 'NecroDPS3', Cooldown = 1.5 },
            { Skill = 'NecroDPS4', Cooldown = 1.9 },
            { Skill = 'NecroDPS5', Cooldown = 2.2 },
            { Skill = 'NecroDPS6', Cooldown = 2.5 },
            { Skill = 'NecroDPS7', Cooldown = 2.8 },
            { Skill = 'NecroDPS8', Cooldown = 3.2 },
            { Skill = 'NecroDPS9', Cooldown = 3.5 },
            { Skill = 'SpiritExplosion0', Cooldown = 2.25, Range = 17, Args = 'HrpPos' },
            { Skill = 'SpiritExplosion1', Cooldown = 2.25, Range = 17, Args = 'HrpPos' },
            { Skill = 'SpiritExplosion2', Cooldown = 3, Range = 18, Args = 'HrpPos' },
            { Skill = 'SpiritExplosion3', Cooldown = 3.25, Range = 21, Args = 'HrpPos' },
            { Skill = 'SpiritExplosion4', Cooldown = 4, Range = 24, Args = 'HrpPos' },
            { Skill = 'TombstoneRise1', Cooldown = 4.2, Range = 18 },
            { Skill = 'TombstoneRise2', Cooldown = 4.2, Range = 18 },
            { Skill = 'TombstoneRise3', Cooldown = 4.2, Range = 18 },
            { Skill = 'TombstoneRise4', Cooldown = 4.2, Range = 18 },
            { Skill = 'TombstoneRise5', Cooldown = 4.2, Range = 18 },
            { Skill = 'SpiritCavern1', Cooldown = 10.2, Range = 140, Args = 'MobPosition' },
            { Skill = 'SpiritCavern2', Cooldown = 10.2, Range = 140, Args = 'MobPosition' },
            { Skill = 'SpiritCavern3', Cooldown = 10.2, Range = 140, Args = 'MobPosition' },
            { Skill = 'SpiritCavern4', Cooldown = 10.2, Range = 140, Args = 'MobPosition' },
            { Skill = 'SpiritCavern5', Cooldown = 10.2, Range = 140, Args = 'MobPosition' },
            { Skill = 'SpiritCavern6', Cooldown = 10.2, Range = 140, Args = 'MobPosition' },
            { Skill = 'UltScytheDrop', Cooldown = 27, Range = 98, Args = 'MobPosition' },
            { Skill = Skillsets:WaitForChild('Necromancer'):WaitForChild('Ultimate'), Cooldown = 31, Type = 'Remote' },
        }
    },

    MageOfShadows = {
        Range = 14,
        Type = 'Ranged',
        Primary = 'Staff',
        Skills = {
            { Skill = 'MageOfShadows', Cooldown = 0.8 },
        }
    }
}   

local OffsetNum
if ClassData[Class].Type == "Melee" then
    OffsetNum = -30
else
    OffsetNum = 95
end
local Folder = Instance.new('Folder')
Folder.Name = 'SummonFolder'
Folder.Parent = Workspace


local function loadFromCacheOrGithub(url, filename)
    local success, content = pcall(function()
        return readfile(filename)
    end)
    
    if success then
        print('Loaded ' .. filename .. ' from Cache')
        return loadstring(content)()
    else
        print('Loaded ' .. filename .. ' from GitHub')
        content = game:HttpGet(url)
        writefile(filename, content)
        return loadstring(content)()
    end
end

local repo = 'https://raw.githubusercontent.com/violin-suzutsuki/LinoriaLib/main/'
local Library = loadFromCacheOrGithub('https://raw.githubusercontent.com/ReaperX77/ReaperX77/main/Linoria', 'Linoria.lua')
local ThemeManager = loadFromCacheOrGithub(repo .. 'addons/ThemeManager.lua', 'LinoriaThemeManager.lua')
local SaveManager = loadFromCacheOrGithub(repo .. 'addons/SaveManager.lua', 'LinoriaSaveManager.lua')

local Window = Library:CreateWindow({
    Title = 'Infinite | World Zero',
    Center = false,
    AutoShow = true,
    TabPadding = 8,
    MenuFadeTime = 0
})
Library:Toggle()
Library:Toggle()
local Tabs = {
    Main = Window:AddTab('Main'),
    Teleports = Window:AddTab('Teleports'),
    ['Settings'] = Window:AddTab('Settings'),
    Outfits = Window:AddTab('Outfits'),
}

local Farming = Tabs.Main:AddLeftGroupbox('Farming')
local AutoSell = Tabs.Main:AddLeftGroupbox('Auto Sell')
local Miscellaneous = Tabs.Main:AddRightGroupbox('Miscellaneous')
local Gui = Tabs.Main:AddRightGroupbox('Gui')
local StatsTabbox = Tabs.Main:AddRightTabbox('temp')
local StatsTab = StatsTabbox:AddTab('Stats')
local Worlds = Tabs.Teleports:AddLeftGroupbox('Worlds')
local TowerTeleports = Tabs.Teleports:AddRightGroupbox('Towers')
local NightmareDungeons = Tabs.Teleports:AddRightGroupbox('Nightmare Dungeons')
local OutfitList = Tabs.Outfits:AddLeftGroupbox('Outfits')

-- Farming
do
    Farming:AddToggle('Killaura', {
        Text = 'Killaura',
        Default = false, -- Default value (true / false)
    })
    Farming:AddSlider('KillauraDelay', {
        Text = 'Delay',
        Default = 0,
        Min = 0,
        Max = 1,
        Rounding = 10,
        HideMax = true,
    })

    Farming:AddSlider('LifeStealInterval', {
        Text = 'Life Steal Repeats',
        Default = 1,
        Min = 1,
        Max = 20,
        Rounding = 0,
        HideMax = true,
    })

    Farming:AddToggle('Autofarm', {
        Text = 'Autofarm',
        Default = false, -- Default value (true / false)
        -- Tooltip = '', -- Information shown when you hover over the toggle
    })


    Farming:AddSlider('Offset', {
        Text = 'Offset',
        Default = 0,
        Min = 0,
        Max = OffsetNum,
        Rounding = 1,
        Compact = true,
    })

    Farming:AddToggle('RestartDungeon', {
        Text = 'Restart Dungeon',
        Default = false, -- Default value (true / false)
    })

    Farming:AddToggle('NextDungeon', {
        Text = 'Next Dungeon',
        Default = false, -- Default value (true / false)
    })

    Farming:AddToggle('CollectDrops', {
        Text = 'Collect Drops',
        Default = false, -- Default value (true / false)
    })

    Farming:AddSlider('FastSprint', {
        Text = 'Sprint Speed',
        Default = 28,
        Min = 28,
        Max = 200,
        Rounding = 0,
        Compact = true,
    })

    Farming:AddToggle('PerkSwitcher', {
        Text = 'Auto Switch Mob/Bob perk',
        Default = false, -- Default value (true / false)
    })

    local RepeatDungeon = Farming:AddButton({
        Text = 'Restart Dungeon',
        Func = function()
            if InMission then
                StartRaid(DungeonID, DifficultyID)
            end
        end,
        DoubleClick = false
    })
end

-- Auto Sell and some restart dungeon
do
    AutoSell:AddToggle('Tier1', {
        Text = 'Tier 1',
        Default = false, -- Default value (true / false)
    })
    AutoSell:AddToggle('Tier2', {
        Text = 'Tier 2',
        Default = false, -- Default value (true / false)
    })
    AutoSell:AddToggle('Tier3', {
        Text = 'Tier 3',
        Default = false, -- Default value (true / false)
    })
    AutoSell:AddToggle('Tier4', {
        Text = 'Tier 4',
        Default = false, -- Default value (true / false)
    })
    AutoSell:AddToggle('Tier5', {
        Text = 'Tier 5',
        Default = false, -- Default value (true / false)
    })

    Toggles.Tier1:OnChanged(function()
        if Toggles.Tier1.Value then
            table.insert(AutoSellTbl, '1')
        elseif not Toggles.Tier1.Value and table.find(AutoSellTbl, '1') then
            table.remove(AutoSellTbl, table.find(AutoSellTbl, '1'))
        end
    end)
    Toggles.Tier2:OnChanged(function()
        if Toggles.Tier2.Value then
            table.insert(AutoSellTbl, '2')
        elseif not Toggles.Tier2.Value and table.find(AutoSellTbl, '2') then
            table.remove(AutoSellTbl, table.find(AutoSellTbl, '2'))
        end
    end)
    Toggles.Tier3:OnChanged(function()
        if Toggles.Tier3.Value then
            table.insert(AutoSellTbl, '3')
        elseif not Toggles.Tier3.Value and table.find(AutoSellTbl, '3') then
            table.remove(AutoSellTbl, table.find(AutoSellTbl, '3'))
        end
    end)
    Toggles.Tier4:OnChanged(function()
        if Toggles.Tier4.Value then
            table.insert(AutoSellTbl, '4')
        elseif not Toggles.Tier4.Value and table.find(AutoSellTbl, '4') then
            table.remove(AutoSellTbl, table.find(AutoSellTbl, '4'))
        end
    end)
    Toggles.Tier5:OnChanged(function()
        if Toggles.Tier5.Value then
            table.insert(AutoSellTbl, '5')
        elseif not Toggles.Tier5.Value and table.find(AutoSellTbl, '5') then
            table.remove(AutoSellTbl, table.find(AutoSellTbl, '5'))
        end
    end)
end

--  Miscellaneous
do
    function PlayerTp(v1,x,y,z)
        HumanoidRootPart.CFrame = CFrame.new(v1 + Vector3.new(x,y,z))
    end

    function SmartPlayerTp(v1, x, y, z)
        HumanoidRootPart.CFrame = v1.CFrame + (v1.CFrame.lookVector*(x)+v1.CFrame.upVector*(y)+v1.CFrame.rightVector*(z))
        HumanoidRootPart.CFrame = CFrame.lookAt(HumanoidRootPart.Position, v1.Position)
        --HumanoidRootPart.CFrame = CFrame.new(v1.Position + (v1.CFrame.lookVector*(x)+v1.CFrame.upVector*(y)+v1.CFrame.rightVector*(z)),
        --Vector3.new(v1.Position.x, HumanoidRootPart.Position.y, v1.Position.z))
    end

    Miscellaneous:AddToggle('NVD', {
        Text = 'No Visual Damage',
        Default = false, -- Default value (true / false)
    })
    Miscellaneous:AddToggle('rendering', {
        Text = 'Disable 3D Rendering',
        Default = false, -- Default value (true / false)
    })
    Toggles.rendering:OnChanged(function(c)
        cloneref(game:GetService("RunService")):Set3dRenderingEnabled(not c)
    end)

    local UpgradeItems = Miscellaneous:AddButton({
        Text = 'Upgrade Equipped Items',
        Func = function()
            for _, Item in pairs(Equip:GetDescendants()) do
                task.spawn(function()
                    if Item:FindFirstChild('UpgradeLimit') and Item.UpgradeLimit.Value ~= 0 then
                        while task.wait(0.1) do
                            if Item:FindFirstChild('Upgrade') and Item.Upgrade.Value == Item.UpgradeLimit.Value then
                                break
                            else
                            Upgrade:FireServer(Item) 
                            end
                        end
                    end
                end)
            end
        end,
        DoubleClick = false
    })

    local DiscoverDungeon = Miscellaneous:AddButton({
        Text = 'Discover Dungeons',
        Func = function()
            if not InMission then
                local dungs = Workspace.PhysicalDungeonLocations
                for i,v in pairs(dungs:GetChildren()) do
                    Shared.Teleport.WaystoneTeleport:FireServer(1)
                    HumanoidRootPart:GetPropertyChangedSignal("Position"):Once(function()
                        PlayerTp(v.Ring.Position,0,10,0)
                    end)
                    wait(1)
                end
            end
        end,
        DoubleClick = false
    })

    local DisableAnticheat = Miscellaneous:AddButton({
        Text = 'Disable Anti-TP',
        Func = function()
            if not InMission then
                ReplicatedStorage.Remotes.SetMounted:FireServer(true)
                wait(1)
                Shared.Teleport.WaystoneTeleport:FireServer(1)
                wait(0.5)
                ReplicatedStorage.Remotes.SetMounted:FireServer(false)
                require(ReplicatedStorage.Client.Gui):Get("Waystones"):Close();
                
                
            end
        end,
        DoubleClick = false
    })
end

-- Gui
do
    local TotalGuis = 5
    local GuiData = {
        Bank = { DisplayName = 'Bank', CodeName = 'Bank', OrderId = 1 },
        ZeroAltar = { DisplayName = 'Zero Altar', CodeName = 'Fusion', OrderId = 2 },
        UpgradeMenu = { DisplayName = 'Upgrade', CodeName = 'ItemUpgrade', OrderId = 3 },
        DungeonMenu = { DisplayName = 'Dungeon Menu', CodeName = 'MissionSelect', OrderId = 4 },
        Inventory = { DisplayName = 'Inventory', CodeName = 'Inventory', OrderId = 5 },
        AdminItemPanel = { DisplayName = 'Admin Item Panel', CodeName = 'AdminItemPanel', OrderId = 5 },
    }
    local function OpenGui(v1)
        setthreadcontext(2)
        require(ReplicatedStorage.Client.Gui):Get(v1):Open()
    end
    for i = 1, TotalGuis do
        for i2, Gui1 in pairs(GuiData) do
            if Gui1.OrderId == i then
                Gui:AddButton({
                    Text = Gui1.DisplayName,
                    Func = function()
                        OpenGui(Gui1.CodeName)
                    end,
                    DoubleClick = false
                })
            end
        end
    end
end

-- Stats Tab
do
    local goldGainedText = StatsTab:AddLabel('Gold Gained: ' .. Gold.Value-OldGold)
    local goldRateText = StatsTab:AddLabel('Gold Rate: N/A')
    local firstTime = true
    local goldRateTick
    local goldRateGold
    local startGoldTimer = false
    local totalGoldText = StatsTab:AddLabel('Total Gold: ' .. Gold.Value)
    local goldTimeElapsedText = StatsTab:AddLabel('Time Elapsed: 0h 0m 0s')
    local function timeElapsed(v)
        local h = math.floor(v / 3600)
        local m = math.floor((v % 3600) / 60)
        local s = math.floor((v % 60))
        return (h .. 'h ' .. m .. 'm ' .. s .. 's')
    end
    task.spawn(function()
        while true do
            if Gold.Value ~= NewGold then
                NewGold = Gold.Value
                if not firstTime then
                    goldRateText:SetText('Gold Rate: ' .. math.floor((NewGold-goldRateGold)/(tick()-goldRateTick)*600)/10 .. '/min')
                end
                if firstTime then
                    firstTime = false
                    startGoldTimer = true
                    goldRateTick = tick()
                    goldRateGold = NewGold
                end
                goldGainedText:SetText('Gold Gained: ' .. NewGold-OldGold)
                totalGoldText:SetText('Total Gold: ' .. NewGold)
            end
            task.wait()
        end
    end)
    task.spawn(function()
        repeat wait() until startGoldTimer
        local goldTimeTick = tick()
        while true do
            task.wait(1)
            goldTimeElapsedText:SetText('Time Elapsed: ' .. timeElapsed(tick()-goldTimeTick))
        end
    end)
end

-- Teleports
do
    for i = 1, TotalWorlds do
        for i2, World in pairs(WorldData) do
            if World.OrderId == i then
                local i2 = Worlds:AddButton({
                    Text = World.Name,
                    Func = function()
                        Shared.Teleport.TeleportToHub:FireServer(World.Id)
                    end,
                    DoubleClick = false
                })
            end
        end
    end
end

-- Towers
do
    local DifficultyMode
    for i,v in pairs(Towers) do
        local Dung = MissionData[v]
        local Placeholder = TowerTeleports:AddButton({
            Text = Dung.NameTag .. ' ' .. Dung.DisplayWorldID .. '-' .. Dung.WorldMissionID,
            Func = function()
                StartRaid(v)
            end,
            DoubleClick = false
        })
    end
end

-- Nightmare dungeon buttons
do
    local DifficultyMode
    for i,v in pairs(Nightmares) do
        local Dung = MissionData[v]
        local Placeholder = NightmareDungeons:AddButton({
            Text = Dung.NameTag .. ' ' .. Dung.DisplayWorldID .. '-' .. Dung.WorldMissionID,
            Func = function()
                StartRaid(v, DifficultyMode)
            end,
            DoubleClick = false
        })
    end
    NightmareDungeons:AddToggle('ChallengeMode', {
        Text = 'Challenge Mode',
        Default = true, -- Default value (true / false)
    }) 
    Toggles.ChallengeMode:OnChanged(function()
        if Toggles.ChallengeMode.Value then
            DifficultyMode = 5
        else
            DifficultyMode = 1
        end
    end)
end

-- Autofarm/Killaura Functions
local ExtraOffset = 0
do    
    function MobTeleport()
        task.spawn(function()
            while Toggles.Autofarm.Value do
                for i,v in pairs(Mobs:GetChildren()) do
                    if v:FindFirstChild("HealthProperties") and v.HealthProperties:FindFirstChild("Health").Value > 0 then
                        ExtraOffset = ClassData[Class].Range < 30 and -(v.PrimaryPart.Size.y / 2 + 3) or v.PrimaryPart.Size.y / 2 +3
                        while v:FindFirstChild("HealthProperties") and v.HealthProperties.Health.Value > 0 and Toggles.Autofarm.Value 
                        and HealthProperties:FindFirstChild('Health') and HealthProperties.Health.Value > 0 do
                            SmartPlayerTp(v.PrimaryPart, 0, Options.Offset.Value + ExtraOffset, 1) 
                            Heartbeat:Wait()
                        end
                    end
                end
                task.wait()
            end
        end)
    end

    function MobTeleportIgnore(v1)
        task.spawn(function()
            while Toggles.Autofarm.Value do
                for i,v in pairs(Mobs:GetChildren()) do
                    if v:FindFirstChild("HealthProperties") and v.HealthProperties.Health.Value > 0 and not (v.Name == v1) then
                        ExtraOffset = ClassData[Class].Range < 30 and -(v.PrimaryPart.Size.y / 2 + 3) or v.PrimaryPart.Size.y / 2 + 3
                        while v:FindFirstChild("HealthProperties") and v.HealthProperties.Health.Value > 0 
                        and HealthProperties.Health.Value > 0 and Toggles.Autofarm.Value do
                            SmartPlayerTp(v.PrimaryPart, 0, Options.Offset.Value + ExtraOffset, 1) 
                            Heartbeat:Wait()
                        end
                    elseif v.Name == v1 and MobCount == 1 then
                        ExtraOffset = ClassData[Class].Range < 30 and -(v.PrimaryPart.Size.y / 2 + 3) or v.PrimaryPart.Size.y / 2 + 3
                        while v:FindFirstChild("HealthProperties") and v.HealthProperties.Health.Value > 0 
                        and HealthProperties.Health.Value > 0 and Toggles.Autofarm.Value do
                            if MobCount > 1 then
                                break
                            end
                            SmartPlayerTp(v.PrimaryPart, 0, Options.Offset.Value + ExtraOffset, 1) 
                            Heartbeat:Wait()
                        end
                    end
                end
                task.wait()
            end
        end)
    end

    function AutoCheckpoint()
        task.spawn(function()
            while Toggles.Autofarm.Value do
                for i,v in pairs(workspace:GetDescendants()) do
                    if v.Name == "TouchInterest" and v.Parent and (table.find(checkpointTbl, v.Parent.Name) or table.find(checkpointTbl, v.Parent.Parent.Name)) then
                        v.Parent.CanCollide = false
                        v.Parent.CFrame = CFrame.new(HumanoidRootPart.Position)
                    end
                end
                task.wait(0.5)
            end
        end)
    end

    function MobCounter()
        task.spawn(function()
            while Toggles.Autofarm.Value do
                MobCountNum = 0
                for i,v in pairs(Mobs:GetChildren()) do
                    if v:FindFirstChild("HealthProperties") and v.HealthProperties.Health.Value > 0 then
                        MobCountNum += 1
                    end
                end
                if MobCount and MobCount ~= MobCountNum then
                    MobCount = MobCountNum
                    
                elseif not MobCount then
                    MobCount = MobCountNum
                end
                task.wait()
            end
        end)
    end
    
    function AntiFling()
        task.spawn(function()
            while Toggles.Autofarm.Value do
                if BestMob then
                    PausePos = BestMob.Position + Vector3.new(0,10,0)
                end
                if PausePos and MobCount and MobCount == 0 and HealthProperties and HealthProperties:FindFirstChild('Health') and HealthProperties.Health.Value > 0 and
                HumanoidRootPart and (HumanoidRootPart.Position-PausePos).magnitude > 50  then
                    PlayerTp(PausePos)
                end
                Heartbeat:Wait()
            end
        end)
    end

    function sell(v1)
        if Toggles.Autofarm.Value then
            Shared.Drops.SellItems:InvokeServer({v1})
        end
    end

end

-- Change Cosmetic 
do
    local function ChangeCosmetic(v1,v2)
        if Character then
            Equipment:SetAttribute(v1,v2)
        end
    end
    local function color(x,y,z)
        Color3.fromRGB(x,y,z)
    end
    local Colors = {
        Red = Color3.fromRGB(255,0,0),
        Black = Color3.fromRGB(0,0,0),
        White = Color3.fromRGB(255,255,255),
        Green = Color3.fromRGB(0,255,0),
        Pink = Color3.fromRGB(255,0,255),
        Cyan = Color3.fromRGB(0,255,255),
        Purple = Color3.fromRGB(127.5,0,255),
        Orange = Color3.fromRGB(255,127.5,0),
        LightPink = Color3.fromRGB(255,127.5,255)
    }
    local Equip = {
        Costume = "Costume",
        CostumeDye = "CostumeDye",
        RightAura = "RightAura",
        LeftAura = "LeftAura",
        RightWepSkin = "PrimarySkin",
        LeftWepSkin = "OffhandSkin",
        Back = "Back",
        BackDye = "BackDye",
        Hat1 = "Hat1",
        Hat1Dye = "Hat1Dye",
        Hat2 = "Hat2",
        Hat2Dye = "Hat2Dye",
        Hat3 = "Ha32",
        Hat3Dye = "Hat3Dye",
        Mount = "Mount"
    }

    local CogWork = {
        Costume = "CogWorkArmor",
        Hat1 = "CogWorkTophat",
        Hat2 = "CogWorkGoggles",
    }
    
    -- Platemails
    do
        --function GreenPlatemail()
        --    ChangeCosmetic(Equip.Costume, "FullPlatemail")
        --    ChangeCosmetic(Equip.CostumeDye, Colors.Green)
    
        --    ChangeCosmetic(Equip.LeftAura, "PoisonBreathAura")
        --   ChangeCosmetic(Equip.RightAura, "PoisonBreathAura")
    
        --    ChangeCosmetic(Equip.LeftWepSkin, "GalacticLongswordGreen")
        --    ChangeCosmetic(Equip.RightWepSkin, "GalacticLongswordGreen")
    
        --    ChangeCosmetic(Equip.Hat1, "FullPlatemailHelm")
        --    ChangeCosmetic(Equip.Hat1Dye, Colors.Green)
    
        --    ChangeCosmetic(Equip.Back, "AngelWings") 
        --    ChangeCosmetic(Equip.BackDye, Colors.Green)
        --end
        
        function CogWorkOutfit()
            if Equipment:GetAttribute('Primary') then
                local WeaponType = items[Equipment:GetAttribute('Primary')].SubType
                if WeaponType == 'Greataxe' then
                    ChangeCosmetic(Equip.RightWepSkin, 'CogWorkAxe')
                else
                    ChangeCosmetic(Equip.RightWepSkin, 'CogWork' .. WeaponType)               
                end
            end
            if Equipment:GetAttribute('Offhand') then
                local WeaponType = items[Equipment:GetAttribute('Offhand')].SubType
                if WeaponType == 'Greataxe' then
                    ChangeCosmetic(Equip.LeftWepSkin, 'CogWorkAxe')
                else
                    ChangeCosmetic(Equip.LeftWepSkin, 'CogWork' .. WeaponType)               
                end
            end
            for i,v in pairs(CogWork) do
                ChangeCosmetic(i,v)
            end
        end
    end

    -- Cosmetic Buttons
    do
        local CogWorkButton = OutfitList:AddButton({
            Text = 'Cogwork',
            Func = function()
                if Character then
                    CogWorkOutfit()
                end
            end,
            DoubleClick = false
        })
    end
end

-- DamageDebug
if DamageDebug then
    local LastDamage = tick()
    Workspace.Camera.ChildAdded:Connect(function(c)
        if Toggles.Killaura.Value then
            if c.Name == 'DamagePartVisual' then
                print(tick()-LastDamage)
                LastDamage = tick()
            end
        end
    end)
end

-- Dungeon fixer and restartdungeon and nextdungeon and autosell
do
    if InMission then
        if MissionScripts:FindFirstChild(6) then -- Gravetower move pillars to mob folder
            task.spawn(function()
                local Pillar1, Pillar2, Pillar3 = Workspace:WaitForChild('Pillar1'), Workspace:WaitForChild('Pillar2'), Workspace:WaitForChild('Pillar3')
                Pillar3:WaitForChild('HealthProperties')
                Pillar1.Parent = Mobs
                Pillar2.Parent = Mobs
                Pillar3.Parent = Mobs
            end)
        elseif MissionScripts:FindFirstChild(23) then -- Atlantis Tower ignore kraken
            task.spawn(function()
                Mobs:WaitForChild('BOSSKrakenMain')
                ChestWait = 4
                ChestName = 'lol'
                local AtlantisFolder = Instance.new('Folder')
                AtlantisFolder.Name = 'WaterFolder'
                AtlantisFolder.Parent = Workspace
                Mobs.BOSSKrakenMain.Parent = Workspace.WaterFolder
                AtlantisBossCheck = true
            end)
        elseif MissionScripts:FindFirstChild(30) then -- Ruin Rush ignore sentries
            local ignoreMobFolder = Instance.new('Folder')
            ignoreMobFolder.Name = 'IgnoreMobs'
            ignoreMobFolder.Parent = Workspace
            task.spawn(function()
                while true do
                    for i,v in pairs(Mobs:GetChildren()) do
                        if (v.PrimaryPart.Position-Vector3.new(533, 302, -123)).magnitude < 100 then
                            print('Moving ' .. v.Name)
                            v.Parent = workspace.IgnoreMobs
                        end
                    end
                    task.wait()
                end
            end)
        end
    end

    if InDungeon then
        Shared.Missions.MissionFinished.OnClientEvent:Once(function()
            Inventory.ChildAdded:Connect(function(c)
                local drop = items[c.Name]
                if drop.Type == 'Weapon' or drop.Type == 'Armor' then
                    for i,v in pairs(AutoSellTbl) do
                        if tier:GetItemTier(c) == tonumber(v) then
                            c:WaitForChild('Level')
                            --print('Sold a Lvl ' .. c.Level.Value .. ' T' .. tier:GetItemTier(c) .. ' ' .. drop.DisplayKey)
                            sell(c)
                        end
                    end
                end
            end)
            if Toggles.Autofarm.Value then
                GetMissionChest:InvokeServer()
                GetMissionChest:InvokeServer()
            end
            task.wait(6)
            if Toggles.RestartDungeon.Value and Toggles.Autofarm.Value then
                StartRaid(DungeonID, DifficultyID)
            elseif Toggles.NextDungeon.Value and Toggles.Autofarm.Value then
                if not Toggles.RestartDungeon.Value then
                    local skip = true
                    local tower = false
                    if DungeonID == 38 then
                        skip = false
                    end
                    if skip then
                        if table.find(Towers2, nextDungeonTbl[table.find(nextDungeonTbl, DungeonID)+1]) then
                            if DifficultyID == 5 then
                                tower = true
                            end
                            if InTower or InInfiniteTower then
                                tower = true
                            end
                        end
                        if not tower then
                            if InDungeon and DifficultyID == 1 then
                                StartRaid(DungeonID, 5)
                            else
                                StartRaid(nextDungeonTbl[table.find(nextDungeonTbl, DungeonID)+1],1)
                            end
                        end
                        if tower then
                            StartRaid(nextDungeonTbl[table.find(nextDungeonTbl, DungeonID)+1])
                        end
                    end
                end
            end
        end)
    end
        
    if InTower or InInfiniteTower then

        -- Get Chests
        Workspace.ChildAdded:Connect(function(c)
            if Toggles.Autofarm.Value then
                if c.Name == ChestName then
                    task.spawn(function()
                        c.PrimaryPart.CanCollide = false
                        while c and c.PrimaryPart do
                            c.PrimaryPart.CFrame = CFrame.new(HumanoidRootPart.Position)
                            task.wait()
                        end
                    end)
                end
                if ownsDoubleDrop and c.Name == ChestName2 then
                    task.spawn(function()
                        c.PrimaryPart.CanCollide = false
                        while c and c.PrimaryPart do
                            c.PrimaryPart.CFrame = CFrame.new(HumanoidRootPart.Position)
                            task.wait()
                        end
                    end)
                end
            end
        end)

        -- Restart Dungeon if fail
        Shared.Missions.MissionFinished.OnClientEvent:Once(function()
            task.wait(1)
            if Toggles.RestartDungeon.Value and Toggles.Autofarm.Value then
                if table.find(Towers2, DungeonID) then
                    StartRaid(DungeonID)
                else
                    StartRaid(DungeonID, DifficultyID)
                end
            elseif Toggles.NextDungeon.Value and Toggles.Autofarm.Value then
                if not Toggles.RestartDungeon.Value then
                    local skip = true
                    local tower = false
                    if DungeonID == 38 then
                        skip = false
                    end
                    if skip then
                        if table.find(Towers2, nextDungeonTbl[table.find(nextDungeonTbl, DungeonID)+1]) then
                            if DifficultyID == 5 then
                                tower = true
                            end
                            if InTower or InInfiniteTower then
                                tower = true
                            end
                        end
                        if not tower then
                            if InDungeon and DifficultyID == 1 then
                                StartRaid(DungeonID, 5)
                            else
                                StartRaid(nextDungeonTbl[table.find(nextDungeonTbl, DungeonID)+1],1)
                            end
                        end
                        if tower then
                            StartRaid(nextDungeonTbl[table.find(nextDungeonTbl, DungeonID)+1])
                        end
                    end
                end
            end
        end)

        -- Restart dungeon if beaten (for towers and celestial, not infinite)
        TowerEnd:GetPropertyChangedSignal("Text"):Once(function()
            local TowerDing = false
            task.wait(12)
            if Toggles.RestartDungeon.Value and Toggles.Autofarm.Value then
                if table.find(Towers2, DungeonID) then
                    StartRaid(DungeonID)
                else
                    StartRaid(DungeonID, DifficultyID)
                end
            elseif Toggles.NextDungeon.Value and Toggles.Autofarm.Value then
                if not Toggles.RestartDungeon.Value then
                    local skip = true
                    local tower = false
                    if DungeonID == 38 then
                        skip = false
                    end
                    if skip then
                        if table.find(Towers2, nextDungeonTbl[table.find(nextDungeonTbl, DungeonID)+1]) then
                            if DifficultyID == 5 then
                                tower = true
                            end
                            if InTower or InInfiniteTower then
                                tower = true
                            end
                        end
                        if not tower then
                            if InDungeon and DifficultyID == 1 then
                                StartRaid(DungeonID, 5)
                            else
                                StartRaid(nextDungeonTbl[table.find(nextDungeonTbl, DungeonID)+1],1)
                            end
                        end
                        if tower then
                            StartRaid(nextDungeonTbl[table.find(nextDungeonTbl, DungeonID)+1])
                        end
                    end
                end
            end
        end)   
        
        -- Autosell
        Inventory.ChildAdded:Connect(function(c)
            local drop = items[c.Name]
            if drop.Type == 'Weapon' or drop.Type == 'Armor' then
                task.spawn(function()
                    task.wait(2)
                    require(game:GetService("ReplicatedStorage").Client.Gui):Get("LootReceived"):_Close()
                    game:GetService("Players").LocalPlayer.PlayerGui.LootReceived.LootReceived.Visible = false
                end)
                for i,v in pairs(AutoSellTbl) do
                    if tier:GetItemTier(c) == tonumber(v) then
                        c:WaitForChild('Level')
                        task.wait(2)
                        --print('Sold a Lvl ' .. c.Level.Value .. ' T' .. tier:GetItemTier(c) .. ' ' .. drop.DisplayKey)
                        sell(c)
                    end
                end
            end
        end)
    end
end


Toggles.Autofarm:OnChanged(function()

    if InMission and Toggles.Autofarm.Value then
        AntiFling()
        MobCounter()
    end

    if (Class == 'Demon') and (DungeonID == 44) then
        return
    end

    -- Autofarm
    if InDungeon and Toggles.Autofarm.Value then
        do  
            --task.spawn(function()
            --    while Toggles.Autofarm.Value do
            --        HumanoidRootPart.Velocity = Vector3.new(0, 0, 0)
            --        task.wait()
            --    end
            --end)
            if not MissionScripts:FindFirstChild(38) then
                HumanoidRootPart.CanCollide = false
            end
            task.spawn(function()
                repeat wait() until MissionStarted
                if DungeonID == 14 then
                    task.wait(6)
                    AutoCheckpoint()
                else
                    AutoCheckpoint()
                end
            end)
            local IgnoringMobs = false
            for i,v in pairs(mobIgnoreTbl) do
                if MissionScripts:FindFirstChild(v.Id) then
                    IgnoringMobs = true
                    MobTeleportIgnore(v.ignoreMob)
                end
            end
            if not IgnoringMobs then
                MobTeleport()
            end
        end
    elseif InMission and not (Toggles.Autofarm.Value) then
        HumanoidRootPart.CanCollide = true
        if MissionScripts:FindFirstChild(38) and Class == 'Demon' and TempCheck and OldPosition then
            PlayerTp(OldPosition, 0, 20, 0)
        end
    end
    
    -- Tower
    if InTower and Toggles.Autofarm.Value then
        if not TowerIdleSpot then
            TowerIdleSpot = MissionObjects.WaveStarter.Position
        end
        if not MissionStarted then
            local Start = game:GetService("Workspace").MissionObjects:WaitForChild('MissionStart', 3)
            if Start then
                Start.Collider.CFrame = CFrame.new(HumanoidRootPart.Position)
                task.wait(1)
            end
        end
        task.spawn(function() 
            while Toggles.Autofarm.Value do
                if MissionObjects:FindFirstChild('WaveStarter') then
                    MissionObjects.WaveStarter.CFrame = CFrame.new(HumanoidRootPart.Position)
                end
                if MissionObjects:FindFirstChild('BossDoorTrigger') then
                    MissionObjects.BossDoorTrigger.CFrame = CFrame.new(HumanoidRootPart.Position)
                end
                if MissionObjects:FindFirstChild('MinibossExit') then
                    MissionObjects.MinibossExit.CFrame = CFrame.new(HumanoidRootPart.Position)
                    task.wait()
                    if MissionObjects:FindFirstChild('MinibossExit') then
                        MissionObjects.MinibossExit.CFrame = CFrame.new(Vector3.new(0,0,0))
                    end
                end
                task.wait(0.2)
                if (HumanoidRootPart.Position-TowerIdleSpot).magnitude > 200 and not AtlantisBossCheck then
                    PlayerTp(TowerIdleSpot)
                end
            end
        end)
    end
      
        
    -- Atlantis Tower
    if InTower and Toggles.Autofarm.Value and InAtlantis then
        local PipePause
        local Cannon
        local CannonCheck

        task.spawn(function()
            while Toggles.Autofarm.Value and TempCheck do
                if AtlantisBossCheck then
                    for i,v in pairs(Mobs:GetChildren()) do
                        if v:FindFirstChild("HealthProperties") and v.HealthProperties.Health.Value > 0 
                        and (v.MobProperties.CurrentAttack.Value == 'Piledriver' or v.MobProperties.CurrentAttack.Value == 'Slap') then
                            BestMob = v.Subcollider.SubPrimaryPart
                            KrakenArmCheck = false
                            while v:FindFirstChild("HealthProperties") and v.HealthProperties.Health.Value > 0 and Character and Toggles.Autofarm.Value 
                            and (v.MobProperties.CurrentAttack.Value == 'Piledriver' or v.MobProperties.CurrentAttack.Value == 'Slap') 
                            and v:FindFirstChild('Collider') and not (PipePause) do
                                SmartPlayerTp(v.Collider, 0, Options.Offset.Value, 0) 
                                Heartbeat:Wait()
                            end
                        else
                            BestMob = nil
                            KrakenArmCheck = true
                        end
                    end
                end
                task.wait()
            end
        end)

        task.spawn(function()
            while Toggles.Autofarm.Value do
                if AtlantisBossCheck then
                    for i,v in pairs(Mobs:GetChildren()) do
                        if KrakenArmCheck and v:FindFirstChild('Collider') and Character and Toggles.Autofarm.Value
                        and not (PipePause) then
                            SmartPlayerTp(v.Collider, 40, 10, 0)
                            task.wait(0.2)
                            if Cannon then
                                PlayerTp(Cannon.Position, 0, 2, 0)
                                task.wait(0.16)
                            end
                        end
                    end
                end
                task.wait()
            end
        end)

        task.spawn(function()
            while TempCheck do
                if AtlantisBossCheck then
                    for i,v in pairs(Workspace:GetChildren()) do
                        if v.Name == 'KrakenPipe' then
                            if v:FindFirstChild('GuiPart') then
                                while Toggles.Autofarm.Value and v.GuiPart.SurfaceGui.Percent.Text ~= '100%' and Character do
                                    CannonCheck = false
                                    PipePause = true
                                    PlayerTp(v.Base.Position, 0, 4, 0)
                                    Heartbeat:Wait()
                                end
                            end
                        end
                    end
                    
                    if Workspace:FindFirstChild('KrakenCannon') then
                        Cannon = Workspace.KrakenCannon.PrimaryPart
                    else
                        Cannon = nil
                    end

                    if PipePause then
                        for i,v in pairs(Workspace:GetChildren()) do
                            if v.Name == 'KrakenPipe' then
                                if v:FindFirstChild('GuiPart') then
                                    if v.GuiPart.SurfaceGui.Percent.Text ~= '100%' then
                                        CannonCheck = true
                                    end
                                end
                            end
                        end
                        if not CannonCheck then
                            PipePause = false
                        end
                    end
                end
                task.wait()
            end     
        end)
    end

    if InInfiniteTower and Toggles.Autofarm.Value then
        local tempt = {'Demon', 'MageOfShadows'}
        if not table.find(tempt, Class) then
            MobTeleport()
        end
        local FloorPart = game:GetService("Workspace").LobbyTeleport.Interaction
        local BossPart = game:GetService("Workspace").Boss_Gate.Interactions.Bounds
        task.spawn(function() 
            while Toggles.Autofarm.Value do
                BossPart.CanCollide = false
                BossPart.CFrame = CFrame.new(HumanoidRootPart.Position)
                FloorPart.CFrame = CFrame.new(HumanoidRootPart.Position)
                task.wait(0.5)
            end
        end)
    end
end)

-- Killaura Miscellaneous
do
    function GetClosestMob()
        local Targets = {}
        for _, Mob in pairs(Workspace.Mobs:GetChildren()) do
            local MeshPart = Mob.PrimaryPart
            if MeshPart and Mob:FindFirstChild('HealthProperties') and Mob.HealthProperties:FindFirstChild('Health') and Mob.HealthProperties.Health.Value > 0 then
                table.insert(Targets, MeshPart)
            end
        end
        table.sort(Targets, function(Target1, Target2)
            Target1 = (Target1.Position - HumanoidRootPart.Position).Magnitude
            Target2 = (Target2.Position - HumanoidRootPart.Position).Magnitude
            return Target1 < Target2
        end)
        return Targets[1] 
    end
    -- TargetDummies to mobs folder
    if Workspace:FindFirstChild('TargetDummies') then
        for _, Dummy in pairs(Workspace.TargetDummies:GetChildren()) do
            Dummy.Parent = Mobs
        end
    end

    -- Moving Players to mobs folder in pvp arena
    if game.PlaceId == 6510868181 then
        for _, Player in pairs(Workspace.Characters:GetChildren()) do
            if Player.Name ~= PlayerName then
                Player.Parent = Mobs
            end
        end
        Workspace.Characters.ChildAdded:Connect(function(Player)
            if Player.Name ~= PlayerName then
                Player.Parent = Mobs
            end
        end)
    end
end

Toggles.Killaura:OnChanged(function()
    local LifeSteal = Skillsets.Demon.LifeSteal
    local ExtraRange = 0

    -- GetClosestMob
    task.spawn(function()
        if not InAtlantis then 
            while Toggles.Killaura.Value do
                local Targets = {}
                for _, Mob in pairs(Workspace.Mobs:GetChildren()) do
                    local MeshPart = Mob.PrimaryPart
                    if MeshPart and Mob:FindFirstChild('HealthProperties') and Mob.HealthProperties.Health.Value > 0 then
                        table.insert(Targets, MeshPart)
                    end
                end
                table.sort(Targets, function(Target1, Target2)
                    Target1 = (Target1.Position - HumanoidRootPart.Position).Magnitude
                    Target2 = (Target2.Position - HumanoidRootPart.Position).Magnitude
                    return Target1 < Target2
                end)
                BestMob = Targets[1]    
                task.wait() 
            end
        end
    end)

    -- ExtraRange and PerkSwitcher
    task.spawn(function()
        while Toggles.Killaura.Value do
            if BestMob and MobList:FindFirstChild(BestMob.Parent.Name) then
                local CurrentMob = Mob(BestMob.Parent.Name)
                local MobName = CurrentMob.NameTag
                local BossTag = CurrentMob.BossTag
                local OffhandPerksOn = OffhandPerksActive()
                local OffhandPerkValue = nil
                local PrimaryPerkValue = nil
                ExtraRange = BestMob.Parent.PrimaryPart.Size.z/2
                if Toggles.PerkSwitcher.Value and ClassData[Class].Offhand then
                    if BossTag then
                        if Offhand:FindFirstChild('Perk3',true) and Offhand:FindFirstChild('Perk3',true).Value == 'TestTier5' and not(OffhandPerksOn) then
                            OffhandPerkValue = Offhand:FindFirstChild('Perk3',true).PerkValue.Value
                            SwitchOffhandPerks(true)
                        elseif Primary:FindFirstChild('Perk3',true) and Primary:FindFirstChild('Perk3',true).Value == 'TestTier5' and OffhandPerksOn then
                            PrimaryPerkValue = Primary:FindFirstChild('Perk3',true).PerkValue.Value
                            if OffhandPerkValue and OffhandPerkValue < PrimaryPerkValue then
                                SwitchOffhandPerks(false)
                            elseif not OffhandPerkValue then
                                SwitchOffhandPerks(false)
                            end
                        end
                    elseif not BossTag then
                        if Offhand:FindFirstChild('Perk3',true) and Offhand:FindFirstChild('Perk3',true).Value == 'MobBoss' and not(OffhandPerksOn) then
                            OffhandPerkValue = Offhand:FindFirstChild('Perk3',true).PerkValue.Value
                            SwitchOffhandPerks(true)
                        elseif Primary:FindFirstChild('Perk3',true) and Primary:FindFirstChild('Perk3',true).Value == 'MobBoss' and OffhandPerksOn then
                            PrimaryPerkValue = Primary:FindFirstChild('Perk3',true).PerkValue.Value
                            if OffhandPerkValue and OffhandPerkValue < PrimaryPerkValue then
                                SwitchOffhandPerks(false)
                            elseif not OffhandPerkValue then
                                SwitchOffhandPerks(false)
                            end
                        end
                    end
                end
            end
            task.wait()
        end
    end)
    --if MobName == 'Corrupted Great Tree Ent' or 'Root of Ignis' then
    --    ExtraRange = 19
    --elseif MobName == 'Eye of Ignis' or 'Roculus' then
    --    ExtraRange = 20
    --else
    --    ExtraRange = 0
    --end

    -- Killaura
    task.spawn(function()
        while Toggles.Killaura.Value do
            if BestMob and Character:FindFirstChild('Properties') and not (Character.Properties:GetAttribute('Mounted')) 
            and HealthProperties:FindFirstChild('Health') and HealthProperties.Health.Value > 0 then
                for _, SkillData in pairs(ClassData[Class].Skills) do
                    local SkillCooldown = SkillData.Cooldown + Options.KillauraDelay.Value
                    local SkillType = SkillData.Type or ClassData[Class].Type
                    local SkillRange = SkillData.Range and SkillData.Range + ExtraRange or ClassData[Class].Range + ExtraRange
                    if tick() - (SkillData.LastUsed or 0) >= SkillCooldown  then
                        if SkillType == 'Melee' and (BestMob.Position-HumanoidRootPart.Position).magnitude <= SkillRange
                        and BestMob.Parent.HealthProperties.Health.Value > 0 then
                            if SkillData.Args == 'HrpPos' then
                                Attack:FireServer(SkillData.Skill, HumanoidRootPart.Position)
                                SkillData.LastUsed = tick()
                            elseif SkillData.Args == 'MobPosition' then
                                Attack:FireServer(SkillData.Skill, BestMob.Position)
                                SkillData.LastUsed = tick()
                            else
                                Attack:FireServer(SkillData.Skill, HumanoidRootPart.Position, CFrame.new(HumanoidRootPart.Position, BestMob.Position).LookVector)
                                SkillData.LastUsed = tick()
                            end
                        elseif SkillType == 'Ranged' and (BestMob.Position-HumanoidRootPart.Position).magnitude <= SkillRange
                        and BestMob.Parent.HealthProperties.Health.Value > 0 then
                            Attack:FireServer(SkillData.Skill, BestMob.Position)
                            SkillData.LastUsed = tick()
                        elseif SkillType == 'Remote' and (BestMob.Position-HumanoidRootPart.Position).magnitude <= SkillRange then
                            if SkillData.Args == 'MobPosition' then
                                SkillData.Skill:FireServer(BestMob.Position)
                                SkillData.LastUsed = tick()
                            else
                                SkillData.Skill:FireServer()
                                SkillData.LastUsed = tick()
                            end 
                        elseif SkillType == 'Heal' then
                            if HealthProperties.Health.Value/HealthProperties.MaxHealth.Value < 0.6 then
                                if SkillData.Args then
                                    SkillData.Skill:FireServer(SkillData.Args)
                                    SkillData.LastUsed = tick()
                                else
                                    SkillData.Skill:FireServer()
                                    SkillData.LastUsed = tick()
                                end
                            end  
                        end
                    end
                end
            end
            task.wait()
        end
    end)

    -- MissionObjects moving to mobs folder
    if InMission and not MissionScripts:FindFirstChild(36) then
        task.spawn(function()
            while true do
                for i,v in pairs(MissionObjects:GetChildren()) do
                    if v:FindFirstChild("HealthProperties") and not table.find(ignoreObjects, v.Name) then
                        v.Parent = Mobs
                    else
                        for i2,v2 in pairs(v:GetChildren()) do
                            if v2:FindFirstChild("HealthProperties") and not table.find(ignoreObjects, v2.Name) then
                                v2.Parent = Mobs
                            end
                        end
                    end
                end 
                task.wait()
            end 
        end)    
    end

    -- LifeSteal Loop for demon
    if InMission then
        if Class == 'Demon' then
            if not InAtlantis then
                local IgnoringMobs = false
                for i2,v2 in pairs(mobIgnoreTbl) do
                    if DungeonID == v2.Id then
                        IgnoringMobs = true
                        task.spawn(function()
                            local mobWait
                            while Toggles.Killaura.Value do
                                for i = 1, Options.LifeStealInterval.Value do
                                    for _, Mob in pairs(Mobs:GetChildren()) do
                                        if Mob:FindFirstChild("HealthProperties") and Mob.HealthProperties.Health.Value > 0 then
                                            if not (Mob.Name == v2.ignoreMob) then
                                                LifeSteal:FireServer(table.create(3, Mob))
                                            end
                                            if Mob.Name == v2.ignoreMob and MobCount and MobCount == 1 then
                                                if not mobWait then
                                                    task.wait(3)
                                                    mobWait = true
                                                end
                                                if MobCount == 1 then
                                                    LifeSteal:FireServer(table.create(3, Mob))
                                                end
                                            end
                                        end
                                    end
                                end
                                task.wait()
                            end
                        end)
                    end
                end
                if not IgnoringMobs then
                    task.spawn(function()
                        while Toggles.Killaura.Value do
                            for i = 1, Options.LifeStealInterval.Value do
                                for _, Mob in pairs(Mobs:GetChildren()) do
                                    if Mob:FindFirstChild("HealthProperties") and Mob.HealthProperties.Health.Value > 0 then
                                        LifeSteal:FireServer(table.create(3, Mob))
                                    end
                                end
                            end
                            task.wait()
                        end
                    end)
                end

            end
            if InAtlantis then
                task.spawn(function()
                    while not Workspace:FindFirstChild('WaterFolder') and Toggles.Killaura.Value do
                        for i = 1, Options.LifeStealInterval.Value do
                            for _, Mob in pairs(Mobs:GetChildren()) do
                                if Mob:FindFirstChild("HealthProperties") and Mob.HealthProperties.Health.Value > 0 then
                                    LifeSteal:FireServer(table.create(3, Mob))
                                end
                            end
                        end
                        task.wait()
                    end
                    while Workspace:FindFirstChild('WaterFolder') and Toggles.Killaura.Value do
                        for i = 1, Options.LifeStealInterval.Value do
                            for _, Mob in pairs(Mobs:GetChildren()) do
                                if Mob:FindFirstChild("HealthProperties") and Mob.HealthProperties.Health.Value > 0 then
                                    LifeSteal:FireServer(table.create(3, Mob))
                                end
                            end
                        end
                        task.wait()
                    end
                end)
            end
        end
    end

    -- Demon BloodBinding
    if Class == 'Demon' and Toggles.Killaura.Value and TempCheck then
        task.spawn(function()
            while Toggles.Killaura.Value do
                if not Character:FindFirstChild('AttackBuffDemonBloodBinding',true) 
                and BestMob and (BestMob.Position-HumanoidRootPart.Position).magnitude <= 95
                and Character:FindFirstChild('Properties') and not (Character.Properties:GetAttribute('Mounted')) 
                and HealthProperties:FindFirstChild('Health') and HealthProperties.Health.Value > 0 then
                    Skillsets.Demon.BloodBinding:FireServer()
                    task.wait(6)
                end
                task.wait()
            end
        end)
    end

    -- Summoner summon teleporting to mobs and exploding
    if Class == 'Summoner' and Toggles.Killaura.Value then
        
        task.spawn(function()
            while Toggles.Killaura.Value do
                for _, Mob in pairs(Mobs:GetChildren()) do
                    if Mob.Name == 'SummonerSummonWeak' or Mob.Name == 'SummonerSummonStrong' then
                        Mob.Parent = Workspace.SummonFolder
                    end
                end
                task.wait()
            end
        end)

        task.spawn(function()
            while Toggles.Killaura.Value do
                for _, Summon in pairs(Workspace.SummonFolder:GetChildren()) do
                    if BestMob then
                        Summon.PrimaryPart.CFrame = CFrame.new(BestMob.Position)
                    end
                end
                Heartbeat:Wait()
            end
        end)

        task.spawn(function()
            while Toggles.Killaura.Value do
                for _, Summon in pairs(Workspace.SummonFolder:GetChildren()) do
                    if Summon:FindFirstChild('HealthProperties') and Summon.HealthProperties.Health.Value > 0
                    and Summon.HealthProperties.Health.Value/Summon.HealthProperties.MaxHealth.Value < 0.25 then
                        Skillsets.Summoner.ExplodeSummons:FireServer()
                    end
                end
                task.wait()
            end
        end)
    end
end)

Toggles.CollectDrops:OnChanged(function()
    task.spawn(function()
        while Toggles.CollectDrops.Value do
            for Index, Coin in pairs(CoinTable) do
                Coin.model:Destroy()
                Coin.followPart:Destroy()
                table.remove(CoinTable, Index)
                CoinEvent:FireServer(Coin.id)
            end
            task.wait()
        end
    end)
end)

local f = require(game.ReplicatedStorage:WaitForChild("Shared"):WaitForChild("Effects"))
local DmgNum = f.RenderDamageNumber
Toggles.NVD:OnChanged(function()
    f.RenderDamageNumber = function(...)
        if Toggles.NVD.Value then
            return
        end
        return DmgNum(...)
    end
end)

Options.FastSprint:OnChanged(function()
    Settings.SPRINT_WALKSPEED = Options.FastSprint.Value
end)

-- UI Settings
local MenuGroup = Tabs['Settings']:AddLeftGroupbox('Menu')

MenuGroup:AddButton('Unload', function() Library:Unload() end)
MenuGroup:AddLabel('Menu bind'):AddKeyPicker('MenuKeybind', { Default = 'LeftAlt', NoUI = false, Text = 'Menu keybind' })

Library.ToggleKeybind = Options.MenuKeybind -- Allows you to have a custom keybind for the menu

-- Addons:
-- SaveManager (Allows you to have a configuration system)
-- ThemeManager (Allows you to have a menu theme system)

-- Hand the library over to our managers
ThemeManager:SetLibrary(Library)
SaveManager:SetLibrary(Library)

-- Ignore keys that are used by ThemeManager.
-- (we dont want configs to save themes, do we?)
SaveManager:IgnoreThemeSettings()

-- Adds our MenuKeybind to the ignore list
-- (do you want each config to have a different menu key? probably not.)
SaveManager:SetIgnoreIndexes({ 'MenuKeybind' })

-- use case for doing it this way:
-- a script hub could have themes in a global folder
-- and game configs in a separate folder per game
ThemeManager:SetFolder('MyScriptHub')
SaveManager:SetFolder('MyScriptHub')

-- Builds our config menu on the right side of our tab
SaveManager:BuildConfigSection(Tabs['Settings'])

-- Builds our theme menu (with plenty of built in themes) on the left side
-- NOTE: you can also call ThemeManager:ApplyToGroupbox to add it to a specific groupbox
ThemeManager:ApplyToTab(Tabs['Settings'])


-- You can use the SaveManager:LoadAutoloadConfig() to load a config
-- which has been marked to be one that auto loads!
if InMission then
    SaveManager:LoadAutoloadConfig()
end

if InDungeon then
    PausePos = HumanoidRootPart.Position
    for i,v in pairs(MissionObjects.MissionStart:GetDescendants()) do
        if v.Name == "TouchInterest" and v.Parent then
            v.Parent.CanCollide = false
            v.Parent.CFrame = CFrame.new(HumanoidRootPart.Position)
            break
        end
    end
end
